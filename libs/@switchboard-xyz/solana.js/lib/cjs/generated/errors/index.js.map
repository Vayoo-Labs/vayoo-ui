{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/generated/errors/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iEAA6E;AAE7E,iDAAmC;AACnC,iDAAmC;AAEnC,SAAgB,QAAQ,CACtB,IAAY,EACZ,IAAe;IAEf,OAAO,IAAI,IAAI,IAAI;QACjB,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;QAC7B,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAClC,CAAC;AAPD,4BAOC;AAED,SAAS,cAAc,CACrB,GAAM,EACN,IAAO;IAEP,OAAO,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAC/C,CAAC;AAED,MAAM,OAAO,GAAG,mDAAmD,CAAC;AAEpE,SAAgB,WAAW,CACzB,GAAY;IAEZ,IACE,OAAO,GAAG,KAAK,QAAQ;QACvB,GAAG,KAAK,IAAI;QACZ,CAAC,cAAc,CAAC,GAAG,EAAE,MAAM,CAAC;QAC5B,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EACxB;QACA,OAAO,IAAI,CAAC;KACb;IAED,IAAI,UAAU,GAA2B,IAAI,CAAC;IAC9C,KAAK,MAAM,OAAO,IAAI,GAAG,CAAC,IAAI,EAAE;QAC9B,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,UAAU,KAAK,IAAI,EAAE;YACvB,MAAM;SACP;KACF;IAED,IAAI,UAAU,KAAK,IAAI,EAAE;QACvB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACpD,IACE,YAAY,KAAK,oCAAe,CAAC,QAAQ,EAAE;QAC3C,YAAY,KAAK,qCAAgB,CAAC,QAAQ,EAAE,EAC5C;QACA,OAAO,IAAI,CAAC;KACb;IAED,IAAI,SAAiB,CAAC;IACtB,IAAI;QACF,SAAS,GAAG,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;KACnC;IAAC,OAAO,QAAQ,EAAE;QACjB,OAAO,IAAI,CAAC;KACb;IAED,OAAO,QAAQ,CAAC,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;AACvC,CAAC;AAxCD,kCAwCC","sourcesContent":["import { SBV2_DEVNET_PID, SBV2_MAINNET_PID } from '../../SwitchboardProgram';\nimport { PROGRAM_ID } from '../programId';\nimport * as anchor from './anchor';\nimport * as custom from './custom';\n\nexport function fromCode(\n  code: number,\n  logs?: string[]\n): custom.CustomError | anchor.AnchorError | null {\n  return code >= 6000\n    ? custom.fromCode(code, logs)\n    : anchor.fromCode(code, logs);\n}\n\nfunction hasOwnProperty<X extends object, Y extends PropertyKey>(\n  obj: X,\n  prop: Y\n): obj is X & Record<Y, unknown> {\n  return Object.hasOwnProperty.call(obj, prop);\n}\n\nconst errorRe = /Program (\\w+) failed: custom program error: (\\w+)/;\n\nexport function fromTxError(\n  err: unknown\n): custom.CustomError | anchor.AnchorError | null {\n  if (\n    typeof err !== 'object' ||\n    err === null ||\n    !hasOwnProperty(err, 'logs') ||\n    !Array.isArray(err.logs)\n  ) {\n    return null;\n  }\n\n  let firstMatch: RegExpExecArray | null = null;\n  for (const logLine of err.logs) {\n    firstMatch = errorRe.exec(logLine);\n    if (firstMatch !== null) {\n      break;\n    }\n  }\n\n  if (firstMatch === null) {\n    return null;\n  }\n\n  const [programIdRaw, codeRaw] = firstMatch.slice(1);\n  if (\n    programIdRaw !== SBV2_DEVNET_PID.toString() &&\n    programIdRaw !== SBV2_MAINNET_PID.toString()\n  ) {\n    return null;\n  }\n\n  let errorCode: number;\n  try {\n    errorCode = parseInt(codeRaw, 16);\n  } catch (parseErr) {\n    return null;\n  }\n\n  return fromCode(errorCode, err.logs);\n}\n"]}
{"version":3,"file":"Lanes.js","sourceRoot":"","sources":["../../../../src/generated/types/Lanes.ts"],"names":[],"mappings":"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","sourcesContent":["import * as borsh from '@coral-xyz/borsh';\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface DJSON {\n  kind: 'D';\n}\n\nexport class D {\n  static readonly discriminator = 0;\n  static readonly kind = 'D';\n  readonly discriminator = 0;\n  readonly kind = 'D';\n\n  toJSON(): DJSON {\n    return {\n      kind: 'D',\n    };\n  }\n\n  toEncodable() {\n    return {\n      D: {},\n    };\n  }\n}\n\nexport interface CJSON {\n  kind: 'C';\n}\n\nexport class C {\n  static readonly discriminator = 1;\n  static readonly kind = 'C';\n  readonly discriminator = 1;\n  readonly kind = 'C';\n\n  toJSON(): CJSON {\n    return {\n      kind: 'C',\n    };\n  }\n\n  toEncodable() {\n    return {\n      C: {},\n    };\n  }\n}\n\nexport interface ABJSON {\n  kind: 'AB';\n}\n\nexport class AB {\n  static readonly discriminator = 2;\n  static readonly kind = 'AB';\n  readonly discriminator = 2;\n  readonly kind = 'AB';\n\n  toJSON(): ABJSON {\n    return {\n      kind: 'AB',\n    };\n  }\n\n  toEncodable() {\n    return {\n      AB: {},\n    };\n  }\n}\n\nexport interface ACJSON {\n  kind: 'AC';\n}\n\nexport class AC {\n  static readonly discriminator = 3;\n  static readonly kind = 'AC';\n  readonly discriminator = 3;\n  readonly kind = 'AC';\n\n  toJSON(): ACJSON {\n    return {\n      kind: 'AC',\n    };\n  }\n\n  toEncodable() {\n    return {\n      AC: {},\n    };\n  }\n}\n\nexport interface ADJSON {\n  kind: 'AD';\n}\n\nexport class AD {\n  static readonly discriminator = 4;\n  static readonly kind = 'AD';\n  readonly discriminator = 4;\n  readonly kind = 'AD';\n\n  toJSON(): ADJSON {\n    return {\n      kind: 'AD',\n    };\n  }\n\n  toEncodable() {\n    return {\n      AD: {},\n    };\n  }\n}\n\nexport interface BCDJSON {\n  kind: 'BCD';\n}\n\nexport class BCD {\n  static readonly discriminator = 5;\n  static readonly kind = 'BCD';\n  readonly discriminator = 5;\n  readonly kind = 'BCD';\n\n  toJSON(): BCDJSON {\n    return {\n      kind: 'BCD',\n    };\n  }\n\n  toEncodable() {\n    return {\n      BCD: {},\n    };\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function fromDecoded(obj: any): types.LanesKind {\n  if (typeof obj !== 'object') {\n    throw new Error('Invalid enum object');\n  }\n\n  if ('D' in obj) {\n    return new D();\n  }\n  if ('C' in obj) {\n    return new C();\n  }\n  if ('AB' in obj) {\n    return new AB();\n  }\n  if ('AC' in obj) {\n    return new AC();\n  }\n  if ('AD' in obj) {\n    return new AD();\n  }\n\n  throw new Error('Invalid enum object');\n}\n\nexport function fromJSON(obj: types.LanesJSON): types.LanesKind {\n  switch (obj.kind) {\n    case 'D': {\n      return new D();\n    }\n    case 'C': {\n      return new C();\n    }\n    case 'AB': {\n      return new AB();\n    }\n    case 'AC': {\n      return new AC();\n    }\n    case 'AD': {\n      return new AD();\n    }\n  }\n}\n\nexport function layout(property?: string) {\n  const ret = borsh.rustEnum([\n    borsh.struct([], 'D'),\n    borsh.struct([], 'C'),\n    borsh.struct([], 'AB'),\n    borsh.struct([], 'AC'),\n    borsh.struct([], 'AD'),\n    borsh.struct([], 'BCD'),\n  ]);\n  if (property !== undefined) {\n    return ret.replicate(property);\n  }\n  return ret;\n}\n"]}
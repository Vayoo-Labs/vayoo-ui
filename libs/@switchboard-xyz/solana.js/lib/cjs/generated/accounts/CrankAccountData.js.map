{"version":3,"file":"CrankAccountData.js","sourceRoot":"","sources":["../../../../src/generated/accounts/CrankAccountData.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,6CAAwD;AAExD,wDAA0C,CAAC,wDAAwD;AAyCnG,MAAa,gBAAgB;IAiC3B,YAAY,MAA8B;QACxC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;IACtC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAChB,OAA2B,EAC3B,OAAkB;QAElB,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAE9D,IAAI,IAAI,KAAK,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC;SACb;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YACzC,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;SAC3D;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,aAAa,CACxB,OAA2B,EAC3B,SAAsB;QAEtB,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;QAE1E,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACtB,IAAI,IAAI,KAAK,IAAI,EAAE;gBACjB,OAAO,IAAI,CAAC;aACb;YACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBACzC,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;aAC3D;YAED,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,IAAY;QACxB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,aAAa,CAAC,EAAE;YAC5D,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAClD;QAED,MAAM,GAAG,GAAG,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAE1D,OAAO,IAAI,gBAAgB,CAAC;YAC1B,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,QAAQ,EAAE,GAAG,CAAC,QAAQ;YACtB,WAAW,EAAE,GAAG,CAAC,WAAW;YAC5B,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,cAAc,EAAE,GAAG,CAAC,cAAc;YAClC,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,UAAU,EAAE,GAAG,CAAC,UAAU;SAC3B,CAAC,CAAC;IACL,CAAC;IAED,MAAM;QACJ,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;YACxC,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE;SACvC,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,GAAyB;QACvC,OAAO,IAAI,gBAAgB,CAAC;YAC1B,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,QAAQ,EAAE,GAAG,CAAC,QAAQ;YACtB,WAAW,EAAE,IAAI,mBAAS,CAAC,GAAG,CAAC,WAAW,CAAC;YAC3C,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,cAAc,EAAE,GAAG,CAAC,cAAc;YAClC,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,UAAU,EAAE,IAAI,mBAAS,CAAC,GAAG,CAAC,UAAU,CAAC;SAC1C,CAAC,CAAC;IACL,CAAC;;AAzHH,4CA0HC;AAxGiB,8BAAa,GAAG,MAAM,CAAC,IAAI,CAAC;IAC1C,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;CACrC,CAAC,CAAC;AAEa,uBAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IACpC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC;IACnC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,UAAU,CAAC;IACvC,KAAK,CAAC,SAAS,CAAC,aAAa,CAAC;IAC9B,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC;IACnB,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC;IACpB,KAAK,CAAC,EAAE,CAAC,gBAAgB,CAAC;IAC1B,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,MAAM,CAAC;IACpC,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC;CAC9B,CAAC,CAAC","sourcesContent":["import { SwitchboardProgram } from '../../SwitchboardProgram';\nimport { PublicKey, Connection } from '@solana/web3.js';\nimport { BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as borsh from '@coral-xyz/borsh'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface CrankAccountDataFields {\n  /** Name of the crank to store on-chain. */\n  name: Array<number>;\n  /** Metadata of the crank to store on-chain. */\n  metadata: Array<number>;\n  /** Public key of the oracle queue who owns the crank. */\n  queuePubkey: PublicKey;\n  /** Number of aggregators added to the crank. */\n  pqSize: number;\n  /** Maximum number of aggregators allowed to be added to a crank. */\n  maxRows: number;\n  /** Pseudorandom value added to next aggregator update time. */\n  jitterModifier: number;\n  /** Reserved for future info. */\n  ebuf: Array<number>;\n  /** The public key of the CrankBuffer account holding a collection of Aggregator pubkeys and their next allowed update time. */\n  dataBuffer: PublicKey;\n}\n\nexport interface CrankAccountDataJSON {\n  /** Name of the crank to store on-chain. */\n  name: Array<number>;\n  /** Metadata of the crank to store on-chain. */\n  metadata: Array<number>;\n  /** Public key of the oracle queue who owns the crank. */\n  queuePubkey: string;\n  /** Number of aggregators added to the crank. */\n  pqSize: number;\n  /** Maximum number of aggregators allowed to be added to a crank. */\n  maxRows: number;\n  /** Pseudorandom value added to next aggregator update time. */\n  jitterModifier: number;\n  /** Reserved for future info. */\n  ebuf: Array<number>;\n  /** The public key of the CrankBuffer account holding a collection of Aggregator pubkeys and their next allowed update time. */\n  dataBuffer: string;\n}\n\nexport class CrankAccountData {\n  /** Name of the crank to store on-chain. */\n  readonly name: Array<number>;\n  /** Metadata of the crank to store on-chain. */\n  readonly metadata: Array<number>;\n  /** Public key of the oracle queue who owns the crank. */\n  readonly queuePubkey: PublicKey;\n  /** Number of aggregators added to the crank. */\n  readonly pqSize: number;\n  /** Maximum number of aggregators allowed to be added to a crank. */\n  readonly maxRows: number;\n  /** Pseudorandom value added to next aggregator update time. */\n  readonly jitterModifier: number;\n  /** Reserved for future info. */\n  readonly ebuf: Array<number>;\n  /** The public key of the CrankBuffer account holding a collection of Aggregator pubkeys and their next allowed update time. */\n  readonly dataBuffer: PublicKey;\n\n  static readonly discriminator = Buffer.from([\n    111, 81, 146, 73, 172, 180, 134, 209,\n  ]);\n\n  static readonly layout = borsh.struct([\n    borsh.array(borsh.u8(), 32, 'name'),\n    borsh.array(borsh.u8(), 64, 'metadata'),\n    borsh.publicKey('queuePubkey'),\n    borsh.u32('pqSize'),\n    borsh.u32('maxRows'),\n    borsh.u8('jitterModifier'),\n    borsh.array(borsh.u8(), 255, 'ebuf'),\n    borsh.publicKey('dataBuffer'),\n  ]);\n\n  constructor(fields: CrankAccountDataFields) {\n    this.name = fields.name;\n    this.metadata = fields.metadata;\n    this.queuePubkey = fields.queuePubkey;\n    this.pqSize = fields.pqSize;\n    this.maxRows = fields.maxRows;\n    this.jitterModifier = fields.jitterModifier;\n    this.ebuf = fields.ebuf;\n    this.dataBuffer = fields.dataBuffer;\n  }\n\n  static async fetch(\n    program: SwitchboardProgram,\n    address: PublicKey\n  ): Promise<CrankAccountData | null> {\n    const info = await program.connection.getAccountInfo(address);\n\n    if (info === null) {\n      return null;\n    }\n    if (!info.owner.equals(program.programId)) {\n      throw new Error(\"account doesn't belong to this program\");\n    }\n\n    return this.decode(info.data);\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    addresses: PublicKey[]\n  ): Promise<Array<CrankAccountData | null>> {\n    const infos = await program.connection.getMultipleAccountsInfo(addresses);\n\n    return infos.map(info => {\n      if (info === null) {\n        return null;\n      }\n      if (!info.owner.equals(program.programId)) {\n        throw new Error(\"account doesn't belong to this program\");\n      }\n\n      return this.decode(info.data);\n    });\n  }\n\n  static decode(data: Buffer): CrankAccountData {\n    if (!data.slice(0, 8).equals(CrankAccountData.discriminator)) {\n      throw new Error('invalid account discriminator');\n    }\n\n    const dec = CrankAccountData.layout.decode(data.slice(8));\n\n    return new CrankAccountData({\n      name: dec.name,\n      metadata: dec.metadata,\n      queuePubkey: dec.queuePubkey,\n      pqSize: dec.pqSize,\n      maxRows: dec.maxRows,\n      jitterModifier: dec.jitterModifier,\n      ebuf: dec.ebuf,\n      dataBuffer: dec.dataBuffer,\n    });\n  }\n\n  toJSON(): CrankAccountDataJSON {\n    return {\n      name: this.name,\n      metadata: this.metadata,\n      queuePubkey: this.queuePubkey.toString(),\n      pqSize: this.pqSize,\n      maxRows: this.maxRows,\n      jitterModifier: this.jitterModifier,\n      ebuf: this.ebuf,\n      dataBuffer: this.dataBuffer.toString(),\n    };\n  }\n\n  static fromJSON(obj: CrankAccountDataJSON): CrankAccountData {\n    return new CrankAccountData({\n      name: obj.name,\n      metadata: obj.metadata,\n      queuePubkey: new PublicKey(obj.queuePubkey),\n      pqSize: obj.pqSize,\n      maxRows: obj.maxRows,\n      jitterModifier: obj.jitterModifier,\n      ebuf: obj.ebuf,\n      dataBuffer: new PublicKey(obj.dataBuffer),\n    });\n  }\n}\n"]}
{"version":3,"file":"BufferRelayerAccountData.js","sourceRoot":"","sources":["../../../../src/generated/accounts/BufferRelayerAccountData.ts"],"names":[],"mappings":"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","sourcesContent":["import { SwitchboardProgram } from '../../SwitchboardProgram';\nimport { PublicKey, Connection } from '@solana/web3.js';\nimport { BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as borsh from '@coral-xyz/borsh'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface BufferRelayerAccountDataFields {\n  /** Name of the buffer account to store on-chain. */\n  name: Array<number>;\n  /** Public key of the OracleQueueAccountData that is currently assigned to fulfill buffer relayer update request. */\n  queuePubkey: PublicKey;\n  /** Token account to reward oracles for completing update request. */\n  escrow: PublicKey;\n  /** The account delegated as the authority for making account changes. */\n  authority: PublicKey;\n  /** Public key of the JobAccountData that defines how the buffer relayer is updated. */\n  jobPubkey: PublicKey;\n  /** Used to protect against malicious RPC nodes providing incorrect task definitions to oracles before fulfillment */\n  jobHash: Array<number>;\n  /** Minimum delay between update request. */\n  minUpdateDelaySeconds: number;\n  /** Whether buffer relayer config is locked for further changes. */\n  isLocked: boolean;\n  /** The current buffer relayer update round that is yet to be confirmed. */\n  currentRound: types.BufferRelayerRoundFields;\n  /** The latest confirmed buffer relayer update round. */\n  latestConfirmedRound: types.BufferRelayerRoundFields;\n  /** The buffer holding the latest confirmed result. */\n  result: Uint8Array;\n}\n\nexport interface BufferRelayerAccountDataJSON {\n  /** Name of the buffer account to store on-chain. */\n  name: Array<number>;\n  /** Public key of the OracleQueueAccountData that is currently assigned to fulfill buffer relayer update request. */\n  queuePubkey: string;\n  /** Token account to reward oracles for completing update request. */\n  escrow: string;\n  /** The account delegated as the authority for making account changes. */\n  authority: string;\n  /** Public key of the JobAccountData that defines how the buffer relayer is updated. */\n  jobPubkey: string;\n  /** Used to protect against malicious RPC nodes providing incorrect task definitions to oracles before fulfillment */\n  jobHash: Array<number>;\n  /** Minimum delay between update request. */\n  minUpdateDelaySeconds: number;\n  /** Whether buffer relayer config is locked for further changes. */\n  isLocked: boolean;\n  /** The current buffer relayer update round that is yet to be confirmed. */\n  currentRound: types.BufferRelayerRoundJSON;\n  /** The latest confirmed buffer relayer update round. */\n  latestConfirmedRound: types.BufferRelayerRoundJSON;\n  /** The buffer holding the latest confirmed result. */\n  result: Array<number>;\n}\n\nexport class BufferRelayerAccountData {\n  /** Name of the buffer account to store on-chain. */\n  readonly name: Array<number>;\n  /** Public key of the OracleQueueAccountData that is currently assigned to fulfill buffer relayer update request. */\n  readonly queuePubkey: PublicKey;\n  /** Token account to reward oracles for completing update request. */\n  readonly escrow: PublicKey;\n  /** The account delegated as the authority for making account changes. */\n  readonly authority: PublicKey;\n  /** Public key of the JobAccountData that defines how the buffer relayer is updated. */\n  readonly jobPubkey: PublicKey;\n  /** Used to protect against malicious RPC nodes providing incorrect task definitions to oracles before fulfillment */\n  readonly jobHash: Array<number>;\n  /** Minimum delay between update request. */\n  readonly minUpdateDelaySeconds: number;\n  /** Whether buffer relayer config is locked for further changes. */\n  readonly isLocked: boolean;\n  /** The current buffer relayer update round that is yet to be confirmed. */\n  readonly currentRound: types.BufferRelayerRound;\n  /** The latest confirmed buffer relayer update round. */\n  readonly latestConfirmedRound: types.BufferRelayerRound;\n  /** The buffer holding the latest confirmed result. */\n  readonly result: Uint8Array;\n\n  static readonly discriminator = Buffer.from([\n    50, 35, 51, 115, 169, 219, 158, 52,\n  ]);\n\n  static readonly layout = borsh.struct([\n    borsh.array(borsh.u8(), 32, 'name'),\n    borsh.publicKey('queuePubkey'),\n    borsh.publicKey('escrow'),\n    borsh.publicKey('authority'),\n    borsh.publicKey('jobPubkey'),\n    borsh.array(borsh.u8(), 32, 'jobHash'),\n    borsh.u32('minUpdateDelaySeconds'),\n    borsh.bool('isLocked'),\n    types.BufferRelayerRound.layout('currentRound'),\n    types.BufferRelayerRound.layout('latestConfirmedRound'),\n    borsh.vecU8('result'),\n  ]);\n\n  constructor(fields: BufferRelayerAccountDataFields) {\n    this.name = fields.name;\n    this.queuePubkey = fields.queuePubkey;\n    this.escrow = fields.escrow;\n    this.authority = fields.authority;\n    this.jobPubkey = fields.jobPubkey;\n    this.jobHash = fields.jobHash;\n    this.minUpdateDelaySeconds = fields.minUpdateDelaySeconds;\n    this.isLocked = fields.isLocked;\n    this.currentRound = new types.BufferRelayerRound({\n      ...fields.currentRound,\n    });\n    this.latestConfirmedRound = new types.BufferRelayerRound({\n      ...fields.latestConfirmedRound,\n    });\n    this.result = fields.result;\n  }\n\n  static async fetch(\n    program: SwitchboardProgram,\n    address: PublicKey\n  ): Promise<BufferRelayerAccountData | null> {\n    const info = await program.connection.getAccountInfo(address);\n\n    if (info === null) {\n      return null;\n    }\n    if (!info.owner.equals(program.programId)) {\n      throw new Error(\"account doesn't belong to this program\");\n    }\n\n    return this.decode(info.data);\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    addresses: PublicKey[]\n  ): Promise<Array<BufferRelayerAccountData | null>> {\n    const infos = await program.connection.getMultipleAccountsInfo(addresses);\n\n    return infos.map(info => {\n      if (info === null) {\n        return null;\n      }\n      if (!info.owner.equals(program.programId)) {\n        throw new Error(\"account doesn't belong to this program\");\n      }\n\n      return this.decode(info.data);\n    });\n  }\n\n  static decode(data: Buffer): BufferRelayerAccountData {\n    if (!data.slice(0, 8).equals(BufferRelayerAccountData.discriminator)) {\n      throw new Error('invalid account discriminator');\n    }\n\n    const dec = BufferRelayerAccountData.layout.decode(data.slice(8));\n\n    return new BufferRelayerAccountData({\n      name: dec.name,\n      queuePubkey: dec.queuePubkey,\n      escrow: dec.escrow,\n      authority: dec.authority,\n      jobPubkey: dec.jobPubkey,\n      jobHash: dec.jobHash,\n      minUpdateDelaySeconds: dec.minUpdateDelaySeconds,\n      isLocked: dec.isLocked,\n      currentRound: types.BufferRelayerRound.fromDecoded(dec.currentRound),\n      latestConfirmedRound: types.BufferRelayerRound.fromDecoded(\n        dec.latestConfirmedRound\n      ),\n      result: new Uint8Array(\n        dec.result.buffer,\n        dec.result.byteOffset,\n        dec.result.length\n      ),\n    });\n  }\n\n  toJSON(): BufferRelayerAccountDataJSON {\n    return {\n      name: this.name,\n      queuePubkey: this.queuePubkey.toString(),\n      escrow: this.escrow.toString(),\n      authority: this.authority.toString(),\n      jobPubkey: this.jobPubkey.toString(),\n      jobHash: this.jobHash,\n      minUpdateDelaySeconds: this.minUpdateDelaySeconds,\n      isLocked: this.isLocked,\n      currentRound: this.currentRound.toJSON(),\n      latestConfirmedRound: this.latestConfirmedRound.toJSON(),\n      result: Array.from(this.result.values()),\n    };\n  }\n\n  static fromJSON(obj: BufferRelayerAccountDataJSON): BufferRelayerAccountData {\n    return new BufferRelayerAccountData({\n      name: obj.name,\n      queuePubkey: new PublicKey(obj.queuePubkey),\n      escrow: new PublicKey(obj.escrow),\n      authority: new PublicKey(obj.authority),\n      jobPubkey: new PublicKey(obj.jobPubkey),\n      jobHash: obj.jobHash,\n      minUpdateDelaySeconds: obj.minUpdateDelaySeconds,\n      isLocked: obj.isLocked,\n      currentRound: types.BufferRelayerRound.fromJSON(obj.currentRound),\n      latestConfirmedRound: types.BufferRelayerRound.fromJSON(\n        obj.latestConfirmedRound\n      ),\n      result: Uint8Array.from(obj.result),\n    });\n  }\n}\n"]}
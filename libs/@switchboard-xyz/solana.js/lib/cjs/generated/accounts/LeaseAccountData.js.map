{"version":3,"file":"LeaseAccountData.js","sourceRoot":"","sources":["../../../../src/generated/accounts/LeaseAccountData.ts"],"names":[],"mappings":"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","sourcesContent":["import { SwitchboardProgram } from '../../SwitchboardProgram';\nimport { PublicKey, Connection } from '@solana/web3.js';\nimport { BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as borsh from '@coral-xyz/borsh'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface LeaseAccountDataFields {\n  /** Public key of the token account holding the lease contract funds until rewarded to oracles for successfully processing updates */\n  escrow: PublicKey;\n  /** Public key of the oracle queue that the lease contract is applicable for. */\n  queue: PublicKey;\n  /** Public key of the aggregator that the lease contract is applicable for */\n  aggregator: PublicKey;\n  /** Public key of the Solana token program ID. */\n  tokenProgram: PublicKey;\n  /** Whether the lease contract is still active. */\n  isActive: boolean;\n  /** Index of an aggregators position on a crank. */\n  crankRowCount: number;\n  /** Timestamp when the lease contract was created. */\n  createdAt: BN;\n  /** Counter keeping track of the number of updates for the given aggregator. */\n  updateCount: BN;\n  /** Public key of keypair that may withdraw funds from the lease at any time */\n  withdrawAuthority: PublicKey;\n  /** The PDA bump to derive the pubkey. */\n  bump: number;\n  ebuf: Array<number>;\n}\n\nexport interface LeaseAccountDataJSON {\n  /** Public key of the token account holding the lease contract funds until rewarded to oracles for successfully processing updates */\n  escrow: string;\n  /** Public key of the oracle queue that the lease contract is applicable for. */\n  queue: string;\n  /** Public key of the aggregator that the lease contract is applicable for */\n  aggregator: string;\n  /** Public key of the Solana token program ID. */\n  tokenProgram: string;\n  /** Whether the lease contract is still active. */\n  isActive: boolean;\n  /** Index of an aggregators position on a crank. */\n  crankRowCount: number;\n  /** Timestamp when the lease contract was created. */\n  createdAt: string;\n  /** Counter keeping track of the number of updates for the given aggregator. */\n  updateCount: string;\n  /** Public key of keypair that may withdraw funds from the lease at any time */\n  withdrawAuthority: string;\n  /** The PDA bump to derive the pubkey. */\n  bump: number;\n  ebuf: Array<number>;\n}\n\n/** This should be any ccount that links a permission to an escrow */\nexport class LeaseAccountData {\n  /** Public key of the token account holding the lease contract funds until rewarded to oracles for successfully processing updates */\n  readonly escrow: PublicKey;\n  /** Public key of the oracle queue that the lease contract is applicable for. */\n  readonly queue: PublicKey;\n  /** Public key of the aggregator that the lease contract is applicable for */\n  readonly aggregator: PublicKey;\n  /** Public key of the Solana token program ID. */\n  readonly tokenProgram: PublicKey;\n  /** Whether the lease contract is still active. */\n  readonly isActive: boolean;\n  /** Index of an aggregators position on a crank. */\n  readonly crankRowCount: number;\n  /** Timestamp when the lease contract was created. */\n  readonly createdAt: BN;\n  /** Counter keeping track of the number of updates for the given aggregator. */\n  readonly updateCount: BN;\n  /** Public key of keypair that may withdraw funds from the lease at any time */\n  readonly withdrawAuthority: PublicKey;\n  /** The PDA bump to derive the pubkey. */\n  readonly bump: number;\n  readonly ebuf: Array<number>;\n\n  static readonly discriminator = Buffer.from([\n    55, 254, 208, 251, 164, 44, 150, 50,\n  ]);\n\n  static readonly layout = borsh.struct([\n    borsh.publicKey('escrow'),\n    borsh.publicKey('queue'),\n    borsh.publicKey('aggregator'),\n    borsh.publicKey('tokenProgram'),\n    borsh.bool('isActive'),\n    borsh.u32('crankRowCount'),\n    borsh.i64('createdAt'),\n    borsh.u128('updateCount'),\n    borsh.publicKey('withdrawAuthority'),\n    borsh.u8('bump'),\n    borsh.array(borsh.u8(), 255, 'ebuf'),\n  ]);\n\n  constructor(fields: LeaseAccountDataFields) {\n    this.escrow = fields.escrow;\n    this.queue = fields.queue;\n    this.aggregator = fields.aggregator;\n    this.tokenProgram = fields.tokenProgram;\n    this.isActive = fields.isActive;\n    this.crankRowCount = fields.crankRowCount;\n    this.createdAt = fields.createdAt;\n    this.updateCount = fields.updateCount;\n    this.withdrawAuthority = fields.withdrawAuthority;\n    this.bump = fields.bump;\n    this.ebuf = fields.ebuf;\n  }\n\n  static async fetch(\n    program: SwitchboardProgram,\n    address: PublicKey\n  ): Promise<LeaseAccountData | null> {\n    const info = await program.connection.getAccountInfo(address);\n\n    if (info === null) {\n      return null;\n    }\n    if (!info.owner.equals(program.programId)) {\n      throw new Error(\"account doesn't belong to this program\");\n    }\n\n    return this.decode(info.data);\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    addresses: PublicKey[]\n  ): Promise<Array<LeaseAccountData | null>> {\n    const infos = await program.connection.getMultipleAccountsInfo(addresses);\n\n    return infos.map(info => {\n      if (info === null) {\n        return null;\n      }\n      if (!info.owner.equals(program.programId)) {\n        throw new Error(\"account doesn't belong to this program\");\n      }\n\n      return this.decode(info.data);\n    });\n  }\n\n  static decode(data: Buffer): LeaseAccountData {\n    if (!data.slice(0, 8).equals(LeaseAccountData.discriminator)) {\n      throw new Error('invalid account discriminator');\n    }\n\n    const dec = LeaseAccountData.layout.decode(data.slice(8));\n\n    return new LeaseAccountData({\n      escrow: dec.escrow,\n      queue: dec.queue,\n      aggregator: dec.aggregator,\n      tokenProgram: dec.tokenProgram,\n      isActive: dec.isActive,\n      crankRowCount: dec.crankRowCount,\n      createdAt: dec.createdAt,\n      updateCount: dec.updateCount,\n      withdrawAuthority: dec.withdrawAuthority,\n      bump: dec.bump,\n      ebuf: dec.ebuf,\n    });\n  }\n\n  toJSON(): LeaseAccountDataJSON {\n    return {\n      escrow: this.escrow.toString(),\n      queue: this.queue.toString(),\n      aggregator: this.aggregator.toString(),\n      tokenProgram: this.tokenProgram.toString(),\n      isActive: this.isActive,\n      crankRowCount: this.crankRowCount,\n      createdAt: this.createdAt.toString(),\n      updateCount: this.updateCount.toString(),\n      withdrawAuthority: this.withdrawAuthority.toString(),\n      bump: this.bump,\n      ebuf: this.ebuf,\n    };\n  }\n\n  static fromJSON(obj: LeaseAccountDataJSON): LeaseAccountData {\n    return new LeaseAccountData({\n      escrow: new PublicKey(obj.escrow),\n      queue: new PublicKey(obj.queue),\n      aggregator: new PublicKey(obj.aggregator),\n      tokenProgram: new PublicKey(obj.tokenProgram),\n      isActive: obj.isActive,\n      crankRowCount: obj.crankRowCount,\n      createdAt: new BN(obj.createdAt),\n      updateCount: new BN(obj.updateCount),\n      withdrawAuthority: new PublicKey(obj.withdrawAuthority),\n      bump: obj.bump,\n      ebuf: obj.ebuf,\n    });\n  }\n}\n"]}
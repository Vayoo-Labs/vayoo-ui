{"version":3,"file":"OracleAccountData.js","sourceRoot":"","sources":["../../../../src/generated/accounts/OracleAccountData.ts"],"names":[],"mappings":"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","sourcesContent":["import { SwitchboardProgram } from '../../SwitchboardProgram';\nimport { PublicKey, Connection } from '@solana/web3.js';\nimport { BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as borsh from '@coral-xyz/borsh'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface OracleAccountDataFields {\n  /** Name of the oracle to store on-chain. */\n  name: Array<number>;\n  /** Metadata of the oracle to store on-chain. */\n  metadata: Array<number>;\n  /** The account delegated as the authority for making account changes or withdrawing funds from a staking wallet. */\n  oracleAuthority: PublicKey;\n  /** Unix timestamp when the oracle last heartbeated */\n  lastHeartbeat: BN;\n  /** Flag dictating if an oracle is active and has heartbeated before the queue's oracle timeout parameter. */\n  numInUse: number;\n  /** Stake account and reward/slashing wallet. */\n  tokenAccount: PublicKey;\n  /** Public key of the oracle queue who has granted it permission to use its resources. */\n  queuePubkey: PublicKey;\n  /** Oracle track record. */\n  metrics: types.OracleMetricsFields;\n  /** The PDA bump to derive the pubkey. */\n  bump: number;\n  /** Reserved for future info. */\n  ebuf: Array<number>;\n}\n\nexport interface OracleAccountDataJSON {\n  /** Name of the oracle to store on-chain. */\n  name: Array<number>;\n  /** Metadata of the oracle to store on-chain. */\n  metadata: Array<number>;\n  /** The account delegated as the authority for making account changes or withdrawing funds from a staking wallet. */\n  oracleAuthority: string;\n  /** Unix timestamp when the oracle last heartbeated */\n  lastHeartbeat: string;\n  /** Flag dictating if an oracle is active and has heartbeated before the queue's oracle timeout parameter. */\n  numInUse: number;\n  /** Stake account and reward/slashing wallet. */\n  tokenAccount: string;\n  /** Public key of the oracle queue who has granted it permission to use its resources. */\n  queuePubkey: string;\n  /** Oracle track record. */\n  metrics: types.OracleMetricsJSON;\n  /** The PDA bump to derive the pubkey. */\n  bump: number;\n  /** Reserved for future info. */\n  ebuf: Array<number>;\n}\n\nexport class OracleAccountData {\n  /** Name of the oracle to store on-chain. */\n  readonly name: Array<number>;\n  /** Metadata of the oracle to store on-chain. */\n  readonly metadata: Array<number>;\n  /** The account delegated as the authority for making account changes or withdrawing funds from a staking wallet. */\n  readonly oracleAuthority: PublicKey;\n  /** Unix timestamp when the oracle last heartbeated */\n  readonly lastHeartbeat: BN;\n  /** Flag dictating if an oracle is active and has heartbeated before the queue's oracle timeout parameter. */\n  readonly numInUse: number;\n  /** Stake account and reward/slashing wallet. */\n  readonly tokenAccount: PublicKey;\n  /** Public key of the oracle queue who has granted it permission to use its resources. */\n  readonly queuePubkey: PublicKey;\n  /** Oracle track record. */\n  readonly metrics: types.OracleMetrics;\n  /** The PDA bump to derive the pubkey. */\n  readonly bump: number;\n  /** Reserved for future info. */\n  readonly ebuf: Array<number>;\n\n  static readonly discriminator = Buffer.from([\n    128, 30, 16, 241, 170, 73, 55, 54,\n  ]);\n\n  static readonly layout = borsh.struct([\n    borsh.array(borsh.u8(), 32, 'name'),\n    borsh.array(borsh.u8(), 128, 'metadata'),\n    borsh.publicKey('oracleAuthority'),\n    borsh.i64('lastHeartbeat'),\n    borsh.u32('numInUse'),\n    borsh.publicKey('tokenAccount'),\n    borsh.publicKey('queuePubkey'),\n    types.OracleMetrics.layout('metrics'),\n    borsh.u8('bump'),\n    borsh.array(borsh.u8(), 255, 'ebuf'),\n  ]);\n\n  constructor(fields: OracleAccountDataFields) {\n    this.name = fields.name;\n    this.metadata = fields.metadata;\n    this.oracleAuthority = fields.oracleAuthority;\n    this.lastHeartbeat = fields.lastHeartbeat;\n    this.numInUse = fields.numInUse;\n    this.tokenAccount = fields.tokenAccount;\n    this.queuePubkey = fields.queuePubkey;\n    this.metrics = new types.OracleMetrics({ ...fields.metrics });\n    this.bump = fields.bump;\n    this.ebuf = fields.ebuf;\n  }\n\n  static async fetch(\n    program: SwitchboardProgram,\n    address: PublicKey\n  ): Promise<OracleAccountData | null> {\n    const info = await program.connection.getAccountInfo(address);\n\n    if (info === null) {\n      return null;\n    }\n    if (!info.owner.equals(program.programId)) {\n      throw new Error(\"account doesn't belong to this program\");\n    }\n\n    return this.decode(info.data);\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    addresses: PublicKey[]\n  ): Promise<Array<OracleAccountData | null>> {\n    const infos = await program.connection.getMultipleAccountsInfo(addresses);\n\n    return infos.map(info => {\n      if (info === null) {\n        return null;\n      }\n      if (!info.owner.equals(program.programId)) {\n        throw new Error(\"account doesn't belong to this program\");\n      }\n\n      return this.decode(info.data);\n    });\n  }\n\n  static decode(data: Buffer): OracleAccountData {\n    if (!data.slice(0, 8).equals(OracleAccountData.discriminator)) {\n      throw new Error('invalid account discriminator');\n    }\n\n    const dec = OracleAccountData.layout.decode(data.slice(8));\n\n    return new OracleAccountData({\n      name: dec.name,\n      metadata: dec.metadata,\n      oracleAuthority: dec.oracleAuthority,\n      lastHeartbeat: dec.lastHeartbeat,\n      numInUse: dec.numInUse,\n      tokenAccount: dec.tokenAccount,\n      queuePubkey: dec.queuePubkey,\n      metrics: types.OracleMetrics.fromDecoded(dec.metrics),\n      bump: dec.bump,\n      ebuf: dec.ebuf,\n    });\n  }\n\n  toJSON(): OracleAccountDataJSON {\n    return {\n      name: this.name,\n      metadata: this.metadata,\n      oracleAuthority: this.oracleAuthority.toString(),\n      lastHeartbeat: this.lastHeartbeat.toString(),\n      numInUse: this.numInUse,\n      tokenAccount: this.tokenAccount.toString(),\n      queuePubkey: this.queuePubkey.toString(),\n      metrics: this.metrics.toJSON(),\n      bump: this.bump,\n      ebuf: this.ebuf,\n    };\n  }\n\n  static fromJSON(obj: OracleAccountDataJSON): OracleAccountData {\n    return new OracleAccountData({\n      name: obj.name,\n      metadata: obj.metadata,\n      oracleAuthority: new PublicKey(obj.oracleAuthority),\n      lastHeartbeat: new BN(obj.lastHeartbeat),\n      numInUse: obj.numInUse,\n      tokenAccount: new PublicKey(obj.tokenAccount),\n      queuePubkey: new PublicKey(obj.queuePubkey),\n      metrics: types.OracleMetrics.fromJSON(obj.metrics),\n      bump: obj.bump,\n      ebuf: obj.ebuf,\n    });\n  }\n}\n"]}
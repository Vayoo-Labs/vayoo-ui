{"version":3,"file":"VrfPoolAccountData.js","sourceRoot":"","sources":["../../../../src/generated/accounts/VrfPoolAccountData.ts"],"names":[],"mappings":"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","sourcesContent":["import { SwitchboardProgram } from '../../SwitchboardProgram';\nimport { PublicKey, Connection } from '@solana/web3.js';\nimport { BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as borsh from '@coral-xyz/borsh'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface VrfPoolAccountDataFields {\n  /** ACCOUNTS */\n  authority: PublicKey;\n  queue: PublicKey;\n  escrow: PublicKey;\n  minInterval: number;\n  maxRows: number;\n  size: number;\n  idx: number;\n  stateBump: number;\n  ebuf: Array<number>;\n}\n\nexport interface VrfPoolAccountDataJSON {\n  /** ACCOUNTS */\n  authority: string;\n  queue: string;\n  escrow: string;\n  minInterval: number;\n  maxRows: number;\n  size: number;\n  idx: number;\n  stateBump: number;\n  ebuf: Array<number>;\n}\n\nexport class VrfPoolAccountData {\n  /** ACCOUNTS */\n  readonly authority: PublicKey;\n  readonly queue: PublicKey;\n  readonly escrow: PublicKey;\n  readonly minInterval: number;\n  readonly maxRows: number;\n  readonly size: number;\n  readonly idx: number;\n  readonly stateBump: number;\n  readonly ebuf: Array<number>;\n\n  static readonly discriminator = Buffer.from([\n    86, 67, 58, 9, 46, 21, 101, 248,\n  ]);\n\n  static readonly layout = borsh.struct([\n    borsh.publicKey('authority'),\n    borsh.publicKey('queue'),\n    borsh.publicKey('escrow'),\n    borsh.u32('minInterval'),\n    borsh.u32('maxRows'),\n    borsh.u32('size'),\n    borsh.u32('idx'),\n    borsh.u8('stateBump'),\n    borsh.array(borsh.u8(), 135, 'ebuf'),\n  ]);\n\n  constructor(fields: VrfPoolAccountDataFields) {\n    this.authority = fields.authority;\n    this.queue = fields.queue;\n    this.escrow = fields.escrow;\n    this.minInterval = fields.minInterval;\n    this.maxRows = fields.maxRows;\n    this.size = fields.size;\n    this.idx = fields.idx;\n    this.stateBump = fields.stateBump;\n    this.ebuf = fields.ebuf;\n  }\n\n  static async fetch(\n    program: SwitchboardProgram,\n    address: PublicKey\n  ): Promise<VrfPoolAccountData | null> {\n    const info = await program.connection.getAccountInfo(address);\n\n    if (info === null) {\n      return null;\n    }\n    if (!info.owner.equals(program.programId)) {\n      throw new Error(\"account doesn't belong to this program\");\n    }\n\n    return this.decode(info.data);\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    addresses: PublicKey[]\n  ): Promise<Array<VrfPoolAccountData | null>> {\n    const infos = await program.connection.getMultipleAccountsInfo(addresses);\n\n    return infos.map(info => {\n      if (info === null) {\n        return null;\n      }\n      if (!info.owner.equals(program.programId)) {\n        throw new Error(\"account doesn't belong to this program\");\n      }\n\n      return this.decode(info.data);\n    });\n  }\n\n  static decode(data: Buffer): VrfPoolAccountData {\n    if (!data.slice(0, 8).equals(VrfPoolAccountData.discriminator)) {\n      throw new Error('invalid account discriminator');\n    }\n\n    const dec = VrfPoolAccountData.layout.decode(data.slice(8));\n\n    return new VrfPoolAccountData({\n      authority: dec.authority,\n      queue: dec.queue,\n      escrow: dec.escrow,\n      minInterval: dec.minInterval,\n      maxRows: dec.maxRows,\n      size: dec.size,\n      idx: dec.idx,\n      stateBump: dec.stateBump,\n      ebuf: dec.ebuf,\n    });\n  }\n\n  toJSON(): VrfPoolAccountDataJSON {\n    return {\n      authority: this.authority.toString(),\n      queue: this.queue.toString(),\n      escrow: this.escrow.toString(),\n      minInterval: this.minInterval,\n      maxRows: this.maxRows,\n      size: this.size,\n      idx: this.idx,\n      stateBump: this.stateBump,\n      ebuf: this.ebuf,\n    };\n  }\n\n  static fromJSON(obj: VrfPoolAccountDataJSON): VrfPoolAccountData {\n    return new VrfPoolAccountData({\n      authority: new PublicKey(obj.authority),\n      queue: new PublicKey(obj.queue),\n      escrow: new PublicKey(obj.escrow),\n      minInterval: obj.minInterval,\n      maxRows: obj.maxRows,\n      size: obj.size,\n      idx: obj.idx,\n      stateBump: obj.stateBump,\n      ebuf: obj.ebuf,\n    });\n  }\n}\n"]}
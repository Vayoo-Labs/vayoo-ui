{"version":3,"file":"AggregatorAccountData.js","sourceRoot":"","sources":["../../../../src/generated/accounts/AggregatorAccountData.ts"],"names":[],"mappings":"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","sourcesContent":["import { SwitchboardProgram } from '../../SwitchboardProgram';\nimport { PublicKey, Connection } from '@solana/web3.js';\nimport { BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as borsh from '@coral-xyz/borsh'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface AggregatorAccountDataFields {\n  /** Name of the aggregator to store on-chain. */\n  name: Array<number>;\n  /** Metadata of the aggregator to store on-chain. */\n  metadata: Array<number>;\n  /** Reserved. */\n  reserved1: Array<number>;\n  /** Pubkey of the queue the aggregator belongs to. */\n  queuePubkey: PublicKey;\n  /**\n   * CONFIGS\n   * Number of oracles assigned to an update request.\n   */\n  oracleRequestBatchSize: number;\n  /** Minimum number of oracle responses required before a round is validated. */\n  minOracleResults: number;\n  /** Minimum number of job results before an oracle accepts a result. */\n  minJobResults: number;\n  /** Minimum number of seconds required between aggregator rounds. */\n  minUpdateDelaySeconds: number;\n  /** Unix timestamp for which no feed update will occur before. */\n  startAfter: BN;\n  /** Change percentage required between a previous round and the current round. If variance percentage is not met, reject new oracle responses. */\n  varianceThreshold: types.SwitchboardDecimalFields;\n  /** Number of seconds for which, even if the variance threshold is not passed, accept new responses from oracles. */\n  forceReportPeriod: BN;\n  /** Timestamp when the feed is no longer needed. */\n  expiration: BN;\n  /** Counter for the number of consecutive failures before a feed is removed from a queue. If set to 0, failed feeds will remain on the queue. */\n  consecutiveFailureCount: BN;\n  /** Timestamp when the next update request will be available. */\n  nextAllowedUpdateTime: BN;\n  /** Flag for whether an aggregators configuration is locked for editing. */\n  isLocked: boolean;\n  /** Optional, public key of the crank the aggregator is currently using. Event based feeds do not need a crank. */\n  crankPubkey: PublicKey;\n  /** Latest confirmed update request result that has been accepted as valid. */\n  latestConfirmedRound: types.AggregatorRoundFields;\n  /** Oracle results from the current round of update request that has not been accepted as valid yet. */\n  currentRound: types.AggregatorRoundFields;\n  /** List of public keys containing the job definitions for how data is sourced off-chain by oracles. */\n  jobPubkeysData: Array<PublicKey>;\n  /** Used to protect against malicious RPC nodes providing incorrect task definitions to oracles before fulfillment. */\n  jobHashes: Array<types.HashFields>;\n  /** Number of jobs assigned to an oracle. */\n  jobPubkeysSize: number;\n  /** Used to protect against malicious RPC nodes providing incorrect task definitions to oracles before fulfillment. */\n  jobsChecksum: Array<number>;\n  /** The account delegated as the authority for making account changes. */\n  authority: PublicKey;\n  /** Optional, public key of a history buffer account storing the last N accepted results and their timestamps. */\n  historyBuffer: PublicKey;\n  /** The previous confirmed round result. */\n  previousConfirmedRoundResult: types.SwitchboardDecimalFields;\n  /** The slot when the previous confirmed round was opened. */\n  previousConfirmedRoundSlot: BN;\n  /** Whether an aggregator is permitted to join a crank. */\n  disableCrank: boolean;\n  /** Job weights used for the weighted median of the aggregator's assigned job accounts. */\n  jobWeights: Array<number>;\n  /** Unix timestamp when the feed was created. */\n  creationTimestamp: BN;\n  /**\n   * Use sliding window or round based resolution\n   * NOTE: This changes result propogation in latest_round_result\n   */\n  resolutionMode: types.AggregatorResolutionModeKind;\n  basePriorityFee: number;\n  priorityFeeBump: number;\n  priorityFeeBumpPeriod: number;\n  maxPriorityFeeMultiplier: number;\n  /** Reserved for future info. */\n  ebuf: Array<number>;\n}\n\nexport interface AggregatorAccountDataJSON {\n  /** Name of the aggregator to store on-chain. */\n  name: Array<number>;\n  /** Metadata of the aggregator to store on-chain. */\n  metadata: Array<number>;\n  /** Reserved. */\n  reserved1: Array<number>;\n  /** Pubkey of the queue the aggregator belongs to. */\n  queuePubkey: string;\n  /**\n   * CONFIGS\n   * Number of oracles assigned to an update request.\n   */\n  oracleRequestBatchSize: number;\n  /** Minimum number of oracle responses required before a round is validated. */\n  minOracleResults: number;\n  /** Minimum number of job results before an oracle accepts a result. */\n  minJobResults: number;\n  /** Minimum number of seconds required between aggregator rounds. */\n  minUpdateDelaySeconds: number;\n  /** Unix timestamp for which no feed update will occur before. */\n  startAfter: string;\n  /** Change percentage required between a previous round and the current round. If variance percentage is not met, reject new oracle responses. */\n  varianceThreshold: types.SwitchboardDecimalJSON;\n  /** Number of seconds for which, even if the variance threshold is not passed, accept new responses from oracles. */\n  forceReportPeriod: string;\n  /** Timestamp when the feed is no longer needed. */\n  expiration: string;\n  /** Counter for the number of consecutive failures before a feed is removed from a queue. If set to 0, failed feeds will remain on the queue. */\n  consecutiveFailureCount: string;\n  /** Timestamp when the next update request will be available. */\n  nextAllowedUpdateTime: string;\n  /** Flag for whether an aggregators configuration is locked for editing. */\n  isLocked: boolean;\n  /** Optional, public key of the crank the aggregator is currently using. Event based feeds do not need a crank. */\n  crankPubkey: string;\n  /** Latest confirmed update request result that has been accepted as valid. */\n  latestConfirmedRound: types.AggregatorRoundJSON;\n  /** Oracle results from the current round of update request that has not been accepted as valid yet. */\n  currentRound: types.AggregatorRoundJSON;\n  /** List of public keys containing the job definitions for how data is sourced off-chain by oracles. */\n  jobPubkeysData: Array<string>;\n  /** Used to protect against malicious RPC nodes providing incorrect task definitions to oracles before fulfillment. */\n  jobHashes: Array<types.HashJSON>;\n  /** Number of jobs assigned to an oracle. */\n  jobPubkeysSize: number;\n  /** Used to protect against malicious RPC nodes providing incorrect task definitions to oracles before fulfillment. */\n  jobsChecksum: Array<number>;\n  /** The account delegated as the authority for making account changes. */\n  authority: string;\n  /** Optional, public key of a history buffer account storing the last N accepted results and their timestamps. */\n  historyBuffer: string;\n  /** The previous confirmed round result. */\n  previousConfirmedRoundResult: types.SwitchboardDecimalJSON;\n  /** The slot when the previous confirmed round was opened. */\n  previousConfirmedRoundSlot: string;\n  /** Whether an aggregator is permitted to join a crank. */\n  disableCrank: boolean;\n  /** Job weights used for the weighted median of the aggregator's assigned job accounts. */\n  jobWeights: Array<number>;\n  /** Unix timestamp when the feed was created. */\n  creationTimestamp: string;\n  /**\n   * Use sliding window or round based resolution\n   * NOTE: This changes result propogation in latest_round_result\n   */\n  resolutionMode: types.AggregatorResolutionModeJSON;\n  basePriorityFee: number;\n  priorityFeeBump: number;\n  priorityFeeBumpPeriod: number;\n  maxPriorityFeeMultiplier: number;\n  /** Reserved for future info. */\n  ebuf: Array<number>;\n}\n\nexport class AggregatorAccountData {\n  /** Name of the aggregator to store on-chain. */\n  readonly name: Array<number>;\n  /** Metadata of the aggregator to store on-chain. */\n  readonly metadata: Array<number>;\n  /** Reserved. */\n  readonly reserved1: Array<number>;\n  /** Pubkey of the queue the aggregator belongs to. */\n  readonly queuePubkey: PublicKey;\n  /**\n   * CONFIGS\n   * Number of oracles assigned to an update request.\n   */\n  readonly oracleRequestBatchSize: number;\n  /** Minimum number of oracle responses required before a round is validated. */\n  readonly minOracleResults: number;\n  /** Minimum number of job results before an oracle accepts a result. */\n  readonly minJobResults: number;\n  /** Minimum number of seconds required between aggregator rounds. */\n  readonly minUpdateDelaySeconds: number;\n  /** Unix timestamp for which no feed update will occur before. */\n  readonly startAfter: BN;\n  /** Change percentage required between a previous round and the current round. If variance percentage is not met, reject new oracle responses. */\n  readonly varianceThreshold: types.SwitchboardDecimal;\n  /** Number of seconds for which, even if the variance threshold is not passed, accept new responses from oracles. */\n  readonly forceReportPeriod: BN;\n  /** Timestamp when the feed is no longer needed. */\n  readonly expiration: BN;\n  /** Counter for the number of consecutive failures before a feed is removed from a queue. If set to 0, failed feeds will remain on the queue. */\n  readonly consecutiveFailureCount: BN;\n  /** Timestamp when the next update request will be available. */\n  readonly nextAllowedUpdateTime: BN;\n  /** Flag for whether an aggregators configuration is locked for editing. */\n  readonly isLocked: boolean;\n  /** Optional, public key of the crank the aggregator is currently using. Event based feeds do not need a crank. */\n  readonly crankPubkey: PublicKey;\n  /** Latest confirmed update request result that has been accepted as valid. */\n  readonly latestConfirmedRound: types.AggregatorRound;\n  /** Oracle results from the current round of update request that has not been accepted as valid yet. */\n  readonly currentRound: types.AggregatorRound;\n  /** List of public keys containing the job definitions for how data is sourced off-chain by oracles. */\n  readonly jobPubkeysData: Array<PublicKey>;\n  /** Used to protect against malicious RPC nodes providing incorrect task definitions to oracles before fulfillment. */\n  readonly jobHashes: Array<types.Hash>;\n  /** Number of jobs assigned to an oracle. */\n  readonly jobPubkeysSize: number;\n  /** Used to protect against malicious RPC nodes providing incorrect task definitions to oracles before fulfillment. */\n  readonly jobsChecksum: Array<number>;\n  /** The account delegated as the authority for making account changes. */\n  readonly authority: PublicKey;\n  /** Optional, public key of a history buffer account storing the last N accepted results and their timestamps. */\n  readonly historyBuffer: PublicKey;\n  /** The previous confirmed round result. */\n  readonly previousConfirmedRoundResult: types.SwitchboardDecimal;\n  /** The slot when the previous confirmed round was opened. */\n  readonly previousConfirmedRoundSlot: BN;\n  /** Whether an aggregator is permitted to join a crank. */\n  readonly disableCrank: boolean;\n  /** Job weights used for the weighted median of the aggregator's assigned job accounts. */\n  readonly jobWeights: Array<number>;\n  /** Unix timestamp when the feed was created. */\n  readonly creationTimestamp: BN;\n  /**\n   * Use sliding window or round based resolution\n   * NOTE: This changes result propogation in latest_round_result\n   */\n  readonly resolutionMode: types.AggregatorResolutionModeKind;\n  readonly basePriorityFee: number;\n  readonly priorityFeeBump: number;\n  readonly priorityFeeBumpPeriod: number;\n  readonly maxPriorityFeeMultiplier: number;\n  /** Reserved for future info. */\n  readonly ebuf: Array<number>;\n\n  static readonly discriminator = Buffer.from([\n    217, 230, 65, 101, 201, 162, 27, 125,\n  ]);\n\n  static readonly layout = borsh.struct([\n    borsh.array(borsh.u8(), 32, 'name'),\n    borsh.array(borsh.u8(), 128, 'metadata'),\n    borsh.array(borsh.u8(), 32, 'reserved1'),\n    borsh.publicKey('queuePubkey'),\n    borsh.u32('oracleRequestBatchSize'),\n    borsh.u32('minOracleResults'),\n    borsh.u32('minJobResults'),\n    borsh.u32('minUpdateDelaySeconds'),\n    borsh.i64('startAfter'),\n    types.SwitchboardDecimal.layout('varianceThreshold'),\n    borsh.i64('forceReportPeriod'),\n    borsh.i64('expiration'),\n    borsh.u64('consecutiveFailureCount'),\n    borsh.i64('nextAllowedUpdateTime'),\n    borsh.bool('isLocked'),\n    borsh.publicKey('crankPubkey'),\n    types.AggregatorRound.layout('latestConfirmedRound'),\n    types.AggregatorRound.layout('currentRound'),\n    borsh.array(borsh.publicKey(), 16, 'jobPubkeysData'),\n    borsh.array(types.Hash.layout(), 16, 'jobHashes'),\n    borsh.u32('jobPubkeysSize'),\n    borsh.array(borsh.u8(), 32, 'jobsChecksum'),\n    borsh.publicKey('authority'),\n    borsh.publicKey('historyBuffer'),\n    types.SwitchboardDecimal.layout('previousConfirmedRoundResult'),\n    borsh.u64('previousConfirmedRoundSlot'),\n    borsh.bool('disableCrank'),\n    borsh.array(borsh.u8(), 16, 'jobWeights'),\n    borsh.i64('creationTimestamp'),\n    types.AggregatorResolutionMode.layout('resolutionMode'),\n    borsh.u32('basePriorityFee'),\n    borsh.u32('priorityFeeBump'),\n    borsh.u32('priorityFeeBumpPeriod'),\n    borsh.u32('maxPriorityFeeMultiplier'),\n    borsh.array(borsh.u8(), 122, 'ebuf'),\n  ]);\n\n  constructor(fields: AggregatorAccountDataFields) {\n    this.name = fields.name;\n    this.metadata = fields.metadata;\n    this.reserved1 = fields.reserved1;\n    this.queuePubkey = fields.queuePubkey;\n    this.oracleRequestBatchSize = fields.oracleRequestBatchSize;\n    this.minOracleResults = fields.minOracleResults;\n    this.minJobResults = fields.minJobResults;\n    this.minUpdateDelaySeconds = fields.minUpdateDelaySeconds;\n    this.startAfter = fields.startAfter;\n    this.varianceThreshold = new types.SwitchboardDecimal({\n      ...fields.varianceThreshold,\n    });\n    this.forceReportPeriod = fields.forceReportPeriod;\n    this.expiration = fields.expiration;\n    this.consecutiveFailureCount = fields.consecutiveFailureCount;\n    this.nextAllowedUpdateTime = fields.nextAllowedUpdateTime;\n    this.isLocked = fields.isLocked;\n    this.crankPubkey = fields.crankPubkey;\n    this.latestConfirmedRound = new types.AggregatorRound({\n      ...fields.latestConfirmedRound,\n    });\n    this.currentRound = new types.AggregatorRound({ ...fields.currentRound });\n    this.jobPubkeysData = fields.jobPubkeysData;\n    this.jobHashes = fields.jobHashes.map(item => new types.Hash({ ...item }));\n    this.jobPubkeysSize = fields.jobPubkeysSize;\n    this.jobsChecksum = fields.jobsChecksum;\n    this.authority = fields.authority;\n    this.historyBuffer = fields.historyBuffer;\n    this.previousConfirmedRoundResult = new types.SwitchboardDecimal({\n      ...fields.previousConfirmedRoundResult,\n    });\n    this.previousConfirmedRoundSlot = fields.previousConfirmedRoundSlot;\n    this.disableCrank = fields.disableCrank;\n    this.jobWeights = fields.jobWeights;\n    this.creationTimestamp = fields.creationTimestamp;\n    this.resolutionMode = fields.resolutionMode;\n    this.basePriorityFee = fields.basePriorityFee;\n    this.priorityFeeBump = fields.priorityFeeBump;\n    this.priorityFeeBumpPeriod = fields.priorityFeeBumpPeriod;\n    this.maxPriorityFeeMultiplier = fields.maxPriorityFeeMultiplier;\n    this.ebuf = fields.ebuf;\n  }\n\n  static async fetch(\n    program: SwitchboardProgram,\n    address: PublicKey\n  ): Promise<AggregatorAccountData | null> {\n    const info = await program.connection.getAccountInfo(address);\n\n    if (info === null) {\n      return null;\n    }\n    if (!info.owner.equals(program.programId)) {\n      throw new Error(\"account doesn't belong to this program\");\n    }\n\n    return this.decode(info.data);\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    addresses: PublicKey[]\n  ): Promise<Array<AggregatorAccountData | null>> {\n    const infos = await program.connection.getMultipleAccountsInfo(addresses);\n\n    return infos.map(info => {\n      if (info === null) {\n        return null;\n      }\n      if (!info.owner.equals(program.programId)) {\n        throw new Error(\"account doesn't belong to this program\");\n      }\n\n      return this.decode(info.data);\n    });\n  }\n\n  static decode(data: Buffer): AggregatorAccountData {\n    if (!data.slice(0, 8).equals(AggregatorAccountData.discriminator)) {\n      throw new Error('invalid account discriminator');\n    }\n\n    const dec = AggregatorAccountData.layout.decode(data.slice(8));\n\n    return new AggregatorAccountData({\n      name: dec.name,\n      metadata: dec.metadata,\n      reserved1: dec.reserved1,\n      queuePubkey: dec.queuePubkey,\n      oracleRequestBatchSize: dec.oracleRequestBatchSize,\n      minOracleResults: dec.minOracleResults,\n      minJobResults: dec.minJobResults,\n      minUpdateDelaySeconds: dec.minUpdateDelaySeconds,\n      startAfter: dec.startAfter,\n      varianceThreshold: types.SwitchboardDecimal.fromDecoded(\n        dec.varianceThreshold\n      ),\n      forceReportPeriod: dec.forceReportPeriod,\n      expiration: dec.expiration,\n      consecutiveFailureCount: dec.consecutiveFailureCount,\n      nextAllowedUpdateTime: dec.nextAllowedUpdateTime,\n      isLocked: dec.isLocked,\n      crankPubkey: dec.crankPubkey,\n      latestConfirmedRound: types.AggregatorRound.fromDecoded(\n        dec.latestConfirmedRound\n      ),\n      currentRound: types.AggregatorRound.fromDecoded(dec.currentRound),\n      jobPubkeysData: dec.jobPubkeysData,\n      jobHashes: dec.jobHashes.map(\n        (\n          item: any /* eslint-disable-line @typescript-eslint/no-explicit-any */\n        ) => types.Hash.fromDecoded(item)\n      ),\n      jobPubkeysSize: dec.jobPubkeysSize,\n      jobsChecksum: dec.jobsChecksum,\n      authority: dec.authority,\n      historyBuffer: dec.historyBuffer,\n      previousConfirmedRoundResult: types.SwitchboardDecimal.fromDecoded(\n        dec.previousConfirmedRoundResult\n      ),\n      previousConfirmedRoundSlot: dec.previousConfirmedRoundSlot,\n      disableCrank: dec.disableCrank,\n      jobWeights: dec.jobWeights,\n      creationTimestamp: dec.creationTimestamp,\n      resolutionMode: types.AggregatorResolutionMode.fromDecoded(\n        dec.resolutionMode\n      ),\n      basePriorityFee: dec.basePriorityFee,\n      priorityFeeBump: dec.priorityFeeBump,\n      priorityFeeBumpPeriod: dec.priorityFeeBumpPeriod,\n      maxPriorityFeeMultiplier: dec.maxPriorityFeeMultiplier,\n      ebuf: dec.ebuf,\n    });\n  }\n\n  toJSON(): AggregatorAccountDataJSON {\n    return {\n      name: this.name,\n      metadata: this.metadata,\n      reserved1: this.reserved1,\n      queuePubkey: this.queuePubkey.toString(),\n      oracleRequestBatchSize: this.oracleRequestBatchSize,\n      minOracleResults: this.minOracleResults,\n      minJobResults: this.minJobResults,\n      minUpdateDelaySeconds: this.minUpdateDelaySeconds,\n      startAfter: this.startAfter.toString(),\n      varianceThreshold: this.varianceThreshold.toJSON(),\n      forceReportPeriod: this.forceReportPeriod.toString(),\n      expiration: this.expiration.toString(),\n      consecutiveFailureCount: this.consecutiveFailureCount.toString(),\n      nextAllowedUpdateTime: this.nextAllowedUpdateTime.toString(),\n      isLocked: this.isLocked,\n      crankPubkey: this.crankPubkey.toString(),\n      latestConfirmedRound: this.latestConfirmedRound.toJSON(),\n      currentRound: this.currentRound.toJSON(),\n      jobPubkeysData: this.jobPubkeysData.map(item => item.toString()),\n      jobHashes: this.jobHashes.map(item => item.toJSON()),\n      jobPubkeysSize: this.jobPubkeysSize,\n      jobsChecksum: this.jobsChecksum,\n      authority: this.authority.toString(),\n      historyBuffer: this.historyBuffer.toString(),\n      previousConfirmedRoundResult: this.previousConfirmedRoundResult.toJSON(),\n      previousConfirmedRoundSlot: this.previousConfirmedRoundSlot.toString(),\n      disableCrank: this.disableCrank,\n      jobWeights: this.jobWeights,\n      creationTimestamp: this.creationTimestamp.toString(),\n      resolutionMode: this.resolutionMode.toJSON(),\n      basePriorityFee: this.basePriorityFee,\n      priorityFeeBump: this.priorityFeeBump,\n      priorityFeeBumpPeriod: this.priorityFeeBumpPeriod,\n      maxPriorityFeeMultiplier: this.maxPriorityFeeMultiplier,\n      ebuf: this.ebuf,\n    };\n  }\n\n  static fromJSON(obj: AggregatorAccountDataJSON): AggregatorAccountData {\n    return new AggregatorAccountData({\n      name: obj.name,\n      metadata: obj.metadata,\n      reserved1: obj.reserved1,\n      queuePubkey: new PublicKey(obj.queuePubkey),\n      oracleRequestBatchSize: obj.oracleRequestBatchSize,\n      minOracleResults: obj.minOracleResults,\n      minJobResults: obj.minJobResults,\n      minUpdateDelaySeconds: obj.minUpdateDelaySeconds,\n      startAfter: new BN(obj.startAfter),\n      varianceThreshold: types.SwitchboardDecimal.fromJSON(\n        obj.varianceThreshold\n      ),\n      forceReportPeriod: new BN(obj.forceReportPeriod),\n      expiration: new BN(obj.expiration),\n      consecutiveFailureCount: new BN(obj.consecutiveFailureCount),\n      nextAllowedUpdateTime: new BN(obj.nextAllowedUpdateTime),\n      isLocked: obj.isLocked,\n      crankPubkey: new PublicKey(obj.crankPubkey),\n      latestConfirmedRound: types.AggregatorRound.fromJSON(\n        obj.latestConfirmedRound\n      ),\n      currentRound: types.AggregatorRound.fromJSON(obj.currentRound),\n      jobPubkeysData: obj.jobPubkeysData.map(item => new PublicKey(item)),\n      jobHashes: obj.jobHashes.map(item => types.Hash.fromJSON(item)),\n      jobPubkeysSize: obj.jobPubkeysSize,\n      jobsChecksum: obj.jobsChecksum,\n      authority: new PublicKey(obj.authority),\n      historyBuffer: new PublicKey(obj.historyBuffer),\n      previousConfirmedRoundResult: types.SwitchboardDecimal.fromJSON(\n        obj.previousConfirmedRoundResult\n      ),\n      previousConfirmedRoundSlot: new BN(obj.previousConfirmedRoundSlot),\n      disableCrank: obj.disableCrank,\n      jobWeights: obj.jobWeights,\n      creationTimestamp: new BN(obj.creationTimestamp),\n      resolutionMode: types.AggregatorResolutionMode.fromJSON(\n        obj.resolutionMode\n      ),\n      basePriorityFee: obj.basePriorityFee,\n      priorityFeeBump: obj.priorityFeeBump,\n      priorityFeeBumpPeriod: obj.priorityFeeBumpPeriod,\n      maxPriorityFeeMultiplier: obj.maxPriorityFeeMultiplier,\n      ebuf: obj.ebuf,\n    });\n  }\n}\n"]}
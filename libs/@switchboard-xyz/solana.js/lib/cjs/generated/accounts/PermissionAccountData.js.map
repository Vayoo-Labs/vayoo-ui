{"version":3,"file":"PermissionAccountData.js","sourceRoot":"","sources":["../../../../src/generated/accounts/PermissionAccountData.ts"],"names":[],"mappings":"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","sourcesContent":["import { SwitchboardProgram } from '../../SwitchboardProgram';\nimport { PublicKey, Connection } from '@solana/web3.js';\nimport { BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as borsh from '@coral-xyz/borsh'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface PermissionAccountDataFields {\n  /** The authority that is allowed to set permissions for this account. */\n  authority: PublicKey;\n  /** The SwitchboardPermission enumeration assigned by the granter to the grantee. */\n  permissions: number;\n  /** Public key of account that is granting permissions to use its resources. */\n  granter: PublicKey;\n  /** Public key of account that is being assigned permissions to use a granters resources. */\n  grantee: PublicKey;\n  /**\n   * unused currently. may want permission PDA per permission for\n   * unique expiration periods, BUT currently only one permission\n   * per account makes sense for the infra. Dont over engineer.\n   */\n  expiration: BN;\n  /** The PDA bump to derive the pubkey. */\n  bump: number;\n  /** Reserved for future info. */\n  ebuf: Array<number>;\n}\n\nexport interface PermissionAccountDataJSON {\n  /** The authority that is allowed to set permissions for this account. */\n  authority: string;\n  /** The SwitchboardPermission enumeration assigned by the granter to the grantee. */\n  permissions: number;\n  /** Public key of account that is granting permissions to use its resources. */\n  granter: string;\n  /** Public key of account that is being assigned permissions to use a granters resources. */\n  grantee: string;\n  /**\n   * unused currently. may want permission PDA per permission for\n   * unique expiration periods, BUT currently only one permission\n   * per account makes sense for the infra. Dont over engineer.\n   */\n  expiration: string;\n  /** The PDA bump to derive the pubkey. */\n  bump: number;\n  /** Reserved for future info. */\n  ebuf: Array<number>;\n}\n\nexport class PermissionAccountData {\n  /** The authority that is allowed to set permissions for this account. */\n  readonly authority: PublicKey;\n  /** The SwitchboardPermission enumeration assigned by the granter to the grantee. */\n  readonly permissions: number;\n  /** Public key of account that is granting permissions to use its resources. */\n  readonly granter: PublicKey;\n  /** Public key of account that is being assigned permissions to use a granters resources. */\n  readonly grantee: PublicKey;\n  /**\n   * unused currently. may want permission PDA per permission for\n   * unique expiration periods, BUT currently only one permission\n   * per account makes sense for the infra. Dont over engineer.\n   */\n  readonly expiration: BN;\n  /** The PDA bump to derive the pubkey. */\n  readonly bump: number;\n  /** Reserved for future info. */\n  readonly ebuf: Array<number>;\n\n  static readonly discriminator = Buffer.from([\n    77, 37, 177, 164, 38, 39, 34, 109,\n  ]);\n\n  static readonly layout = borsh.struct([\n    borsh.publicKey('authority'),\n    borsh.u32('permissions'),\n    borsh.publicKey('granter'),\n    borsh.publicKey('grantee'),\n    borsh.i64('expiration'),\n    borsh.u8('bump'),\n    borsh.array(borsh.u8(), 255, 'ebuf'),\n  ]);\n\n  constructor(fields: PermissionAccountDataFields) {\n    this.authority = fields.authority;\n    this.permissions = fields.permissions;\n    this.granter = fields.granter;\n    this.grantee = fields.grantee;\n    this.expiration = fields.expiration;\n    this.bump = fields.bump;\n    this.ebuf = fields.ebuf;\n  }\n\n  static async fetch(\n    program: SwitchboardProgram,\n    address: PublicKey\n  ): Promise<PermissionAccountData | null> {\n    const info = await program.connection.getAccountInfo(address);\n\n    if (info === null) {\n      return null;\n    }\n    if (!info.owner.equals(program.programId)) {\n      throw new Error(\"account doesn't belong to this program\");\n    }\n\n    return this.decode(info.data);\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    addresses: PublicKey[]\n  ): Promise<Array<PermissionAccountData | null>> {\n    const infos = await program.connection.getMultipleAccountsInfo(addresses);\n\n    return infos.map(info => {\n      if (info === null) {\n        return null;\n      }\n      if (!info.owner.equals(program.programId)) {\n        throw new Error(\"account doesn't belong to this program\");\n      }\n\n      return this.decode(info.data);\n    });\n  }\n\n  static decode(data: Buffer): PermissionAccountData {\n    if (!data.slice(0, 8).equals(PermissionAccountData.discriminator)) {\n      throw new Error('invalid account discriminator');\n    }\n\n    const dec = PermissionAccountData.layout.decode(data.slice(8));\n\n    return new PermissionAccountData({\n      authority: dec.authority,\n      permissions: dec.permissions,\n      granter: dec.granter,\n      grantee: dec.grantee,\n      expiration: dec.expiration,\n      bump: dec.bump,\n      ebuf: dec.ebuf,\n    });\n  }\n\n  toJSON(): PermissionAccountDataJSON {\n    return {\n      authority: this.authority.toString(),\n      permissions: this.permissions,\n      granter: this.granter.toString(),\n      grantee: this.grantee.toString(),\n      expiration: this.expiration.toString(),\n      bump: this.bump,\n      ebuf: this.ebuf,\n    };\n  }\n\n  static fromJSON(obj: PermissionAccountDataJSON): PermissionAccountData {\n    return new PermissionAccountData({\n      authority: new PublicKey(obj.authority),\n      permissions: obj.permissions,\n      granter: new PublicKey(obj.granter),\n      grantee: new PublicKey(obj.grantee),\n      expiration: new BN(obj.expiration),\n      bump: obj.bump,\n      ebuf: obj.ebuf,\n    });\n  }\n}\n"]}
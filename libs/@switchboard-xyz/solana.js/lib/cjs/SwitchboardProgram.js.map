{"version":3,"file":"SwitchboardProgram.js","sourceRoot":"","sources":["../../src/SwitchboardProgram.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BUFFER_DISCRIMINATOR,\n  CrankAccount,\n  DISCRIMINATOR_MAP,\n  JobAccount,\n  ProgramStateAccount,\n  QueueAccount,\n  SwitchboardAccountData,\n  SwitchboardAccountType,\n} from './accounts';\nimport {\n  DEVNET_GENESIS_HASH,\n  MAINNET_GENESIS_HASH,\n  SWITCHBOARD_LABS_DEVNET_PERMISSIONED_CRANK,\n  SWITCHBOARD_LABS_DEVNET_PERMISSIONED_QUEUE,\n  SWITCHBOARD_LABS_DEVNET_PERMISSIONLESS_CRANK,\n  SWITCHBOARD_LABS_DEVNET_PERMISSIONLESS_QUEUE,\n  SWITCHBOARD_LABS_MAINNET_PERMISSIONED_CRANK,\n  SWITCHBOARD_LABS_MAINNET_PERMISSIONED_QUEUE,\n  SWITCHBOARD_LABS_MAINNET_PERMISSIONLESS_CRANK,\n  SWITCHBOARD_LABS_MAINNET_PERMISSIONLESS_QUEUE,\n} from './const';\nimport * as errors from './errors';\nimport {\n  AggregatorAccountData,\n  BufferRelayerAccountData,\n  CrankAccountData,\n  JobAccountData,\n  LeaseAccountData,\n  OracleAccountData,\n  OracleQueueAccountData,\n  PermissionAccountData,\n  SbState,\n  SlidingResultAccountData,\n  VrfAccountData,\n} from './generated';\nimport { NativeMint } from './mint';\nimport { SwitchboardEvents } from './SwitchboardEvents';\nimport { TransactionObject, TransactionOptions } from './TransactionObject';\nimport { LoadedJobDefinition } from './types';\n\nimport * as anchor from '@coral-xyz/anchor';\nimport { ACCOUNT_DISCRIMINATOR_SIZE } from '@coral-xyz/anchor';\nimport {\n  AccountInfo,\n  Cluster,\n  ConfirmOptions,\n  Connection,\n  Keypair,\n  PublicKey,\n  SendOptions,\n  Transaction,\n  TransactionSignature,\n  VersionedTransaction,\n} from '@solana/web3.js';\nimport { OracleJob } from '@switchboard-xyz/common';\n\nexport type SendTransactionOptions = (ConfirmOptions | SendOptions) & {\n  skipConfrimation?: boolean;\n};\nexport const DEFAULT_SEND_TRANSACTION_OPTIONS: SendTransactionOptions = {\n  skipPreflight: false,\n  maxRetries: 10,\n  skipConfrimation: false,\n};\n\n/**\n * Switchboard Devnet Program ID\n */\nexport const SBV2_DEVNET_PID = new PublicKey(\n  'SW1TCH7qEPTdLsDHRgPuMQjbQxKdH2aBStViMFnt64f'\n);\n\n/**\n * Switchboard Mainnet Program ID\n */\nexport const SBV2_MAINNET_PID = new PublicKey(\n  'SW1TCH7qEPTdLsDHRgPuMQjbQxKdH2aBStViMFnt64f'\n);\n\n/**\n *  A generated keypair that is assigned as the _payerKeypair_ when in read-only mode.\n */\nexport const READ_ONLY_KEYPAIR = Keypair.generate();\n/**\n * Returns the Switchboard Program ID for the specified Cluster.\n */\nexport const getSwitchboardProgramId = (\n  cluster: Cluster | 'localnet'\n): PublicKey => {\n  switch (cluster) {\n    case 'localnet':\n    case 'devnet':\n    case 'mainnet-beta':\n      return SBV2_MAINNET_PID;\n    case 'testnet':\n    default:\n      throw new Error(`Switchboard PID not found for cluster (${cluster})`);\n  }\n};\n\n/**\n * Wrapper class for the Switchboard anchor Program.\n *\n * This class provides an interface to interact with the Switchboard program on the Solana network.\n * It allows you to load the program, create and initialize connection objects, and interact with\n * Switchboard accounts.\n *\n * Basic usage example:\n *\n * ```ts\n * import { Connection } from \"@solana/web3.js\";\n * import { SwitchboardProgram, TransactionObject } from '@switchboard-xyz/solana.js';\n *\n * const program = await SwitchboardProgram.load(\n *    \"mainnet-beta\",\n *    new Connection(\"https://api.mainnet-beta.solana.com\"),\n *    payerKeypair\n * );\n *\n * const txn = new TransactionObject(program.walletPubkey, [], []);\n * const txnSignature = await program.signAndSend(txn);\n * ```\n */\nexport class SwitchboardProgram {\n  // The read-only keypair for the Switchboard program.\n  private static readonly _readOnlyKeypair = READ_ONLY_KEYPAIR;\n\n  // The anchor program instance.\n  private readonly _program: anchor.Program;\n\n  /** The Solana cluster to load the Switchboard program for. */\n  readonly cluster: Cluster | 'localnet';\n\n  // The pubkey and bump of the Switchboard program state account.\n  readonly programState: {\n    publicKey: PublicKey;\n    bump: number;\n  };\n\n  // The native mint for the Switchboard program.\n  readonly mint: NativeMint;\n\n  /**\n   * Constructor for the SwitchboardProgram class.\n   *\n   * @param program - The anchor program instance.\n   * @param cluster - The Solana cluster to load the Switchboard program for.\n   * @param mint - The native mint for the Switchboard program.\n   */\n  constructor(\n    program: anchor.Program,\n    cluster: Cluster | 'localnet',\n    mint: NativeMint\n  ) {\n    this._program = program;\n    this.cluster = cluster;\n\n    // Derive the state account from the seed.\n    const stateAccount = ProgramStateAccount.fromSeed(this);\n    this.programState = {\n      publicKey: stateAccount[0].publicKey,\n      bump: stateAccount[1],\n    };\n    this.mint = mint;\n  }\n\n  /**\n   * Load the anchor program for the Switchboard.\n   *\n   * This method fetches the IDL for the Switchboard program, and initializes an anchor program\n   * instance using the fetched IDL, provided program ID, and provider.\n   *\n   * @param cluster - The Solana cluster to load the Switchboard program for.\n   * @param connection - The Solana connection object used to connect to an RPC node.\n   * @param payerKeypair - Optional payer keypair used to pay for on-chain transactions.\n   * @param programId - Optional program ID to override the cluster's default programId.\n   *\n   * @returns The initialized anchor program instance for the Switchboard.\n   */\n  static async loadAnchorProgram(\n    cluster: Cluster | 'localnet',\n    connection: Connection,\n    payerKeypair: Keypair = READ_ONLY_KEYPAIR,\n    programId?: PublicKey\n  ): Promise<anchor.Program> {\n    const pid = programId ?? getSwitchboardProgramId(cluster);\n    const provider = new anchor.AnchorProvider(\n      connection,\n      // If no keypair is provided, default to dummy keypair\n      new AnchorWallet(payerKeypair ?? SwitchboardProgram._readOnlyKeypair),\n      { commitment: 'confirmed' }\n    );\n    const anchorIdl = await anchor.Program.fetchIdl(pid, provider);\n    if (!anchorIdl) {\n      throw new Error(`Failed to find IDL for ${pid.toBase58()}`);\n    }\n    const program = new anchor.Program(anchorIdl, pid, provider);\n\n    return program;\n  }\n\n  /**\n   * Create and initialize a {@linkcode SwitchboardProgram} connection object.\n   *\n   * @param cluster - the solana cluster to load the Switchboard program for.\n   *\n   * @param connection - the Solana connection object used to connect to an RPC node.\n   *\n   * @param payerKeypair - optional, payer keypair used to pay for on-chain transactions.\n   *\n   * @param programId - optional, override the cluster's default programId.\n   *\n   * @return the {@linkcode SwitchboardProgram} used to create and interact with Switchboard accounts.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import { Connection } from \"@solana/web3.js\";\n   * import { SwitchboardProgram, TransactionObject } from '@switchboard-xyz/solana.js';\n   *\n   * const program = await SwitchboardProgram.load(\n   *    \"mainnet-beta\",\n   *    new Connection(\"https://api.mainnet-beta.solana.com\"),\n   *    payerKeypair\n   * );\n   *\n   * const txn = new TransactionObject(program.walletPubkey, [], []);\n   * const txnSignature = await program.signAndSend(txn);\n   * ```\n   */\n  static load = async (\n    cluster: Cluster | 'localnet',\n    connection: Connection,\n    payerKeypair: Keypair = READ_ONLY_KEYPAIR,\n    programId: PublicKey = getSwitchboardProgramId(cluster)\n  ): Promise<SwitchboardProgram> => {\n    const program = await SwitchboardProgram.loadAnchorProgram(\n      cluster,\n      connection,\n      payerKeypair,\n      programId\n    );\n    const mint = await NativeMint.load(\n      program.provider as anchor.AnchorProvider\n    );\n    return new SwitchboardProgram(program, cluster, mint);\n  };\n\n  /**\n   * Create and initialize a {@linkcode SwitchboardProgram} connection object.\n   *\n   * @param provider - The anchor provider containing the RPC and wallet connection.\n   *\n   * @return The {@linkcode SwitchboardProgram} used to create and interact with Switchboard accounts.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import * as anchor from \"@coral-xyz/anchor\";\n   * import { Connection } from \"@solana/web3.js\";\n   * import { AnchorWallet, SwitchboardProgram, TransactionObject } from '@switchboard-xyz/solana.js';\n   *\n   * const connection = new Connection(\"https://api.mainnet-beta.solana.com\");\n   * const provider = new anchor.AnchorProvider(\n      connection,\n      new AnchorWallet(payerKeypair ?? SwitchboardProgram._readOnlyKeypair),\n      { commitment: 'confirmed' }\n    );\n   * const program = await SwitchboardProgram.fromProvider(provider);\n   *\n   * const txn = new TransactionObject(program.walletPubkey, [], []);\n   * const txnSignature = await program.signAndSend(txn);\n   * ```\n   */\n  static fromProvider = async (\n    provider: anchor.AnchorProvider,\n    programId?: PublicKey\n  ): Promise<SwitchboardProgram> => {\n    const payer = (provider.wallet as AnchorWallet).payer;\n    const program = await SwitchboardProgram.fromConnection(\n      provider.connection,\n      payer,\n      programId\n    );\n    return program;\n  };\n\n  /**\n   * Create and initialize a {@linkcode SwitchboardProgram} connection object.\n   *\n   * @param connection - The Solana connection object used to connect to an RPC node.\n   * @param payer - Optional, payer keypair used to pay for on-chain transactions (defaults to READ_ONLY_KEYPAIR).\n   * @param programId - Optional, override the cluster's default programId.\n   *\n   * @return The {@linkcode SwitchboardProgram} instance used to create and interact with Switchboard accounts.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import * as anchor from \"@coral-xyz/anchor\";\n   * import { Connection } from \"@solana/web3.js\";\n   * import { AnchorWallet, SwitchboardProgram, TransactionObject } from '@switchboard-xyz/solana.js';\n   *\n   * const connection = new Connection(\"https://api.mainnet-beta.solana.com\");\n   * const program = await SwitchboardProgram.fromConnection(connection);\n   * ```\n   */\n  static fromConnection = async (\n    connection: Connection,\n    payer = READ_ONLY_KEYPAIR,\n    programId?: PublicKey\n  ): Promise<SwitchboardProgram> => {\n    const genesisHash = await connection.getGenesisHash();\n    const cluster =\n      genesisHash === MAINNET_GENESIS_HASH\n        ? 'mainnet-beta'\n        : genesisHash === DEVNET_GENESIS_HASH\n        ? 'devnet'\n        : 'localnet';\n\n    const pid = programId ?? SBV2_MAINNET_PID;\n\n    const programAccountInfo = await connection.getAccountInfo(pid);\n    if (programAccountInfo === null) {\n      throw new Error(\n        `Failed to load Switchboard at ${pid}, try manually providing a programId`\n      );\n    }\n\n    const program = await SwitchboardProgram.load(\n      cluster,\n      connection,\n      payer,\n      pid\n    );\n    return program;\n  };\n\n  /**\n   * Retrieves the Switchboard Program ID for the currently connected cluster.\n   * @return The PublicKey of the Switchboard Program ID.\n   */\n  public get programId(): PublicKey {\n    return this._program.programId;\n  }\n\n  /**\n   * Retrieves the Switchboard Program IDL.\n   * @return The IDL of the Switchboard Program.\n   */\n  public get idl(): anchor.Idl {\n    return this._program.idl;\n  }\n\n  /**\n   * Retrieves the Switchboard Borsh Accounts Coder.\n   * @return The BorshAccountsCoder for the Switchboard Program.\n   */\n  public get coder(): anchor.BorshAccountsCoder {\n    return new anchor.BorshAccountsCoder(this._program.idl);\n  }\n\n  /**\n   * Retrieves the anchor Provider used by this program to connect with the Solana cluster.\n   * @return The AnchorProvider instance for the Switchboard Program.\n   */\n  public get provider(): anchor.AnchorProvider {\n    return this._program.provider as anchor.AnchorProvider;\n  }\n\n  /**\n   * Retrieves the Connection used by this program to connect with the Solana cluster.\n   * @return The Connection instance for the Switchboard Program.\n   */\n  public get connection(): Connection {\n    return this._program.provider.connection;\n  }\n\n  /**\n   * Retrieves the Wallet used by this program.\n   * @return The AnchorWallet instance for the Switchboard Program.\n   */\n  public get wallet(): AnchorWallet {\n    return this.provider.wallet as AnchorWallet;\n  }\n\n  /**\n   * Retrieves the wallet's PublicKey.\n   * @return The PublicKey of the wallet.\n   */\n  public get walletPubkey(): PublicKey {\n    return this.wallet.payer.publicKey;\n  }\n\n  /**\n   * Checks if the program is read-only.\n   * @return A boolean indicating if the SwitchboardProgram instance is read-only.\n   */\n  public get isReadOnly(): boolean {\n    return (\n      this.provider.publicKey.toBase58() ===\n      SwitchboardProgram._readOnlyKeypair.publicKey.toBase58()\n    );\n  }\n\n  /**\n   * Verifies that a payer keypair has been supplied to the {@linkcode SwitchboardProgram}.\n   * Throws an error if the program is read-only.\n   */\n  public verifyPayer(): void {\n    if (this.isReadOnly) {\n      throw new errors.SwitchboardProgramReadOnlyError();\n    }\n  }\n\n  /**\n   * Verifies that a new keypair has been provided and the corresponding account does not already exist.\n   *\n   * **NOTE:** Creating new accounts without this check may prevent the ability to withdraw any existing funds.\n   *\n   * @param keypair - The Keypair to be verified.\n   * @throws Will throw an error if the account for the keypair already exists.\n   */\n  public async verifyNewKeypair(keypair: Keypair): Promise<void> {\n    const accountInfo = await this.connection.getAccountInfo(keypair.publicKey);\n    if (accountInfo) {\n      throw new errors.ExistingKeypair();\n    }\n  }\n\n  /**\n   * Retrieves the account namespace for the Switchboard Program.\n   * @return The AccountNamespace instance for the Switchboard Program.\n   */\n  public get account(): anchor.AccountNamespace {\n    return this._program.account;\n  }\n\n  /**\n   * Load the Switchboard Labs permissionless Queue for either devnet or mainnet. The permissionless queue has the following permissions:\n   *  - unpermissionedFeedsEnabled: True\n   *  - unpermissionedVrfEnabled: True\n   *  - enableBufferRelayers: False\n   *\n   * **Note:** {@linkcode AggregatorAccount}s and {@linkcode VrfAccount}s do not require permissions to join this queue. {@linkcode BufferRelayerAccount}s are disabled.\n   */\n  async loadPermissionless(): Promise<{\n    queueAccount: QueueAccount;\n    queue: OracleQueueAccountData;\n    crankAccount: CrankAccount;\n    crank: CrankAccountData;\n  }> {\n    const queueKey =\n      this.cluster === 'mainnet-beta'\n        ? SWITCHBOARD_LABS_MAINNET_PERMISSIONLESS_QUEUE\n        : this.cluster === 'devnet'\n        ? SWITCHBOARD_LABS_DEVNET_PERMISSIONLESS_QUEUE\n        : null;\n    if (!queueKey) {\n      throw new Error(\n        `Failed to load the permissionless queue for cluster ${this.cluster}`\n      );\n    }\n    const [queueAccount, queue] = await QueueAccount.load(this, queueKey);\n\n    const crankKey =\n      this.cluster === 'mainnet-beta'\n        ? SWITCHBOARD_LABS_MAINNET_PERMISSIONLESS_CRANK\n        : this.cluster === 'devnet'\n        ? SWITCHBOARD_LABS_DEVNET_PERMISSIONLESS_CRANK\n        : null;\n    if (!crankKey) {\n      throw new Error(\n        `Failed to load the permissionless queue for cluster ${this.cluster}`\n      );\n    }\n    const [crankAccount, crank] = await CrankAccount.load(this, crankKey);\n\n    return { queueAccount, queue, crankAccount, crank };\n  }\n\n  /**\n   * Load the Switchboard Labs permissionled Queue for either devnet or mainnet. The permissioned queue has the following permissions:\n   *  - unpermissionedFeedsEnabled: False\n   *  - unpermissionedVrfEnabled: False\n   *  - enableBufferRelayers: False\n   *\n   * **Note:** The queue authority must grant {@linkcode AggregatorAccount}s PERMIT_ORACLE_QUEUE_USAGE and {@linkcode VrfAccount}s PERMIT_VRF_REQUESTS permissions before joining the queue and requesting oracle updates. {@linkcode BufferRelayerAccount}s are disabled.\n   */\n  async loadPermissioned(): Promise<{\n    queueAccount: QueueAccount;\n    queue: OracleQueueAccountData;\n    crankAccount: CrankAccount;\n    crank: CrankAccountData;\n  }> {\n    const queueKey =\n      this.cluster === 'mainnet-beta'\n        ? SWITCHBOARD_LABS_MAINNET_PERMISSIONED_QUEUE\n        : this.cluster === 'devnet'\n        ? SWITCHBOARD_LABS_DEVNET_PERMISSIONED_QUEUE\n        : null;\n    if (!queueKey) {\n      throw new Error(\n        `Failed to load the permissioned queue for cluster ${this.cluster}`\n      );\n    }\n    const [queueAccount, queue] = await QueueAccount.load(\n      this,\n      this.cluster === 'mainnet-beta'\n        ? SWITCHBOARD_LABS_MAINNET_PERMISSIONED_QUEUE\n        : SWITCHBOARD_LABS_DEVNET_PERMISSIONED_QUEUE\n    );\n\n    const crankKey =\n      this.cluster === 'mainnet-beta'\n        ? SWITCHBOARD_LABS_MAINNET_PERMISSIONED_CRANK\n        : this.cluster === 'devnet'\n        ? SWITCHBOARD_LABS_DEVNET_PERMISSIONED_CRANK\n        : null;\n    if (!crankKey) {\n      throw new Error(\n        `Failed to load the permissionless queue for cluster ${this.cluster}`\n      );\n    }\n    const [crankAccount, crank] = await CrankAccount.load(this, crankKey);\n\n    return { queueAccount, queue, crankAccount, crank };\n  }\n\n  /**\n   * Adds an event listener for the specified AnchorEvent, allowing consumers to monitor the chain for events\n   * such as AggregatorOpenRound, VrfRequestRandomness, and AggregatorSaveResult.\n   *\n   * @param eventName - The name of the event to listen for.\n   * @param callback - A callback function to handle the event data, slot, and signature.\n   * @return A unique listener ID that can be used to remove the event listener.\n   */\n  public addEventListener<EventName extends keyof SwitchboardEvents>(\n    eventName: EventName,\n    callback: (\n      data: SwitchboardEvents[EventName],\n      slot: number,\n      signature: string\n    ) => void | Promise<void>\n  ): number {\n    return this._program.addEventListener(eventName as string, callback);\n  }\n\n  /**\n   * Removes the event listener with the specified listener ID.\n   *\n   * @param listenerId - The unique ID of the event listener to be removed.\n   */\n  public async removeEventListener(listenerId: number) {\n    return await this._program.removeEventListener(listenerId);\n  }\n\n  public async signAndSendAll(\n    txns: Array<TransactionObject>,\n    opts: SendTransactionOptions = DEFAULT_SEND_TRANSACTION_OPTIONS,\n    txnOptions?: TransactionOptions,\n    delay = 0\n  ): Promise<Array<TransactionSignature>> {\n    const txnSignatures = await TransactionObject.signAndSendAll(\n      this.provider,\n      txns,\n      opts,\n      txnOptions,\n      delay\n    );\n    return txnSignatures;\n  }\n\n  public async signAndSend(\n    txn: TransactionObject,\n    opts: SendTransactionOptions = DEFAULT_SEND_TRANSACTION_OPTIONS,\n    txnOptions?: TransactionOptions\n  ): Promise<TransactionSignature> {\n    const txnSignature = await txn.signAndSend(this.provider, opts, txnOptions);\n    return txnSignature;\n  }\n\n  async getProgramJobAccounts(): Promise<Map<Uint8Array, LoadedJobDefinition>> {\n    const accountInfos = await this.connection\n      .getProgramAccounts(this.programId, {\n        filters: [\n          {\n            memcmp: {\n              offset: 0,\n              bytes: anchor.utils.bytes.bs58.encode(\n                JobAccountData.discriminator\n              ),\n            },\n          },\n        ],\n      })\n      .then((values: Array<AccountInfoResponse | undefined>) => {\n        return values.filter(Boolean) as Array<AccountInfoResponse>;\n      });\n\n    const jobs: Array<LoadedJobDefinition> = accountInfos\n      .map((job): LoadedJobDefinition | undefined => {\n        const jobAccount = new JobAccount(this, job.pubkey);\n        const state = JobAccountData.decode(job.account.data);\n        let oracleJob: OracleJob;\n        try {\n          oracleJob = OracleJob.decodeDelimited(state.data);\n        } catch {\n          return undefined;\n        }\n\n        return {\n          account: jobAccount,\n          state: state,\n          job: oracleJob,\n        };\n      })\n      .filter(Boolean) as Array<LoadedJobDefinition>;\n\n    return new Map(jobs.map(job => [job.state.data, job]));\n  }\n\n  async getProgramAccounts(): Promise<{\n    aggregators: Map<string, AggregatorAccountData>;\n    buffers: Map<string, Buffer>;\n    bufferRelayers: Map<string, BufferRelayerAccountData>;\n    cranks: Map<string, CrankAccountData>;\n    jobs: Map<string, JobAccountData>;\n    leases: Map<string, LeaseAccountData>;\n    oracles: Map<string, OracleAccountData>;\n    permissions: Map<string, PermissionAccountData>;\n    programState: Map<string, SbState>;\n    queues: Map<string, OracleQueueAccountData>;\n    slidingResult: Map<string, SlidingResultAccountData>;\n    vrfs: Map<string, VrfAccountData>;\n  }> {\n    const accountInfos: Array<AccountInfoResponse> =\n      await this.connection.getProgramAccounts(this.programId);\n\n    // buffer - [42, 55, 46, 46, 45, 52, 78, 78]\n    // bufferRelayer - [50, 35, 51, 115, 169, 219, 158, 52]\n    // lease - [55, 254, 208, 251, 164, 44, 150, 50]\n    // permissions - [77, 37, 177, 164, 38, 39, 34, 109]\n    // slidingResult - [91, 4, 83, 187, 102, 216, 153, 254]\n    // vrf - [101, 35, 62, 239, 103, 151, 6, 18]\n    // crank - [111, 81, 146, 73, 172, 180, 134, 209]\n    // job - [124, 69, 101, 195, 229, 218, 144, 63]\n    // oracles - [128, 30, 16, 241, 170, 73, 55, 54]\n    // sbState - [159, 42, 192, 191, 139, 62, 168, 28]\n    // queue - [164, 207, 200, 51, 199, 113, 35, 109]\n    // aggregator - [217, 230, 65, 101, 201, 162, 27, 125]\n\n    const discriminatorMap: Map<\n      string,\n      Array<AccountInfoResponse>\n    > = accountInfos.reduce((map, account) => {\n      const discriminator = account.account.data\n        .slice(0, ACCOUNT_DISCRIMINATOR_SIZE)\n        .toString('utf-8');\n\n      const accounts = map.get(discriminator) ?? [];\n      accounts.push(account);\n      map.set(discriminator, accounts);\n\n      return map;\n    }, new Map<string, Array<AccountInfoResponse>>());\n\n    function decodeAccounts<T extends SwitchboardAccountData>(\n      accounts: Array<AccountInfoResponse>,\n      decode: (data: Buffer) => T\n    ): Map<string, T> {\n      return accounts.reduce((map, account) => {\n        try {\n          const decoded = decode(account.account.data);\n          map.set(account.pubkey.toBase58(), decoded);\n          // eslint-disable-next-line no-empty\n        } catch {}\n\n        return map;\n      }, new Map<string, T>());\n    }\n\n    const aggregators: Map<string, AggregatorAccountData> = decodeAccounts(\n      discriminatorMap.get(\n        AggregatorAccountData.discriminator.toString('utf-8')\n      ) ?? [],\n      AggregatorAccountData.decode\n    );\n\n    // TODO: Use aggregator.historyBuffer, crank.dataBuffer, queue.dataBuffer to filter these down and decode\n    const buffers: Map<string, Buffer> = (\n      discriminatorMap.get(BUFFER_DISCRIMINATOR.toString('utf-8')) ?? []\n    ).reduce((map, buffer) => {\n      map.set(buffer.pubkey.toBase58(), buffer.account.data);\n      return map;\n    }, new Map<string, Buffer>());\n\n    const bufferRelayers: Map<string, BufferRelayerAccountData> =\n      decodeAccounts(\n        discriminatorMap.get(\n          BufferRelayerAccountData.discriminator.toString('utf-8')\n        ) ?? [],\n        BufferRelayerAccountData.decode\n      );\n\n    const cranks: Map<string, CrankAccountData> = decodeAccounts(\n      discriminatorMap.get(CrankAccountData.discriminator.toString('utf-8')) ??\n        [],\n      CrankAccountData.decode\n    );\n\n    const jobs: Map<string, JobAccountData> = decodeAccounts(\n      discriminatorMap.get(JobAccountData.discriminator.toString('utf-8')) ??\n        [],\n      JobAccountData.decode\n    );\n\n    const leases: Map<string, LeaseAccountData> = decodeAccounts(\n      discriminatorMap.get(LeaseAccountData.discriminator.toString('utf-8')) ??\n        [],\n      LeaseAccountData.decode\n    );\n\n    const oracles: Map<string, OracleAccountData> = decodeAccounts(\n      discriminatorMap.get(OracleAccountData.discriminator.toString('utf-8')) ??\n        [],\n      OracleAccountData.decode\n    );\n\n    const permissions: Map<string, PermissionAccountData> = decodeAccounts(\n      discriminatorMap.get(\n        PermissionAccountData.discriminator.toString('utf-8')\n      ) ?? [],\n      PermissionAccountData.decode\n    );\n\n    const programState: Map<string, SbState> = decodeAccounts(\n      discriminatorMap.get(SbState.discriminator.toString('utf-8')) ?? [],\n      SbState.decode\n    );\n\n    const queues: Map<string, OracleQueueAccountData> = decodeAccounts(\n      discriminatorMap.get(\n        OracleQueueAccountData.discriminator.toString('utf-8')\n      ) ?? [],\n      OracleQueueAccountData.decode\n    );\n\n    const slidingResult: Map<string, SlidingResultAccountData> = decodeAccounts(\n      discriminatorMap.get(\n        SlidingResultAccountData.discriminator.toString('utf-8')\n      ) ?? [],\n      SlidingResultAccountData.decode\n    );\n\n    const vrfs: Map<string, VrfAccountData> = decodeAccounts(\n      discriminatorMap.get(VrfAccountData.discriminator.toString('utf-8')) ??\n        [],\n      VrfAccountData.decode\n    );\n\n    return {\n      aggregators,\n      buffers,\n      bufferRelayers,\n      cranks,\n      jobs,\n      leases,\n      oracles,\n      permissions,\n      programState,\n      slidingResult,\n      queues,\n      vrfs,\n    };\n  }\n\n  static getAccountType(\n    accountInfo: AccountInfo<Buffer>\n  ): SwitchboardAccountType | null {\n    const discriminator = accountInfo.data\n      .slice(0, ACCOUNT_DISCRIMINATOR_SIZE)\n      .toString('utf-8');\n    const accountType = DISCRIMINATOR_MAP.get(discriminator);\n    if (accountType) {\n      return accountType;\n    }\n\n    return null;\n  }\n}\n\n/**\n * Check if a transaction object is a VersionedTransaction or not\n *\n * @param tx\n * @returns bool\n */\nexport const isVersionedTransaction = (tx): tx is VersionedTransaction => {\n  return 'version' in tx;\n};\n\nexport class AnchorWallet implements anchor.Wallet {\n  constructor(readonly payer: Keypair) {}\n\n  get publicKey(): PublicKey {\n    return this.payer.publicKey;\n  }\n\n  async signTransaction<T extends Transaction | VersionedTransaction>(\n    tx: T\n  ): Promise<T> {\n    if (isVersionedTransaction(tx)) {\n      tx.sign([this.payer]);\n    } else {\n      tx.partialSign(this.payer);\n    }\n\n    return tx;\n  }\n\n  async signAllTransactions<T extends Transaction | VersionedTransaction>(\n    txs: T[]\n  ): Promise<T[]> {\n    return txs.map(t => {\n      if (isVersionedTransaction(t)) {\n        t.sign([this.payer]);\n      } else {\n        t.partialSign(this.payer);\n      }\n      return t;\n    });\n  }\n}\n\ninterface AccountInfoResponse {\n  pubkey: anchor.web3.PublicKey;\n  account: anchor.web3.AccountInfo<Buffer>;\n}\n"]}
{"version":3,"file":"SolanaClock.js","sourceRoot":"","sources":["../../src/SolanaClock.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,wDAA0C;AAC1C,6CAAkE;AAUlE,MAAa,WAAW;IAetB,YAAY,MAA6B;QACvC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,CAAC;QACtD,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAC1B,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,CAAC;QACtD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,IAAY;QACxB,MAAM,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAA0B,CAAC;QAErE,OAAO,IAAI,WAAW,CAAC;YACrB,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,mBAAmB,EAAE,GAAG,CAAC,mBAAmB;YAC5C,KAAK,EAAE,GAAG,CAAC,KAAK;YAChB,mBAAmB,EAAE,GAAG,CAAC,mBAAmB;YAC5C,aAAa,EAAE,GAAG,CAAC,aAAa;SACjC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,mBAAmB,CAAC,IAAY;QACrC,OAAO,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;IACtE,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,UAAsB;QACvC,MAAM,YAAY,GAAG,MAAM,UAAU,CAAC,cAAc,CAAC,6BAAmB,CAAC,CAAC;QAC1E,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;SAC7D;QACD,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACpD,OAAO,KAAK,CAAC;IACf,CAAC;;AA9CH,kCA+CC;AAxCiB,kBAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IACpC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC;IACjB,KAAK,CAAC,GAAG,CAAC,qBAAqB,CAAC;IAChC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC;IAClB,KAAK,CAAC,GAAG,CAAC,qBAAqB,CAAC;IAChC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC;CAC3B,CAAC,CAAC","sourcesContent":["import * as anchor from '@coral-xyz/anchor';\nimport * as borsh from '@coral-xyz/borsh';\nimport { Connection, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\n\nexport interface SolanaClockDataFields {\n  slot: anchor.BN;\n  epochStartTimestamp: anchor.BN;\n  epoch: anchor.BN;\n  leaderScheduleEpoch: anchor.BN;\n  unixTimestamp: anchor.BN;\n}\n\nexport class SolanaClock {\n  slot: anchor.BN;\n  epochStartTimestamp: anchor.BN;\n  epoch: anchor.BN;\n  leaderScheduleEpoch: anchor.BN;\n  unixTimestamp: anchor.BN;\n\n  static readonly layout = borsh.struct([\n    borsh.u64('slot'),\n    borsh.i64('epochStartTimestamp'),\n    borsh.u64('epoch'),\n    borsh.u64('leaderScheduleEpoch'),\n    borsh.i64('unixTimestamp'),\n  ]);\n\n  constructor(fields: SolanaClockDataFields) {\n    this.slot = fields.slot;\n    this.epochStartTimestamp = fields.epochStartTimestamp;\n    this.epoch = fields.epoch;\n    this.leaderScheduleEpoch = fields.epochStartTimestamp;\n    this.unixTimestamp = fields.unixTimestamp;\n  }\n\n  static decode(data: Buffer): SolanaClock {\n    const dec = SolanaClock.layout.decode(data) as SolanaClockDataFields;\n\n    return new SolanaClock({\n      slot: dec.slot,\n      epochStartTimestamp: dec.epochStartTimestamp,\n      epoch: dec.epoch,\n      leaderScheduleEpoch: dec.leaderScheduleEpoch,\n      unixTimestamp: dec.unixTimestamp,\n    });\n  }\n\n  static decodeUnixTimestamp(data: Buffer): anchor.BN {\n    return borsh.u64('unixTimestamp').decode(data, data.byteLength - 8);\n  }\n\n  static async fetch(connection: Connection): Promise<SolanaClock> {\n    const sysclockInfo = await connection.getAccountInfo(SYSVAR_CLOCK_PUBKEY);\n    if (!sysclockInfo) {\n      throw new Error(`Failed to fetch SYSVAR_CLOCK AccountInfo`);\n    }\n    const clock = SolanaClock.decode(sysclockInfo.data);\n    return clock;\n  }\n}\n"]}
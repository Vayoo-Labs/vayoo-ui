{"version":3,"file":"SwitchboardTestContext.js","sourceRoot":"","sources":["../../src/SwitchboardTestContext.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CreateQueueOracleParams,\n  LoadedSwitchboardNetwork,\n  loadKeypair,\n  NetworkInitParams,\n  OracleAccount,\n  QueueAccount,\n  SwitchboardNetwork,\n  SwitchboardProgram,\n} from '.';\n\nimport { AnchorProvider } from '@coral-xyz/anchor';\nimport { Connection, Keypair, PublicKey } from '@solana/web3.js';\n// import {\n//   IOracleConfig,\n//   NodeOracle,\n//   ReleaseChannel,\n//   ReleaseChannelVersion,\n// } from '@switchboard-xyz/oracle';\nimport fs from 'fs';\nimport _ from 'lodash';\nimport os from 'os';\nimport path from 'path';\n\n// export type NodeConfig = IOracleConfig & Partial<ReleaseChannelVersion>;\n\nexport function findAnchorTomlWallet(workingDir = process.cwd()): string {\n  let numDirs = 3;\n  while (numDirs) {\n    const filePath = path.join(workingDir, 'Anchor.toml');\n    if (fs.existsSync(filePath)) {\n      const fileString = fs.readFileSync(filePath, 'utf-8');\n      const matches = Array.from(\n        fileString.matchAll(new RegExp(/wallet\\s?=\\s?\"(?<wallet_path>.*)\"/g))\n      );\n      if (\n        matches &&\n        matches.length > 0 &&\n        'groups' in matches[0] &&\n        'wallet_path' in matches[0].groups! &&\n        matches[0].groups['wallet_path']\n      ) {\n        const walletPath = matches[0].groups['wallet_path'];\n        return walletPath.startsWith('/') ||\n          walletPath.startsWith('C:') ||\n          walletPath.startsWith('D:')\n          ? walletPath\n          : walletPath.startsWith('~')\n          ? path.join(os.homedir(), walletPath.slice(1))\n          : path.join(process.cwd(), walletPath);\n      }\n    }\n\n    workingDir = path.dirname(workingDir);\n    --numDirs;\n  }\n\n  throw new Error(`Failed to find wallet path in Anchor.toml`);\n}\n\nexport type SwitchboardTestContextInit = Omit<\n  Omit<NetworkInitParams, 'authority'>,\n  'oracles'\n> & {\n  oracle: Omit<CreateQueueOracleParams, 'authority'>;\n};\n\n// queuePubkey: ACzh7Ra83zyjyBn1yv4JLZ1jC41kxTcMyuoFN8z1BTPX\n// oraclePubkey: Ei4HcqRQtf6TfwbuRXKRwCtt8PDXhmq9NhYLWpoh23xp\n\n// TIP: Do NOT define an authority and defaul to Anchor.toml wallet\nexport const DEFAULT_LOCALNET_NETWORK: SwitchboardTestContextInit = {\n  name: 'Localnet Queue',\n  metadata: 'Localnet Metadata',\n  keypair: Keypair.fromSecretKey(\n    new Uint8Array([\n      64, 119, 125, 66, 195, 41, 127, 56, 113, 141, 220, 226, 61, 141, 93, 213,\n      149, 12, 201, 99, 225, 48, 92, 168, 203, 19, 197, 43, 186, 24, 189, 98,\n      136, 203, 205, 164, 226, 1, 86, 171, 199, 229, 92, 106, 212, 230, 63, 3,\n      160, 16, 181, 133, 19, 59, 42, 249, 213, 155, 187, 32, 198, 125, 3, 50,\n    ])\n  ),\n  dataBufferKeypair: Keypair.fromSecretKey(\n    new Uint8Array([\n      28, 229, 235, 252, 212, 152, 240, 151, 230, 84, 57, 182, 211, 58, 109,\n      232, 52, 111, 127, 47, 165, 186, 139, 73, 33, 156, 253, 250, 172, 188,\n      119, 182, 87, 178, 229, 228, 101, 161, 161, 42, 44, 249, 82, 32, 94, 94,\n      198, 20, 234, 19, 202, 242, 165, 35, 2, 231, 160, 10, 221, 45, 63, 3, 250,\n      119,\n    ])\n  ),\n  queueSize: 10,\n  reward: 0,\n  minStake: 0,\n  oracleTimeout: 900,\n  unpermissionedFeeds: true,\n  unpermissionedVrf: true,\n  enableBufferRelayers: true,\n  oracle: {\n    name: 'Localnet Oracle',\n    stakeAmount: 0,\n    enable: true,\n    stakingWalletKeypair: Keypair.fromSecretKey(\n      new Uint8Array([\n        67, 131, 239, 47, 118, 122, 163, 132, 42, 122, 203, 119, 213, 213, 100,\n        75, 231, 52, 223, 48, 24, 210, 237, 170, 53, 148, 5, 156, 177, 174, 55,\n        104, 150, 48, 4, 175, 217, 217, 90, 71, 189, 153, 51, 139, 210, 112,\n        138, 167, 3, 190, 119, 20, 1, 68, 148, 4, 186, 96, 127, 24, 38, 128,\n        189, 75,\n      ])\n    ),\n  },\n};\n\nexport class SwitchboardTestContext {\n  // _oracle?: NodeOracle;\n\n  constructor(\n    readonly network: LoadedSwitchboardNetwork,\n    readonly walletPath: string\n  ) {}\n\n  get queue(): QueueAccount {\n    return this.network.queue.account;\n  }\n\n  get program(): SwitchboardProgram {\n    return this.queue.program;\n  }\n\n  get oracle(): OracleAccount {\n    return this.network.oracles[0].account;\n  }\n\n  static async load(\n    connection: Connection,\n    networkInitParams?: Partial<SwitchboardTestContextInit>,\n    walletPath?: string,\n    programId?: PublicKey\n  ): Promise<SwitchboardTestContext> {\n    const walletFsPath = walletPath ?? findAnchorTomlWallet();\n    const wallet = Keypair.fromSecretKey(\n      new Uint8Array(JSON.parse(fs.readFileSync(walletFsPath, 'utf-8')))\n    );\n    const walletBalance = await connection.getBalance(wallet.publicKey);\n    if (walletBalance === 0) {\n      throw new Error(\n        `Wallet is empty, balance: ${walletBalance}, wallet: ${wallet.publicKey.toBase58()}`\n      );\n    }\n\n    const program = await SwitchboardProgram.fromConnection(\n      connection,\n      wallet,\n      programId\n    );\n\n    const networkInit = networkInitParams ?? DEFAULT_LOCALNET_NETWORK;\n    // only allow creating a single oracle\n    // ensure authority matches Anchor.toml wallet so we dont need to worry about transferring oracle funds\n    const networkParams: NetworkInitParams = _.merge(\n      { reward: 0, minStake: 0, size: 10 },\n      networkInit,\n      {\n        authority: undefined,\n        oracles: [\n          networkInit.oracle\n            ? _.merge(networkInit.oracle, {\n                authority: undefined,\n                enable: true,\n              })\n            : { authority: undefined, enable: true },\n        ],\n      }\n    );\n\n    // try to load existing network\n    try {\n      if ('keypair' in networkParams) {\n        const queuePubkey = networkParams.keypair!.publicKey;\n        const [queueAccount, queue] = await QueueAccount.load(\n          program,\n          queuePubkey\n        );\n        if (!queue.authority.equals(wallet.publicKey)) {\n          throw new Error(`Anchor wallet pubkey mismatch`);\n        }\n\n        const network = await SwitchboardNetwork.fromQueue(queueAccount);\n        return new SwitchboardTestContext(network, walletFsPath);\n      }\n      // eslint-disable-next-line no-empty\n    } catch {}\n\n    const [network] = await SwitchboardNetwork.create(program, networkParams);\n    const loadedNetwork = await network.load();\n\n    if (loadedNetwork.oracles.length !== 1) {\n      throw new Error(`Failed to get oracle`);\n    }\n\n    for (const oracle of loadedNetwork.oracles) {\n      if (!oracle.state.oracleAuthority.equals(wallet.publicKey)) {\n        throw new Error(`Anchor wallet pubkey mismatch`);\n      }\n    }\n    return new SwitchboardTestContext(loadedNetwork, walletFsPath);\n  }\n\n  static async loadFromProvider(\n    provider: AnchorProvider,\n    networkInitParams?: Partial<SwitchboardTestContextInit>,\n    programId?: PublicKey\n  ): Promise<SwitchboardTestContext> {\n    const switchboard = await SwitchboardTestContext.load(\n      provider.connection,\n      networkInitParams,\n      undefined,\n      programId\n    );\n    return switchboard;\n  }\n\n  static async initFromProvider(\n    provider: AnchorProvider,\n    networkInitParams?: Partial<SwitchboardTestContextInit>,\n    // oracleParams?: Partial<IOracleConfig>,\n    programId?: PublicKey\n  ): Promise<SwitchboardTestContext> {\n    const switchboard = await SwitchboardTestContext.loadFromProvider(\n      provider,\n      networkInitParams,\n      programId\n    );\n    // await switchboard.start(oracleParams);\n    return switchboard;\n  }\n\n  static async init(\n    connection: Connection,\n    networkInitParams?: Partial<SwitchboardTestContextInit>,\n    // oracleParams?: Partial<IOracleConfig>,\n    walletPath?: string,\n    programId?: PublicKey\n  ): Promise<SwitchboardTestContext> {\n    const switchboard = await SwitchboardTestContext.load(\n      connection,\n      networkInitParams,\n      walletPath,\n      programId\n    );\n    // await switchboard.start(oracleParams);\n    return switchboard;\n  }\n\n  // async start(\n  //   oracleParams?: Partial<NodeConfig> | ReleaseChannel,\n  //   timeout = 60\n  // ) {\n  //   const releaseChannel: ReleaseChannel =\n  //     typeof oracleParams === 'string' &&\n  //     (oracleParams === 'testnet' ||\n  //       oracleParams === 'mainnet' ||\n  //       oracleParams === 'latest')\n  //       ? oracleParams\n  //       : 'testnet';\n\n  //   const baseConfig: NodeConfig = {\n  //     chain: 'solana',\n  //     releaseChannel: releaseChannel,\n  //     network:\n  //       this.program.cluster === 'mainnet-beta'\n  //         ? 'mainnet'\n  //         : this.program.cluster,\n  //     rpcUrl: this.program.connection.rpcEndpoint,\n  //     oracleKey: this.oracle.publicKey.toBase58(),\n  //     secretPath: this.walletPath,\n  //     envVariables: {\n  //       VERBOSE: '1',\n  //       DEBUG: '1',\n  //       DISABLE_NONE_QUEUE: '1',\n  //       DISABLE_METRICS: '1',\n  //     },\n  //   };\n\n  //   const config: NodeConfig =\n  //     typeof oracleParams === 'string'\n  //       ? baseConfig\n  //       : _.merge(baseConfig, oracleParams);\n\n  //   this._oracle = await NodeOracle.fromReleaseChannel({\n  //     ...config,\n  //     releaseChannel: releaseChannel,\n  //     chain: 'solana',\n  //   });\n\n  //   console.log(`Starting Switchboard oracle ...`);\n\n  //   await this._oracle.startAndAwait(timeout);\n  // }\n\n  // stop() {\n  //   if (this._oracle) {\n  //     const stopped = this._oracle.stop();\n  //     if (!stopped) {\n  //       console.error(`Failed to stop docker oracle`);\n\n  //       this._oracle.kill();\n  //     }\n  //   }\n  // }\n\n  public static findAnchorTomlWallet(workingDir = process.cwd()): string {\n    try {\n      const walletPath = findAnchorTomlWallet(workingDir);\n      return walletPath;\n    } catch (error) {\n      console.error(error);\n    }\n\n    throw new Error(`Failed to find wallet path in Anchor.toml`);\n  }\n\n  /** Load a keypair from a file path. If one doesn't exist, it will be created */\n  public static loadKeypair(keypairPath: string): Keypair {\n    return loadKeypair(keypairPath);\n  }\n}\n\nexport { SwitchboardTestContext as SwitchboardTestContextV2 };\n"]}
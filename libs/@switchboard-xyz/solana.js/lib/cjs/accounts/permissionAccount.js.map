{"version":3,"file":"permissionAccount.js","sourceRoot":"","sources":["../../../src/accounts/permissionAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import * as errors from '../errors';\nimport * as types from '../generated';\nimport {\n  PermitNone,\n  PermitOracleHeartbeat,\n  PermitOracleQueueUsage,\n  PermitVrfRequests,\n} from '../generated/types/SwitchboardPermission';\nimport { SwitchboardProgram } from '../SwitchboardProgram';\nimport { TransactionObject } from '../TransactionObject';\n\nimport { Account } from './account';\n\nimport { ACCOUNT_DISCRIMINATOR_SIZE } from '@coral-xyz/anchor';\nimport {\n  AccountInfo,\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  SystemProgram,\n  TransactionSignature,\n} from '@solana/web3.js';\n\n/**\n *  Parameters for initializing an {@linkcode PermissionAccount}\n */\nexport interface PermissionAccountInitParams {\n  granter: PublicKey;\n  grantee: PublicKey;\n  authority: PublicKey;\n}\n\nexport interface PermissionSetParams {\n  /** Whether to enable PERMIT_ORACLE_HEARTBEAT permissions. **Note:** Requires a provided queueAuthority keypair or payer to be the assigned queue authority. */\n  enable: boolean;\n  /** Keypair used to enable heartbeat permissions if payer is not the queue authority. */\n  queueAuthority?: Keypair;\n}\n\n/**\n * Account type dictating the level of permissions between a granter and a grantee.\n *\n * A {@linkcode QueueAccount} acts as the granter where the queue authority assigns or revokes a grantee's {@linkcode types.SwitchboardPermission}. A grantee can be one of the following: {@linkcode AggregatorAccount}, {@linkcode BufferRelayerAccount}, or {@linkcode VrfAccount}.\n *\n * Data: {@linkcode types.PermissionAccountData}\n */\nexport class PermissionAccount extends Account<types.PermissionAccountData> {\n  static accountName = 'PermissionAccountData';\n\n  public static size = 372;\n\n  /**\n   * Returns the size of an on-chain {@linkcode PermissionAccount}.\n   */\n  public readonly size = this.program.account.permissionAccountData.size;\n\n  /**\n   * Retrieve and decode the {@linkcode types.PermissionAccountData} stored in this account.\n   */\n  public async loadData(): Promise<types.PermissionAccountData> {\n    const data = await types.PermissionAccountData.fetch(\n      this.program,\n      this.publicKey\n    );\n    if (data === null)\n      throw new errors.AccountNotFoundError('Permissions', this.publicKey);\n    return data;\n  }\n\n  static getPermissions(\n    permission: types.PermissionAccountData\n  ): types.SwitchboardPermissionKind {\n    switch (permission.permissions) {\n      case PermitNone.discriminator:\n        return new PermitNone();\n      case PermitOracleHeartbeat.discriminator:\n        return new PermitOracleHeartbeat();\n      case PermitOracleQueueUsage.discriminator:\n        return new PermitOracleQueueUsage();\n      case PermitVrfRequests.discriminator:\n        return new PermitVrfRequests();\n    }\n\n    throw new Error(\n      `Failed to find the assigned permissions, expected [${PermitNone.discriminator}, ${PermitOracleHeartbeat.discriminator}, ${PermitOracleQueueUsage.discriminator}, or ${PermitVrfRequests.discriminator}], received ${permission.permissions}`\n    );\n  }\n\n  /**\n   * Return a permission account state initialized to the default values.\n   */\n  public static default(): types.PermissionAccountData {\n    const buffer = Buffer.alloc(PermissionAccount.size, 0);\n    types.PermissionAccountData.discriminator.copy(buffer, 0);\n    return types.PermissionAccountData.decode(buffer);\n  }\n\n  /**\n   * Create a mock account info for a given permission config. Useful for test integrations.\n   */\n  public static createMock(\n    programId: PublicKey,\n    data: Partial<types.PermissionAccountData>,\n    options?: {\n      lamports?: number;\n      rentEpoch?: number;\n    }\n  ): AccountInfo<Buffer> {\n    const fields: types.PermissionAccountDataFields = {\n      ...PermissionAccount.default(),\n      ...data,\n      // any cleanup actions here\n    };\n    const state = new types.PermissionAccountData(fields);\n\n    const buffer = Buffer.alloc(PermissionAccount.size, 0);\n    types.PermissionAccountData.discriminator.copy(buffer, 0);\n    types.PermissionAccountData.layout.encode(state, buffer, 8);\n\n    return {\n      executable: false,\n      owner: programId,\n      lamports: options?.lamports ?? 1 * LAMPORTS_PER_SOL,\n      data: buffer,\n      rentEpoch: options?.rentEpoch ?? 0,\n    };\n  }\n\n  /** Load an existing PermissionAccount with its current on-chain state */\n  public static async load(\n    program: SwitchboardProgram,\n    authority: PublicKey | string,\n    granter: PublicKey | string,\n    grantee: PublicKey | string\n  ): Promise<[PermissionAccount, types.PermissionAccountData, number]> {\n    const [account, bump] = PermissionAccount.fromSeed(\n      program,\n      typeof authority === 'string' ? new PublicKey(authority) : authority,\n      typeof granter === 'string' ? new PublicKey(granter) : granter,\n      typeof grantee === 'string' ? new PublicKey(grantee) : grantee\n    );\n    const state = await account.loadData();\n    return [account, state, bump];\n  }\n\n  /**\n   * Loads a PermissionAccount from the expected PDA seed format.\n   * @param program The Switchboard program for the current connection.\n   * @param authority The authority pubkey to be incorporated into the account seed.\n   * @param granter The granter pubkey to be incorporated into the account seed.\n   * @param grantee The grantee pubkey to be incorporated into the account seed.\n   * @return PermissionAccount and PDA bump.\n   */\n  public static fromSeed(\n    program: SwitchboardProgram,\n    authority: PublicKey,\n    granter: PublicKey,\n    grantee: PublicKey\n  ): [PermissionAccount, number] {\n    const [publicKey, bump] = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from('PermissionAccountData'),\n        authority.toBytes(),\n        granter.toBytes(),\n        grantee.toBytes(),\n      ],\n      program.programId\n    );\n    return [new PermissionAccount(program, publicKey), bump];\n  }\n\n  public static createInstruction(\n    program: SwitchboardProgram,\n    payer: PublicKey,\n    params: PermissionAccountInitParams\n  ): [PermissionAccount, TransactionObject] {\n    const [account] = PermissionAccount.fromSeed(\n      program,\n      params.authority,\n      params.granter,\n      params.grantee\n    );\n    const instruction = types.permissionInit(\n      program,\n      { params: {} },\n      {\n        permission: account.publicKey,\n        granter: params.granter,\n        grantee: params.grantee,\n        systemProgram: SystemProgram.programId,\n        authority: params.authority,\n        payer,\n      }\n    );\n    return [account, new TransactionObject(payer, [instruction], [])];\n  }\n\n  public static async create(\n    program: SwitchboardProgram,\n    params: PermissionAccountInitParams\n  ): Promise<[PermissionAccount, TransactionSignature]> {\n    const [account, txnObject] = this.createInstruction(\n      program,\n      program.walletPubkey,\n      params\n    );\n    const txSignature = await program.signAndSend(txnObject);\n    return [account, txSignature];\n  }\n\n  /**\n   * Check if a specific permission is enabled on this permission account\n   */\n  public async isPermissionEnabled(permission): Promise<boolean> {\n    const permissions = (await this.loadData()).permissions;\n    return (permissions & (permission as number)) !== 0;\n  }\n\n  /**\n   * Produces the instruction to set the permission in the PermissionAccount\n   */\n  public setInstruction(\n    payer: PublicKey,\n    params: PermissionSetParams & {\n      /** The {@linkcode types.SwitchboardPermission} to set for the grantee. */\n      permission: types.SwitchboardPermissionKind;\n    }\n  ): TransactionObject {\n    return new TransactionObject(\n      payer,\n      [\n        types.permissionSet(\n          this.program,\n          {\n            params: {\n              permission: params.permission,\n              enable: params.enable,\n            },\n          },\n          {\n            permission: this.publicKey,\n            authority: params.queueAuthority\n              ? params.queueAuthority.publicKey\n              : payer,\n          }\n        ),\n      ],\n      params.queueAuthority ? [params.queueAuthority] : []\n    );\n  }\n\n  /**\n   * Sets the permission in the PermissionAccount\n   */\n  public async set(\n    params: PermissionSetParams & {\n      /** The {@linkcode types.SwitchboardPermission} to set for the grantee. */\n      permission: types.SwitchboardPermissionKind;\n    }\n  ): Promise<string> {\n    const setTxn = this.setInstruction(this.program.walletPubkey, params);\n    const txnSignature = await this.program.signAndSend(setTxn);\n    return txnSignature;\n  }\n\n  static getGranteePermissions(\n    grantee: AccountInfo<Buffer>\n  ): types.SwitchboardPermissionKind {\n    if (grantee.data.byteLength < ACCOUNT_DISCRIMINATOR_SIZE) {\n      throw new Error(`Cannot assign permissions to grantee`);\n    }\n    const discriminator = grantee.data.slice(0, ACCOUNT_DISCRIMINATOR_SIZE);\n\n    // check oracle\n    if (types.OracleAccountData.discriminator.compare(discriminator) === 0) {\n      return new PermitOracleHeartbeat();\n    }\n\n    // check aggregator and buffer relayer\n    if (\n      types.AggregatorAccountData.discriminator.compare(discriminator) === 0 ||\n      types.BufferRelayerAccountData.discriminator.compare(discriminator) === 0\n    ) {\n      return new PermitOracleQueueUsage();\n    }\n\n    // check vrf\n    if (types.VrfAccountData.discriminator.compare(discriminator) === 0) {\n      return new PermitVrfRequests();\n    }\n\n    throw new Error(\n      `Cannot find permissions to assign for account with discriminator of [${discriminator.join(\n        ', '\n      )}]`\n    );\n  }\n}\n"]}
{"version":3,"file":"bufferRelayAccount.js","sourceRoot":"","sources":["../../../src/accounts/bufferRelayAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import * as errors from '../errors';\nimport * as types from '../generated';\nimport { bufferRelayerSaveResult } from '../generated';\nimport { SwitchboardProgram } from '../SwitchboardProgram';\nimport {\n  TransactionObject,\n  TransactionObjectOptions,\n} from '../TransactionObject';\n\nimport { Account, OnAccountChangeCallback } from './account';\nimport { JobAccount } from './jobAccount';\nimport { OracleAccount } from './oracleAccount';\nimport { PermissionAccount } from './permissionAccount';\nimport { QueueAccount } from './queueAccount';\n\nimport * as spl from '@solana/spl-token';\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  createTransferInstruction,\n  getAccount,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport {\n  Commitment,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport { BN, promiseWithTimeout } from '@switchboard-xyz/common';\n\n/**\n * Account type holding a buffer of data sourced from the buffers sole {@linkcode JobAccount}. A buffer relayer has no consensus mechanism and relies on trusting an {@linkcode OracleAccount} to respond honestly. A buffer relayer has a max capacity of 500 bytes.\n *\n * Data: {@linkcode types.BufferRelayerAccountData}\n */\nexport class BufferRelayerAccount extends Account<types.BufferRelayerAccountData> {\n  static accountName = 'BufferRelayerAccountData';\n\n  /**\n   * Returns the size of an on-chain {@linkcode BufferRelayerAccount}.\n   */\n  public get size(): number {\n    return this.program.account.bufferRelayerAccountData.size;\n  }\n\n  public decode(data: Buffer): types.BufferRelayerAccountData {\n    try {\n      return types.BufferRelayerAccountData.decode(data);\n    } catch {\n      return this.program.coder.decode<types.BufferRelayerAccountData>(\n        BufferRelayerAccount.accountName,\n        data\n      );\n    }\n  }\n\n  /**\n   * Invoke a callback each time a BufferRelayerAccount's data has changed on-chain.\n   * @param callback - the callback invoked when the buffer relayer state changes\n   * @param commitment - optional, the desired transaction finality. defaults to 'confirmed'\n   * @returns the websocket subscription id\n   */\n  public onChange(\n    callback: OnAccountChangeCallback<types.BufferRelayerAccountData>,\n    commitment: Commitment = 'confirmed'\n  ): number {\n    return this.program.connection.onAccountChange(\n      this.publicKey,\n      accountInfo => {\n        callback(this.decode(accountInfo.data));\n      },\n      commitment\n    );\n  }\n\n  /** Load an existing BufferRelayer with its current on-chain state */\n  public static async load(\n    program: SwitchboardProgram,\n    publicKey: PublicKey | string\n  ): Promise<[BufferRelayerAccount, types.BufferRelayerAccountData]> {\n    const account = new BufferRelayerAccount(\n      program,\n      typeof publicKey === 'string' ? new PublicKey(publicKey) : publicKey\n    );\n    const state = await account.loadData();\n    return [account, state];\n  }\n\n  /**\n   * Load and parse {@linkcode BufferRelayerAccount} data based on the program IDL.\n   */\n  public async loadData(): Promise<types.BufferRelayerAccountData> {\n    const data = await types.BufferRelayerAccountData.fetch(\n      this.program,\n      this.publicKey\n    );\n    if (data === null)\n      throw new errors.AccountNotFoundError('Buffer Relayer', this.publicKey);\n    return data;\n  }\n\n  public static async createInstructions(\n    program: SwitchboardProgram,\n    payer: PublicKey,\n    params: {\n      name?: string;\n      minUpdateDelaySeconds: number;\n      queueAccount: QueueAccount;\n      authority?: PublicKey;\n      jobAccount: JobAccount;\n      keypair?: Keypair;\n    }\n  ): Promise<[BufferRelayerAccount, TransactionObject]> {\n    const keypair = params.keypair ?? Keypair.generate();\n    program.verifyNewKeypair(keypair);\n\n    const size = 2048;\n\n    const ixns: TransactionInstruction[] = [];\n\n    const escrow = program.mint.getAssociatedAddress(keypair.publicKey);\n\n    ixns.push(\n      SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: keypair.publicKey,\n        space: size,\n        lamports:\n          await program.provider.connection.getMinimumBalanceForRentExemption(\n            size\n          ),\n        programId: program.programId,\n      })\n    );\n\n    ixns.push(\n      types.bufferRelayerInit(\n        program,\n        {\n          params: {\n            name: [...Buffer.from(params.name ?? '', 'utf8').slice(0, 32)],\n            minUpdateDelaySeconds: params.minUpdateDelaySeconds ?? 30,\n            stateBump: program.programState.bump,\n          },\n        },\n        {\n          bufferRelayer: keypair.publicKey,\n          escrow: escrow,\n          authority: params.authority ?? payer,\n          queue: params.queueAccount.publicKey,\n          job: params.jobAccount.publicKey,\n          programState: program.programState.publicKey,\n          mint: program.mint.address,\n          payer: payer,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n          rent: SYSVAR_RENT_PUBKEY,\n        }\n      )\n    );\n\n    return [\n      new BufferRelayerAccount(program, keypair.publicKey),\n      new TransactionObject(payer, ixns, [keypair]),\n    ];\n  }\n\n  public static async create(\n    program: SwitchboardProgram,\n    params: {\n      name?: string;\n      minUpdateDelaySeconds: number;\n      queueAccount: QueueAccount;\n      authority?: PublicKey;\n      jobAccount: JobAccount;\n      keypair?: Keypair;\n    }\n  ): Promise<[BufferRelayerAccount, TransactionSignature]> {\n    const [bufferAccount, bufferInit] =\n      await BufferRelayerAccount.createInstructions(\n        program,\n        program.walletPubkey,\n        params\n      );\n    const txnSignature = await program.signAndSend(bufferInit);\n    return [bufferAccount, txnSignature];\n  }\n\n  public async openRoundInstructions(\n    payer: PublicKey,\n    params?: BufferRelayerOpenRoundParams\n  ): Promise<TransactionObject> {\n    const txns: TransactionObject[] = [];\n    const bufferRelayer = params?.bufferRelayer ?? (await this.loadData());\n\n    const queueAccount =\n      params?.queueAccount ??\n      new QueueAccount(this.program, bufferRelayer.queuePubkey);\n    const queue = params?.queue ?? (await queueAccount.loadData());\n\n    const openRoundAmount = this.program.mint.fromTokenAmountBN(queue.reward);\n\n    let tokenWallet: PublicKey;\n    if (params?.tokenWallet) {\n      tokenWallet = params.tokenWallet;\n      // check if we need to wrap any funds\n      const tokenAccount = await getAccount(\n        this.program.connection,\n        tokenWallet\n      );\n      const tokenAmountBN = new BN(tokenAccount.amount.toString());\n      if (tokenAmountBN.lt(queue.reward)) {\n        const wrapTxn = await this.program.mint.wrapInstructions(payer, {\n          fundUpTo: openRoundAmount,\n        });\n        txns.push(wrapTxn);\n      }\n    } else {\n      const [userTokenWallet, txn] =\n        await this.program.mint.getOrCreateWrappedUserInstructions(payer, {\n          fundUpTo: openRoundAmount,\n        });\n      tokenWallet = userTokenWallet;\n      if (txn !== undefined) {\n        txns.push(txn);\n      }\n    }\n\n    const [permissionAccount, permissionBump] = this.getPermissionAccount(\n      queueAccount.publicKey,\n      queue.authority\n    );\n\n    const openRoundTxn = new TransactionObject(\n      payer,\n      [\n        createTransferInstruction(\n          tokenWallet,\n          bufferRelayer.escrow,\n          payer,\n          BigInt(queue.reward.toString())\n        ),\n        types.bufferRelayerOpenRound(\n          this.program,\n          {\n            params: {\n              stateBump: this.program.programState.bump,\n              permissionBump,\n            },\n          },\n          {\n            bufferRelayer: this.publicKey,\n            oracleQueue: queueAccount.publicKey,\n            dataBuffer: queue.dataBuffer,\n            permission: permissionAccount.publicKey,\n            escrow: bufferRelayer.escrow,\n            programState: this.program.programState.publicKey,\n          }\n        ),\n      ],\n      []\n    );\n    txns.push(openRoundTxn);\n\n    const packed = TransactionObject.pack(txns);\n    if (packed.length > 1) {\n      throw new Error(`Failed to pack instructions into a single txn`);\n    }\n\n    return packed[0];\n  }\n\n  public async openRound(\n    params?: BufferRelayerOpenRoundParams\n  ): Promise<TransactionSignature> {\n    const openRound = await this.openRoundInstructions(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(openRound);\n    return txnSignature;\n  }\n\n  public async openRoundAndAwaitResult(\n    params: BufferRelayerOpenRoundParams,\n    timeout = 30000\n  ): Promise<[types.BufferRelayerAccountData, TransactionSignature]> {\n    const bufferRelayer = params?.bufferRelayer ?? (await this.loadData());\n    const currentRoundOpenSlot = bufferRelayer.currentRound.roundOpenSlot;\n\n    let ws: number | undefined = undefined;\n\n    const closeWebsocket = async () => {\n      if (ws !== undefined) {\n        await this.program.connection.removeAccountChangeListener(ws);\n        ws = undefined;\n      }\n    };\n\n    const statePromise: Promise<types.BufferRelayerAccountData> =\n      promiseWithTimeout(\n        timeout,\n        new Promise(\n          (\n            resolve: (result: types.BufferRelayerAccountData) => void,\n            reject: (reason: string) => void\n          ) => {\n            ws = this.onChange(bufferRelayer => {\n              if (\n                bufferRelayer.currentRound.roundOpenSlot.gt(\n                  currentRoundOpenSlot\n                ) &&\n                bufferRelayer.currentRound.numSuccess > 0\n              ) {\n                resolve(bufferRelayer);\n              }\n            });\n          }\n        )\n      ).finally(async () => {\n        await closeWebsocket();\n      });\n\n    const openRoundSignature = await this.openRound(params);\n\n    const state = await statePromise;\n\n    await closeWebsocket();\n\n    return [state, openRoundSignature];\n  }\n\n  public async saveResultInstructions(\n    payer: PublicKey,\n    params: BufferRelayerSaveResultParams,\n    options?: TransactionObjectOptions\n  ): Promise<TransactionObject> {\n    const bufferRelayer = await this.loadData();\n\n    const [queueAccount, queue] = await QueueAccount.load(\n      this.program,\n      bufferRelayer.queuePubkey\n    );\n\n    const { permissionAccount, permissionBump } = this.getAccounts(\n      queueAccount,\n      queue.authority\n    );\n\n    const [oracleAccount, oracle] = await OracleAccount.load(\n      this.program,\n      bufferRelayer.currentRound.oraclePubkey\n    );\n\n    return this.saveResultSyncInstructions(\n      payer,\n      {\n        ...params,\n        escrow: bufferRelayer.escrow,\n        queueAccount: queueAccount,\n        queueAuthority: queue.authority,\n        queueDataBuffer: queue.dataBuffer,\n        oracleAccount: oracleAccount,\n        oracleAuthority: oracle.oracleAuthority,\n        oracleTokenAccount: oracle.tokenAccount,\n        permissionAccount: permissionAccount,\n        permissionBump: permissionBump,\n      },\n      options\n    );\n  }\n\n  public async saveResult(\n    params: BufferRelayerSaveResultParams,\n    options?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const saveResult = await this.saveResultInstructions(\n      this.program.walletPubkey,\n      params,\n      options\n    );\n    const txnSignature = await this.program.signAndSend(saveResult);\n    return txnSignature;\n  }\n\n  public saveResultSyncInstructions(\n    payer: PublicKey,\n    params: BufferRelayerSaveResultSyncParams,\n    options?: TransactionObjectOptions\n  ): TransactionObject {\n    const saveResultIxn = bufferRelayerSaveResult(\n      this.program,\n      {\n        params: {\n          stateBump: this.program.programState.bump,\n          permissionBump: params.permissionBump,\n          result: params.result,\n          success: params.success,\n        },\n      },\n      {\n        bufferRelayer: this.publicKey,\n        oracleAuthority: params.oracleAuthority,\n        oracle: params.oracleAccount.publicKey,\n        oracleQueue: params.queueAccount.publicKey,\n        dataBuffer: params.queueDataBuffer,\n        queueAuthority: params.queueAuthority,\n        permission: params.permissionAccount.publicKey,\n        escrow: params.escrow,\n        programState: this.program.programState.publicKey,\n        oracleWallet: params.oracleTokenAccount,\n        tokenProgram: spl.TOKEN_PROGRAM_ID,\n      }\n    );\n\n    return new TransactionObject(payer, [saveResultIxn], [], options);\n  }\n\n  public async saveResultSync(\n    params: BufferRelayerSaveResultSyncParams,\n    options?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const saveResult = await this.saveResultSyncInstructions(\n      this.program.walletPubkey,\n      params,\n      options\n    );\n    const txnSignature = await this.program.signAndSend(saveResult);\n    return txnSignature;\n  }\n\n  public getAccounts(queueAccount: QueueAccount, queueAuthority: PublicKey) {\n    const [permissionAccount, permissionBump] = this.getPermissionAccount(\n      queueAccount.publicKey,\n      queueAuthority\n    );\n\n    return {\n      queueAccount,\n      permissionAccount,\n      permissionBump,\n    };\n  }\n\n  public async toAccountsJSON(\n    _bufferRelayer?: types.BufferRelayerAccountData,\n    _queueAccount?: QueueAccount,\n    _queue?: types.OracleQueueAccountData\n  ): Promise<BufferRelayerAccountsJSON> {\n    const { bufferRelayer, queue, permission, escrow } =\n      await this.fetchAccounts(_bufferRelayer, _queueAccount, _queue);\n\n    return {\n      publicKey: this.publicKey,\n      balance: this.program.mint.fromTokenAmount(escrow.data.amount),\n      ...bufferRelayer.data.toJSON(),\n      queue: {\n        publicKey: queue.publicKey,\n        ...queue.data.toJSON(),\n      },\n      permission: {\n        publicKey: permission.publicKey,\n        ...permission.data.toJSON(),\n        bump: permission.bump,\n      },\n    };\n  }\n\n  public async fetchAccounts(\n    _bufferRelayer?: types.BufferRelayerAccountData,\n    _queueAccount?: QueueAccount,\n    _queue?: types.OracleQueueAccountData\n  ): Promise<BufferRelayerAccounts> {\n    const bufferRelayer = _bufferRelayer ?? (await this.loadData());\n\n    const queueAccount =\n      _queueAccount ??\n      new QueueAccount(this.program, bufferRelayer.queuePubkey);\n    const queue = _queue ?? (await queueAccount.loadData());\n\n    const { permissionAccount, permissionBump } = this.getAccounts(\n      queueAccount,\n      queue.authority\n    );\n    const permission = await permissionAccount.loadData();\n\n    const bufferEscrow = await this.program.mint.getAccount(\n      bufferRelayer.escrow\n    );\n    if (!bufferEscrow) {\n      throw new errors.AccountNotFoundError(\n        'Buffer Relayer Escrow',\n        bufferRelayer.escrow\n      );\n    }\n    const vrfEscrowBalance: number = this.program.mint.fromTokenAmount(\n      bufferEscrow.amount\n    );\n\n    return {\n      bufferRelayer: { publicKey: this.publicKey, data: bufferRelayer },\n      queue: {\n        publicKey: queueAccount.publicKey,\n        data: queue,\n      },\n      permission: {\n        publicKey: permissionAccount.publicKey,\n        bump: permissionBump,\n        data: permission,\n      },\n      escrow: {\n        publicKey: bufferRelayer.escrow,\n        data: bufferEscrow,\n        balance: vrfEscrowBalance,\n      },\n    };\n  }\n\n  public getPermissionAccount(\n    queuePubkey: PublicKey,\n    queueAuthority: PublicKey\n  ): [PermissionAccount, number] {\n    return PermissionAccount.fromSeed(\n      this.program,\n      queueAuthority,\n      queuePubkey,\n      this.publicKey\n    );\n  }\n\n  public getEscrow(): PublicKey {\n    return this.program.mint.getAssociatedAddress(this.publicKey);\n  }\n}\n\nexport interface BufferRelayerInit {\n  name?: string;\n  minUpdateDelaySeconds: number;\n  queueAccount: QueueAccount;\n  authority?: PublicKey;\n  jobAccount: JobAccount;\n  keypair?: Keypair;\n}\n\nexport type BufferRelayerAccounts = {\n  bufferRelayer: {\n    publicKey: PublicKey;\n    data: types.BufferRelayerAccountData;\n  };\n  queue: {\n    publicKey: PublicKey;\n    data: types.OracleQueueAccountData;\n  };\n  permission: {\n    publicKey: PublicKey;\n    bump: number;\n    data: types.PermissionAccountData;\n  };\n  escrow: {\n    publicKey: PublicKey;\n    data: spl.Account;\n    balance: number;\n  };\n};\n\nexport type BufferRelayerAccountsJSON = types.BufferRelayerAccountDataJSON & {\n  publicKey: PublicKey;\n  balance: number;\n  queue: types.OracleQueueAccountDataJSON & { publicKey: PublicKey };\n  permission: types.PermissionAccountDataJSON & {\n    bump: number;\n    publicKey: PublicKey;\n  };\n};\n\nexport type BufferRelayerOpenRoundParams = {\n  tokenWallet?: PublicKey;\n  bufferRelayer?: types.BufferRelayerAccountData;\n  queueAccount?: QueueAccount;\n  queue?: types.OracleQueueAccountData;\n};\n\nexport type BufferRelayerSaveResultParams = {\n  result: Buffer;\n  success: boolean;\n};\n\nexport type BufferRelayerSaveResultSyncParams =\n  BufferRelayerSaveResultParams & {\n    escrow: PublicKey;\n    queueAccount: QueueAccount;\n    queueAuthority: PublicKey;\n    queueDataBuffer: PublicKey;\n    oracleAccount: OracleAccount;\n    oracleAuthority: PublicKey;\n    oracleTokenAccount: PublicKey;\n    permissionAccount: PermissionAccount;\n    permissionBump: number;\n  };\n"]}
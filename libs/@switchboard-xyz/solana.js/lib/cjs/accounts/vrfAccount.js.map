{"version":3,"file":"vrfAccount.js","sourceRoot":"","sources":["../../../src/accounts/vrfAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import * as errors from '../errors';\nimport * as types from '../generated';\nimport { vrfCloseAction } from '../generated';\nimport { SwitchboardProgram } from '../SwitchboardProgram';\nimport {\n  TransactionObject,\n  TransactionObjectOptions,\n} from '../TransactionObject';\n\nimport { Account, OnAccountChangeCallback } from './account';\nimport { OracleAccount } from './oracleAccount';\nimport { PermissionAccount } from './permissionAccount';\nimport { QueueAccount } from './queueAccount';\n\nimport * as anchor from '@coral-xyz/anchor';\nimport * as spl from '@solana/spl-token';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport {\n  Commitment,\n  Keypair,\n  ParsedTransactionWithMeta,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport { promiseWithTimeout } from '@switchboard-xyz/common';\n\n/**\n * Account holding a Verifiable Random Function result with a callback instruction for consuming on-chain pseudo-randomness.\n *\n * Data: {@linkcode types.VrfAccountData}\n * Result: [u8;32]\n */\nexport class VrfAccount extends Account<types.VrfAccountData> {\n  static accountName = 'VrfAccountData';\n\n  /**\n   * Returns the size of an on-chain {@linkcode VrfAccount}.\n   */\n  public readonly size = this.program.account.vrfAccountData.size;\n\n  /**\n   * Return a vrf account state initialized to the default values.\n   */\n  public static default(): types.VrfAccountData {\n    const buffer = Buffer.alloc(29058, 0);\n    types.VrfAccountData.discriminator.copy(buffer, 0);\n    return types.VrfAccountData.decode(buffer);\n  }\n\n  /** Load an existing VrfAccount with its current on-chain state */\n  public static async load(\n    program: SwitchboardProgram,\n    publicKey: PublicKey | string\n  ): Promise<[VrfAccount, types.VrfAccountData]> {\n    const account = new VrfAccount(\n      program,\n      typeof publicKey === 'string' ? new PublicKey(publicKey) : publicKey\n    );\n    const state = await account.loadData();\n    return [account, state];\n  }\n\n  /**\n   * Invoke a callback each time a VrfAccount's data has changed on-chain.\n   * @param callback - the callback invoked when the vrf state changes\n   * @param commitment - optional, the desired transaction finality. defaults to 'confirmed'\n   * @returns the websocket subscription id\n   */\n  onChange(\n    callback: OnAccountChangeCallback<types.VrfAccountData>,\n    commitment: Commitment = 'confirmed'\n  ): number {\n    return this.program.connection.onAccountChange(\n      this.publicKey,\n      accountInfo => callback(types.VrfAccountData.decode(accountInfo.data)),\n      commitment\n    );\n  }\n\n  /**\n   * Retrieve and decode the {@linkcode types.VrfAccountData} stored in this account.\n   */\n  async loadData(): Promise<types.VrfAccountData> {\n    const data = await types.VrfAccountData.fetch(this.program, this.publicKey);\n    if (data === null)\n      throw new errors.AccountNotFoundError('Vrf', this.publicKey);\n    return data;\n  }\n\n  /**\n   *  Creates a list of instructions that will produce a {@linkcode VrfAccount}.\n   *\n   *  _NOTE_: The transaction that includes these instructions should be signed by both\n   *  payer and vrfKeypair.\n   */\n  public static async createInstructions(\n    program: SwitchboardProgram,\n    payer: PublicKey,\n    params: VrfInitParams\n  ): Promise<[VrfAccount, TransactionObject]> {\n    program.verifyNewKeypair(params.vrfKeypair);\n    const vrfAccount = new VrfAccount(program, params.vrfKeypair.publicKey);\n    const size = program.account.vrfAccountData.size;\n\n    const escrow = program.mint.getAssociatedAddress(vrfAccount.publicKey);\n\n    const ixns = [\n      spl.createAssociatedTokenAccountInstruction(\n        payer,\n        escrow,\n        params.vrfKeypair.publicKey,\n        program.mint.address\n      ),\n      spl.createSetAuthorityInstruction(\n        escrow,\n        params.vrfKeypair.publicKey,\n        spl.AuthorityType.AccountOwner,\n        program.programState.publicKey\n      ),\n      SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: params.vrfKeypair.publicKey,\n        space: size,\n        lamports: await program.connection.getMinimumBalanceForRentExemption(\n          size\n        ),\n        programId: program.programId,\n      }),\n      types.vrfInit(\n        program,\n        {\n          params: {\n            stateBump: program.programState.bump,\n            callback: params.callback,\n          },\n        },\n        {\n          vrf: params.vrfKeypair.publicKey,\n          authority: params.authority ?? payer,\n          escrow,\n          oracleQueue: params.queueAccount.publicKey,\n          programState: program.programState.publicKey,\n          tokenProgram: spl.TOKEN_PROGRAM_ID,\n        }\n      ),\n    ];\n\n    return [\n      vrfAccount,\n      new TransactionObject(payer, ixns, [params.vrfKeypair]),\n    ];\n  }\n\n  /**\n   *  Produces a Switchboard {@linkcode VrfAccount}.\n   *\n   *  _NOTE_: program wallet is used to sign the transaction.\n   */\n  public static async create(\n    program: SwitchboardProgram,\n    params: VrfInitParams\n  ): Promise<[VrfAccount, string]> {\n    const [vrfAccount, vrfInitTxn] = await VrfAccount.createInstructions(\n      program,\n      program.walletPubkey,\n      params\n    );\n    const txnSignature = await program.signAndSend(vrfInitTxn);\n    return [vrfAccount, txnSignature];\n  }\n\n  public async requestRandomnessInstruction(\n    payer: PublicKey,\n    params: VrfRequestRandomnessParams,\n    options?: TransactionObjectOptions\n  ): Promise<TransactionObject> {\n    const vrf = params.vrf ?? (await this.loadData());\n    const queueAccount =\n      params.queueAccount ?? new QueueAccount(this.program, vrf.oracleQueue);\n    const queue = params.queue ?? (await queueAccount.loadData());\n\n    const [permissionAccount, permissionBump] = this.getPermissionAccount(\n      queueAccount.publicKey,\n      queue.authority\n    );\n\n    const requestRandomness = new TransactionObject(\n      payer,\n      [\n        types.vrfRequestRandomness(\n          this.program,\n          {\n            params: {\n              stateBump: this.program.programState.bump,\n              permissionBump,\n            },\n          },\n          {\n            authority: params.authority?.publicKey ?? payer,\n            vrf: this.publicKey,\n            oracleQueue: queueAccount.publicKey,\n            queueAuthority: queue.authority,\n            dataBuffer: queue.dataBuffer,\n            permission: permissionAccount.publicKey,\n            escrow: vrf.escrow,\n            payerWallet: params.payerTokenWallet,\n            payerAuthority: params.payerAuthority\n              ? params.payerAuthority.publicKey\n              : payer,\n            recentBlockhashes: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n            programState: this.program.programState.publicKey,\n            tokenProgram: TOKEN_PROGRAM_ID,\n          }\n        ),\n      ],\n      params.authority ? [params.authority] : [],\n      options\n    );\n\n    return requestRandomness;\n  }\n\n  public async requestRandomness(\n    params: VrfRequestRandomnessParams,\n    options?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const requestRandomness = await this.requestRandomnessInstruction(\n      this.program.walletPubkey,\n      params,\n      options\n    );\n    const txnSignature = await this.program.signAndSend(requestRandomness);\n    return txnSignature;\n  }\n\n  public proveAndVerifyInstructions(\n    params: VrfProveAndVerifyParams,\n    options?: TransactionObjectOptions,\n    numTxns = 40\n  ): Array<TransactionObject> {\n    const idx =\n      params.idx ??\n      params.vrf.builders.findIndex(builder =>\n        params.oraclePubkey.equals(builder.producer)\n      );\n    if (idx === -1) {\n      throw new Error('OracleNotFoundError');\n    }\n\n    const remainingAccounts = params.vrf.callback.accounts.slice(\n      0,\n      params.vrf.callback.accountsLen\n    );\n\n    const txns = Array.from(Array(numTxns).keys()).map(i => {\n      const proveIxn = types.vrfProveAndVerify(\n        this.program,\n        {\n          params: {\n            nonce: i,\n            stateBump: this.program.programState.bump,\n            idx: idx,\n            proof: new Uint8Array(),\n            proofEncoded: params.proof,\n            counter: params.counter ?? params.vrf.counter,\n          },\n        },\n        {\n          vrf: this.publicKey,\n          callbackPid: params.vrf.callback.programId,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          escrow: params.vrf.escrow,\n          programState: this.program.programState.publicKey,\n          oracle: params.oraclePubkey,\n          oracleAuthority: params.oracleAuthority,\n          oracleWallet: params.oracleTokenWallet,\n          instructionsSysvar: SYSVAR_INSTRUCTIONS_PUBKEY,\n        }\n      );\n      proveIxn.keys = proveIxn.keys.concat(remainingAccounts);\n\n      return new TransactionObject(this.program.walletPubkey, [proveIxn], [], {\n        computeUnitLimit: 1_400_000, // allow user to override\n        ...options,\n      });\n    });\n\n    return txns;\n  }\n\n  public async proveAndVerify(\n    params: Partial<VrfProveAndVerifyParams> & { skipPreflight?: boolean },\n    options?: TransactionObjectOptions,\n    numTxns = 40\n  ): Promise<Array<TransactionSignature>> {\n    const vrf = params.vrf ?? (await this.loadData());\n    const oraclePubkey = params.oraclePubkey ?? vrf.builders[0].producer;\n\n    let oracleTokenWallet = params.oracleTokenWallet;\n    let oracleAuthority = params.oracleAuthority;\n    if (!oracleTokenWallet || !oracleAuthority) {\n      const oracleAccount = new OracleAccount(this.program, oraclePubkey);\n      const oracle = await oracleAccount.loadData();\n      oracleTokenWallet = oracle.tokenAccount;\n      oracleAuthority = oracle.oracleAuthority;\n    }\n\n    const txns = this.proveAndVerifyInstructions(\n      {\n        vrf,\n        proof: params.proof ?? '',\n        oraclePubkey,\n        oracleTokenWallet,\n        oracleAuthority,\n      },\n      options,\n      numTxns\n    );\n\n    const txnSignatures = await this.program.signAndSendAll(txns, {\n      skipPreflight: params.skipPreflight ?? true,\n    });\n\n    return txnSignatures;\n  }\n\n  public setCallbackInstruction(\n    payer: PublicKey,\n    params: {\n      authority: Keypair | PublicKey;\n      callback: Callback;\n    }\n  ): TransactionObject {\n    const authorityPubkey =\n      params.authority instanceof PublicKey\n        ? params.authority\n        : params.authority.publicKey;\n\n    return new TransactionObject(\n      payer,\n      [\n        types.vrfSetCallback(\n          this.program,\n          {\n            params: {\n              callback: params.callback,\n            },\n          },\n          {\n            vrf: this.publicKey,\n            authority: authorityPubkey,\n          }\n        ),\n      ],\n      params.authority instanceof Keypair ? [params.authority] : []\n    );\n  }\n\n  public async setCallback(params: {\n    authority: Keypair | PublicKey;\n    callback: Callback;\n  }): Promise<TransactionSignature> {\n    const setCallbackTxn = this.setCallbackInstruction(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(setCallbackTxn);\n    return txnSignature;\n  }\n\n  /** Return parsed transactions for a VRF request */\n  public async getCallbackTransactions(\n    requestSlot?: anchor.BN,\n    txnLimit = 50\n  ): Promise<Array<ParsedTransactionWithMeta>> {\n    const slot =\n      requestSlot ?? (await this.loadData()).currentRound.requestSlot;\n    // TODO: Add options and allow getting signatures by slot\n    const transactions = await this.program.connection.getSignaturesForAddress(\n      this.publicKey,\n      { limit: txnLimit, minContextSlot: slot.toNumber() },\n      'confirmed'\n    );\n    const signatures = transactions.map(txn => txn.signature);\n    const parsedTransactions =\n      await this.program.connection.getParsedTransactions(\n        signatures,\n        'confirmed'\n      );\n\n    const callbackTransactions: ParsedTransactionWithMeta[] = [];\n\n    for (const txn of parsedTransactions) {\n      if (txn === null) {\n        continue;\n      }\n\n      const logs = txn.meta?.logMessages?.join('\\n') ?? '';\n      if (logs.includes('Invoking callback')) {\n        callbackTransactions.push(txn);\n      }\n    }\n\n    return callbackTransactions;\n  }\n\n  public getAccounts(params: {\n    queueAccount: QueueAccount;\n    queueAuthority: PublicKey;\n  }) {\n    const queueAccount = params.queueAccount;\n\n    const [permissionAccount, permissionBump] = this.getPermissionAccount(\n      queueAccount.publicKey,\n      params.queueAuthority\n    );\n\n    return {\n      queueAccount,\n      permissionAccount,\n      permissionBump,\n    };\n  }\n\n  public async fetchAccounts(\n    _vrf?: types.VrfAccountData,\n    _queueAccount?: QueueAccount,\n    _queue?: types.OracleQueueAccountData\n  ): Promise<VrfAccounts> {\n    const vrf = _vrf ?? (await this.loadData());\n\n    const queueAccount =\n      _queueAccount ?? new QueueAccount(this.program, vrf.oracleQueue);\n    const queue = _queue ?? (await queueAccount.loadData());\n\n    const { permissionAccount, permissionBump } = this.getAccounts({\n      queueAccount,\n      queueAuthority: queue.authority,\n    });\n    const permission = await permissionAccount.loadData();\n\n    const vrfEscrow = await this.program.mint.getAccount(vrf.escrow);\n    if (!vrfEscrow) {\n      throw new errors.AccountNotFoundError('Vrf Escrow', vrf.escrow);\n    }\n    const vrfEscrowBalance: number = this.program.mint.fromTokenAmount(\n      vrfEscrow.amount\n    );\n\n    return {\n      vrf: { publicKey: this.publicKey, data: vrf },\n      queue: {\n        publicKey: queueAccount.publicKey,\n        data: queue,\n      },\n      permission: {\n        publicKey: permissionAccount.publicKey,\n        bump: permissionBump,\n        data: permission,\n      },\n      escrow: {\n        publicKey: vrf.escrow,\n        data: vrfEscrow,\n        balance: vrfEscrowBalance,\n      },\n    };\n  }\n\n  public async toAccountsJSON(\n    _vrf?: types.VrfAccountData,\n    _queueAccount?: QueueAccount,\n    _queue?: types.OracleQueueAccountData\n  ): Promise<VrfAccountsJSON> {\n    const accounts = await this.fetchAccounts(_vrf, _queueAccount, _queue);\n\n    return {\n      publicKey: this.publicKey,\n      ...accounts.vrf.data.toJSON(),\n      queue: {\n        publicKey: accounts.queue.publicKey,\n        ...accounts.queue.data.toJSON(),\n      },\n      permission: {\n        publicKey: accounts.permission.publicKey,\n        ...accounts.permission.data.toJSON(),\n      },\n      escrow: {\n        publicKey: accounts.escrow.publicKey,\n        balance: accounts.escrow.balance,\n      },\n    };\n  }\n\n  public async requestAndAwaitResult(\n    params: { vrf?: types.VrfAccountData } & (\n      | VrfRequestRandomnessParams\n      | {\n          requestFunction: (...args: any[]) => Promise<TransactionSignature>;\n        }\n    ),\n    timeout = 30000,\n    options?: TransactionObjectOptions\n  ): Promise<[types.VrfAccountData, TransactionSignature]> {\n    const vrf = params?.vrf ?? (await this.loadData());\n    const currentRoundOpenSlot = vrf.currentRound.requestSlot;\n\n    let ws: number | undefined = undefined;\n\n    const closeWebsocket = async () => {\n      if (ws !== undefined) {\n        await this.program.connection.removeAccountChangeListener(ws);\n        ws = undefined;\n      }\n    };\n\n    const statePromise: Promise<types.VrfAccountData> = promiseWithTimeout(\n      timeout,\n      new Promise(\n        (\n          resolve: (result: types.VrfAccountData) => void,\n          reject: (reason: string) => void\n        ) => {\n          ws = this.onChange(vrf => {\n            if (vrf.currentRound.requestSlot.gt(currentRoundOpenSlot)) {\n              if (\n                vrf.status.kind ===\n                  types.VrfStatus.StatusCallbackSuccess.kind ||\n                vrf.status.kind === types.VrfStatus.StatusVerified.kind\n              ) {\n                resolve(vrf);\n              }\n              if (\n                vrf.status.kind === types.VrfStatus.StatusVerifyFailure.kind\n              ) {\n                reject(\n                  `Vrf failed to verify with status ${vrf.status.kind} (${vrf.status.discriminator})`\n                );\n              }\n            }\n          });\n        }\n      )\n    ).finally(async () => {\n      await closeWebsocket();\n    });\n\n    let requestRandomnessSignature: string | undefined = undefined;\n    if ('requestFunction' in params) {\n      requestRandomnessSignature = await params\n        .requestFunction()\n        .catch(async error => {\n          await closeWebsocket();\n          throw new Error(`Failed to call requestRandomness, ${error}`);\n        });\n    } else {\n      requestRandomnessSignature = await this.requestRandomness(\n        params,\n        options\n      ).catch(async error => {\n        await closeWebsocket();\n        throw new Error(`Failed to call requestRandomness, ${error}`);\n      });\n    }\n\n    const state = await statePromise;\n\n    await closeWebsocket();\n\n    return [state, requestRandomnessSignature];\n  }\n\n  /**\n   * Await for the next vrf result\n   *\n   * @param roundId - optional, the id associated with the VRF round to watch. If not provided the current round Id will be used.\n   * @param timeout - the number of milliseconds to wait for the round to close\n   *\n   * @throws {string} when the timeout interval is exceeded or when the latestConfirmedRound.roundOpenSlot exceeds the target roundOpenSlot\n   */\n  public async nextResult(\n    roundId?: anchor.BN,\n    timeout = 30000\n  ): Promise<VrfResult> {\n    let id: anchor.BN;\n    if (roundId) {\n      id = roundId;\n    } else {\n      const vrf = await this.loadData();\n      if (vrf.status.kind === 'StatusVerifying') {\n        id = vrf.counter;\n      } else {\n        // wait for the next round\n        id = vrf.counter.add(new anchor.BN(1));\n      }\n    }\n    let ws: number | undefined;\n\n    const closeWebsocket = async () => {\n      if (ws !== undefined) {\n        await this.program.connection.removeAccountChangeListener(ws);\n        ws = undefined;\n      }\n    };\n\n    let result: VrfResult;\n    try {\n      result = await promiseWithTimeout(\n        timeout,\n        new Promise(\n          (\n            resolve: (result: VrfResult) => void,\n            reject: (reason: string) => void\n          ) => {\n            ws = this.onChange(vrf => {\n              if (vrf.counter.gt(id)) {\n                reject(`Current counter is higher than requested roundId`);\n              }\n              if (vrf.counter.eq(id)) {\n                switch (vrf.status.kind) {\n                  case 'StatusCallbackSuccess': {\n                    resolve({\n                      success: true,\n                      result: new Uint8Array(vrf.currentRound.result),\n                      status: vrf.status,\n                    });\n                    break;\n                  }\n                  case 'StatusVerifyFailure': {\n                    resolve({\n                      success: false,\n                      result: new Uint8Array(),\n                      status: vrf.status,\n                    });\n                    break;\n                  }\n                }\n              }\n            });\n          }\n        )\n      );\n    } finally {\n      await closeWebsocket();\n    }\n\n    await closeWebsocket();\n\n    return result;\n  }\n\n  async closeAccountInstruction(\n    payer: PublicKey,\n    params?: VrfCloseParams\n  ): Promise<TransactionObject> {\n    const vrfLite = await this.loadData();\n    const queueAccount =\n      params?.queueAccount ??\n      new QueueAccount(this.program, vrfLite.oracleQueue);\n    const queueAuthority =\n      params?.queueAuthority ?? (await queueAccount.loadData()).authority;\n    const [permissionAccount, permissionBump] = this.getPermissionAccount(\n      queueAccount.publicKey,\n      queueAuthority\n    );\n    const [escrowDest, escrowInit] =\n      await this.program.mint.getOrCreateWrappedUserInstructions(payer, {\n        fundUpTo: 0,\n      });\n    const vrfClose = new TransactionObject(\n      payer,\n      [\n        vrfCloseAction(\n          this.program,\n          {\n            params: {\n              stateBump: this.program.programState.bump,\n              permissionBump: permissionBump,\n            },\n          },\n          {\n            vrf: this.publicKey,\n            permission: permissionAccount.publicKey,\n            authority: vrfLite.authority,\n            oracleQueue: queueAccount.publicKey,\n            queueAuthority,\n            programState: this.program.programState.publicKey,\n            escrow: vrfLite.escrow,\n            solDest: params?.destination ?? payer,\n            escrowDest: escrowDest,\n            tokenProgram: TOKEN_PROGRAM_ID,\n          }\n        ),\n      ],\n      params?.authority ? [params.authority] : []\n    );\n\n    if (escrowInit) {\n      return escrowInit.combine(vrfClose);\n    }\n\n    return vrfClose;\n  }\n\n  async closeAccount(params?: VrfCloseParams): Promise<TransactionSignature> {\n    const transaction = await this.closeAccountInstruction(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(transaction, {\n      skipPreflight: true,\n    });\n    return txnSignature;\n  }\n\n  public getPermissionAccount(\n    queuePubkey: PublicKey,\n    queueAuthority: PublicKey\n  ): [PermissionAccount, number] {\n    return PermissionAccount.fromSeed(\n      this.program,\n      queueAuthority,\n      queuePubkey,\n      this.publicKey\n    );\n  }\n}\n\nexport interface VrfCloseParams {\n  destination?: PublicKey;\n  authority?: Keypair;\n  queueAccount?: QueueAccount;\n  queueAuthority?: PublicKey;\n}\n\nexport interface VrfResult {\n  success: boolean;\n  result: Uint8Array;\n  status: types.VrfStatusKind;\n}\n\n/**\n * Interface for a VRF callback.\n */\nexport interface Callback {\n  programId: PublicKey;\n  accounts: Array<anchor.web3.AccountMeta>;\n  ixData: Buffer;\n}\n\n/**\n * Parameters for a VrfInit request.\n */\nexport interface VrfInitParams {\n  /**\n   *  Keypair to use for the vrf account\n   */\n  vrfKeypair: anchor.web3.Keypair;\n  queueAccount: QueueAccount;\n  /**\n   * Callback function that is invoked when a new randomness value is produced.\n   */\n  callback: Callback;\n  /**\n   *  Optional authority for the resulting {@linkcode VrfAccount}. If not provided,\n   *  the payer will default to the VRF authority.\n   */\n  authority?: PublicKey;\n}\n\n/**\n * Parameters for a VrfSetCallback request.\n */\nexport interface VrfSetCallbackParams {\n  authority?: Keypair;\n  callback: Callback;\n  vrf: types.VrfAccountData;\n}\n\nexport interface VrfProveAndVerifyParams {\n  vrf: types.VrfAccountData;\n  counter?: anchor.BN;\n  idx?: number;\n  proof: string;\n  oraclePubkey: PublicKey;\n  oracleTokenWallet: PublicKey;\n  oracleAuthority: PublicKey;\n}\n\nexport interface VrfRequestRandomnessParams {\n  authority?: Keypair;\n  payerTokenWallet: PublicKey;\n  payerAuthority?: Keypair;\n  queue?: types.OracleQueueAccountData;\n  queueAccount?: QueueAccount;\n  vrf?: types.VrfAccountData;\n}\n\nexport type VrfAccountsJSON = Omit<types.VrfAccountDataJSON, 'escrow'> & {\n  publicKey: PublicKey;\n  queue: types.OracleQueueAccountDataJSON & { publicKey: PublicKey };\n  permission: types.PermissionAccountDataJSON & { publicKey: PublicKey };\n  escrow: { publicKey: PublicKey; balance: number };\n};\n\nexport type VrfAccounts = {\n  vrf: {\n    publicKey: PublicKey;\n    data: types.VrfAccountData;\n  };\n  queue: {\n    publicKey: PublicKey;\n    data: types.OracleQueueAccountData;\n  };\n  permission: {\n    publicKey: PublicKey;\n    bump: number;\n    data: types.PermissionAccountData;\n  };\n  escrow: {\n    publicKey: PublicKey;\n    data: spl.Account;\n    balance: number;\n  };\n};\n"]}
{"version":3,"file":"programStateAccount.js","sourceRoot":"","sources":["../../../src/accounts/programStateAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import * as errors from '../errors';\nimport * as types from '../generated';\nimport { Mint } from '../mint';\nimport { SwitchboardProgram } from '../SwitchboardProgram';\nimport { TransactionObject } from '../TransactionObject';\n\nimport { Account } from './account';\n\nimport * as anchor from '@coral-xyz/anchor';\nimport * as spl from '@solana/spl-token-v2';\nimport {\n  AccountInfo,\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n  TransactionSignature,\n} from '@solana/web3.js';\n\n/**\n * Account type representing Switchboard global program state.\n *\n * Data: {@linkcode types.SbState}\n */\nexport class ProgramStateAccount extends Account<types.SbState> {\n  static accountName = 'SbState';\n\n  public static size = 1128;\n\n  /**\n   * @return account size of the global {@linkcode ProgramStateAccount}.\n   */\n  public readonly size = this.program.account.sbState.size;\n\n  /**\n   * Return a program state account state initialized to the default values.\n   */\n  public static default(): types.SbState {\n    const buffer = Buffer.alloc(ProgramStateAccount.size, 0);\n    types.SbState.discriminator.copy(buffer, 0);\n    return types.SbState.decode(buffer);\n  }\n\n  /**\n   * Create a mock account info for a given program state config. Useful for test integrations.\n   */\n  public static createMock(\n    programId: PublicKey,\n    data: Partial<types.SbState>,\n    options?: {\n      lamports?: number;\n      rentEpoch?: number;\n    }\n  ): AccountInfo<Buffer> {\n    const fields: types.SbStateFields = {\n      ...ProgramStateAccount.default(),\n      ...data,\n      // any cleanup actions here\n    };\n    const state = new types.SbState(fields);\n\n    const buffer = Buffer.alloc(ProgramStateAccount.size, 0);\n    types.SbState.discriminator.copy(buffer, 0);\n    types.SbState.layout.encode(state, buffer, 8);\n\n    return {\n      executable: false,\n      owner: programId,\n      lamports: options?.lamports ?? 1 * LAMPORTS_PER_SOL,\n      data: buffer,\n      rentEpoch: options?.rentEpoch ?? 0,\n    };\n  }\n\n  /** Load the ProgramStateAccount with its current on-chain state */\n  public static async load(\n    program: SwitchboardProgram,\n    publicKey: PublicKey | string\n  ): Promise<[ProgramStateAccount, types.SbState]> {\n    const account = new ProgramStateAccount(\n      program,\n      typeof publicKey === 'string' ? new PublicKey(publicKey) : publicKey\n    );\n    const state = await account.loadData();\n    return [account, state];\n  }\n\n  /**\n   * Retrieve and decode the {@linkcode types.SbState} stored in this account.\n   */\n  public async loadData(): Promise<types.SbState> {\n    const data = await types.SbState.fetch(this.program, this.publicKey);\n    if (data === null)\n      throw new errors.AccountNotFoundError('Program State', this.publicKey);\n    return data;\n  }\n\n  /**\n   * Retrieves the {@linkcode ProgramStateAccount}, creates it if it doesn't exist;\n   */\n  static async getOrCreate(\n    program: SwitchboardProgram,\n    params: ProgramInitParams = {\n      mint: Mint.native,\n      daoMint: Mint.native,\n    }\n  ): Promise<[ProgramStateAccount, number, TransactionSignature | undefined]> {\n    const [account, bump, txn] =\n      await ProgramStateAccount.getOrCreateInstructions(\n        program,\n        program.walletPubkey,\n        params\n      );\n\n    if (txn) {\n      const txnSignature = await program.signAndSend(txn);\n      return [account, bump, txnSignature];\n    }\n\n    return [account, bump, undefined];\n  }\n\n  static async getOrCreateInstructions(\n    program: SwitchboardProgram,\n    payer: PublicKey,\n    params: ProgramInitParams = {\n      mint: Mint.native,\n      daoMint: Mint.native,\n    }\n  ): Promise<[ProgramStateAccount, number, TransactionObject | undefined]> {\n    const [account, bump] = ProgramStateAccount.fromSeed(program);\n\n    try {\n      await account.loadData();\n      return [account, bump, undefined];\n    } catch (e) {\n      const ixns: TransactionInstruction[] = [];\n      const signers: Keypair[] = [];\n\n      let mint = params.mint;\n      if (!mint) {\n        const mintKeypair = Keypair.generate();\n        mint = mintKeypair.publicKey;\n        signers.push(mintKeypair);\n      }\n      const daoMint = params.daoMint ?? mint;\n      const vaultKeypair = params.vaultKeypair ?? Keypair.generate();\n      signers.push(vaultKeypair);\n\n      // load the mint\n      let splMint: spl.Mint;\n      try {\n        // try to load mint if it exists\n        splMint = await spl.getMint(program.connection, mint);\n      } catch {\n        // create new mint\n        ixns.push(\n          SystemProgram.createAccount({\n            fromPubkey: payer,\n            newAccountPubkey: vaultKeypair.publicKey,\n            space: spl.MintLayout.span,\n            lamports:\n              await program.connection.getMinimumBalanceForRentExemption(\n                spl.MintLayout.span\n              ),\n            programId: spl.TOKEN_PROGRAM_ID,\n          }),\n          spl.createInitializeMintInstruction(mint, 9, payer, payer)\n        );\n        splMint = {\n          address: mint,\n          mintAuthority: payer,\n          supply: BigInt('100000000000000000'),\n          decimals: 9,\n          isInitialized: true,\n          freezeAuthority: payer,\n          tlvData: Buffer.from(''),\n        };\n      }\n\n      // create the vault\n      ixns.push(\n        SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: vaultKeypair.publicKey,\n          space: spl.AccountLayout.span,\n          lamports: await program.connection.getMinimumBalanceForRentExemption(\n            spl.AccountLayout.span\n          ),\n          programId: spl.TOKEN_PROGRAM_ID,\n        }),\n        spl.createInitializeAccountInstruction(\n          vaultKeypair.publicKey,\n          splMint.address,\n          payer\n        )\n      );\n\n      // if authorized, mint tokens to vault\n      if (splMint.mintAuthority?.equals(payer)) {\n        ixns.push(\n          spl.createMintToInstruction(\n            splMint.address,\n            vaultKeypair.publicKey,\n            payer,\n            BigInt('100000000000000000')\n          )\n        );\n      }\n\n      ixns.push(\n        types.programInit(\n          program,\n          { params: { stateBump: bump } },\n          {\n            state: account.publicKey,\n            authority: program.wallet.publicKey,\n            payer: program.wallet.publicKey,\n            tokenMint: splMint.address,\n            vault: vaultKeypair.publicKey,\n            systemProgram: SystemProgram.programId,\n            tokenProgram: spl.TOKEN_PROGRAM_ID,\n            daoMint: daoMint,\n          }\n        )\n      );\n\n      const programInit = new TransactionObject(payer, ixns, signers);\n\n      return [account, bump, programInit];\n    }\n  }\n\n  /**\n   * Finds the {@linkcode ProgramStateAccount} from the static seed from which it was generated.\n   * @return ProgramStateAccount and PDA bump tuple.\n   */\n  public static fromSeed(\n    program: SwitchboardProgram\n  ): [ProgramStateAccount, number] {\n    const [publicKey, bump] = PublicKey.findProgramAddressSync(\n      [Buffer.from('STATE')],\n      program.programId\n    );\n    return [new ProgramStateAccount(program, publicKey), bump];\n  }\n\n  /**\n   * Transfer N tokens from the program vault to a specified account.\n   * @param to The recipient of the vault tokens.\n   * @param authority The vault authority required to sign the transfer tx.\n   * @param params specifies the amount to transfer.\n   * @return TransactionSignature\n   */\n  public static async vaultTransfer(\n    program: SwitchboardProgram,\n    to: PublicKey,\n    authority: anchor.web3.Keypair,\n    params: { stateBump: number; amount: anchor.BN }\n  ): Promise<TransactionSignature> {\n    const [account, bump] = ProgramStateAccount.fromSeed(program);\n    const vault = (await account.loadData()).tokenVault;\n\n    const vaultTransfer = new TransactionObject(\n      program.walletPubkey,\n      [\n        types.vaultTransfer(\n          program,\n          { params: { stateBump: bump, amount: params.amount } },\n          {\n            state: account.publicKey,\n            to,\n            vault,\n            authority: authority.publicKey,\n            tokenProgram: spl.TOKEN_PROGRAM_ID,\n          }\n        ),\n      ],\n      []\n    );\n    const txnSignature = await program.signAndSend(vaultTransfer);\n    return txnSignature;\n  }\n}\n\nexport interface ProgramInitParams {\n  mint?: PublicKey;\n  daoMint?: PublicKey;\n  vaultKeypair?: Keypair;\n}\n"]}
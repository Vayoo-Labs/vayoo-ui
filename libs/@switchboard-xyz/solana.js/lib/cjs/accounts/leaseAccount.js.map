{"version":3,"file":"leaseAccount.js","sourceRoot":"","sources":["../../../src/accounts/leaseAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import * as errors from '../errors';\nimport * as types from '../generated';\nimport { SwitchboardProgram } from '../SwitchboardProgram';\nimport { TransactionObject } from '../TransactionObject';\n\nimport { Account } from './account';\nimport { AggregatorAccount } from './aggregatorAccount';\nimport { JobAccount } from './jobAccount';\nimport { QueueAccount } from './queueAccount';\n\nimport * as spl from '@solana/spl-token-v2';\nimport {\n  AccountInfo,\n  AccountMeta,\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  SystemProgram,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport { BN, OracleJob } from '@switchboard-xyz/common';\n\n/**\n * Account type representing an {@linkcode AggregatorAccount}'s pre-funded escrow used to reward {@linkcode OracleAccount}'s for responding to open round requests.\n *\n * Data: {@linkcode types.LeaseAccountData}\n */\nexport class LeaseAccount extends Account<types.LeaseAccountData> {\n  static accountName = 'LeaseAccountData';\n\n  public static size = 453;\n\n  /**\n   * Get the size of an {@linkcode LeaseAccount} on-chain.\n   */\n  public size = this.program.account.leaseAccountData.size;\n\n  /**\n   * Return a lease account state initialized to the default values.\n   */\n  public static default(): types.LeaseAccountData {\n    const buffer = Buffer.alloc(LeaseAccount.size, 0);\n    types.LeaseAccountData.discriminator.copy(buffer, 0);\n    return types.LeaseAccountData.decode(buffer);\n  }\n\n  /**\n   * Create a mock account info for a given lease config. Useful for test integrations.\n   */\n  public static createMock(\n    programId: PublicKey,\n    data: Partial<types.LeaseAccountData>,\n    options?: {\n      lamports?: number;\n      rentEpoch?: number;\n    }\n  ): AccountInfo<Buffer> {\n    const fields: types.LeaseAccountDataFields = {\n      ...LeaseAccount.default(),\n      ...data,\n      // any cleanup actions here\n    };\n    const state = new types.LeaseAccountData(fields);\n\n    const buffer = Buffer.alloc(LeaseAccount.size, 0);\n    types.LeaseAccountData.discriminator.copy(buffer, 0);\n    types.LeaseAccountData.layout.encode(state, buffer, 8);\n\n    return {\n      executable: false,\n      owner: programId,\n      lamports: options?.lamports ?? 1 * LAMPORTS_PER_SOL,\n      data: buffer,\n      rentEpoch: options?.rentEpoch ?? 0,\n    };\n  }\n\n  /** Load an existing LeaseAccount with its current on-chain state */\n  public static async load(\n    program: SwitchboardProgram,\n    queue: PublicKey | string,\n    aggregator: PublicKey | string\n  ): Promise<[LeaseAccount, types.LeaseAccountData, number]> {\n    const [account, bump] = LeaseAccount.fromSeed(\n      program,\n      typeof queue === 'string' ? new PublicKey(queue) : queue,\n      typeof aggregator === 'string' ? new PublicKey(aggregator) : aggregator\n    );\n    const state = await account.loadData();\n    return [account, state, bump];\n  }\n\n  /**\n   * Loads a LeaseAccount from the expected PDA seed format.\n   * @param program The Switchboard program for the current connection.\n   * @param queue The queue pubkey to be incorporated into the account seed.\n   * @param aggregator The aggregator pubkey to be incorporated into the account seed.\n   * @return LeaseAccount and PDA bump.\n   */\n  public static fromSeed(\n    program: SwitchboardProgram,\n    queue: PublicKey,\n    aggregator: PublicKey\n  ): [LeaseAccount, number] {\n    const [publicKey, bump] = PublicKey.findProgramAddressSync(\n      [Buffer.from('LeaseAccountData'), queue.toBytes(), aggregator.toBytes()],\n      program.programId\n    );\n    return [new LeaseAccount(program, publicKey), bump];\n  }\n\n  /**\n   * Retrieve and decode the {@linkcode types.LeaseAccountData} stored in this account.\n   */\n  public async loadData(): Promise<types.LeaseAccountData> {\n    const data = await types.LeaseAccountData.fetch(\n      this.program,\n      this.publicKey\n    );\n    if (data === null)\n      throw new errors.AccountNotFoundError('Lease', this.publicKey);\n    return data;\n  }\n\n  /**\n   * Creates instructions to initialize a LeaseAccount and optionally funds it with wrapped tokens.\n   *\n   * @param program The SwitchboardProgram instance.\n   * @param payer The PublicKey of the account that will pay for the transaction fees.\n   * @param params Lease initialization parameters including:\n   *   - aggregatorAccount (required): The AggregatorAccount to be used.\n   *   - queueAccount (required): The QueueAccount to be used.\n   *   - jobAuthorities (optional): Array of PublicKey for job authorities.\n   *   - jobPubkeys (optional): Array of PublicKey for job pubkeys.\n   *   - withdrawAuthority (optional): The PublicKey for the account that has permission to withdraw funds.\n   *\n   * @return A Promise that resolves to a tuple containing the LeaseAccount and the corresponding TransactionObject.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import { LeaseAccount } from '@switchboard-xyz/solana.js';\n   * const [leaseAccount, leaseInitTxn] = await LeaseAccount.createInstructions(program, payer, {\n   *   queueAccount,\n   *   aggregatorAccount,\n   *   fundAmount: 1,\n   *   funderAuthority: null,\n   *   funderTokenWallet: null,\n   *   disableWrap: false,\n   *   withdrawAuthority: null,\n   *   jobPubkeys: null,\n   *   jobAuthorities: null,\n   * });\n   * const leaseInitSignature = await program.signAndSend(leaseInitTxn);\n   * const lease = await leaseAccount.loadData();\n   * ```\n   */\n  static async createInstructions(\n    program: SwitchboardProgram,\n    payer: PublicKey,\n    params: LeaseInitParams\n  ): Promise<[LeaseAccount, TransactionObject]> {\n    const txns: Array<TransactionObject> = [];\n    const loadAmount = params.fundAmount ?? 0;\n    const loadTokenAmountBN = program.mint.toTokenAmountBN(loadAmount);\n\n    const owner = params.funderAuthority\n      ? params.funderAuthority.publicKey\n      : payer;\n\n    let funderTokenWallet: PublicKey;\n    if (params.disableWrap === true) {\n      funderTokenWallet =\n        params.funderTokenWallet ?? program.mint.getAssociatedAddress(owner);\n    } else {\n      let tokenTxn: TransactionObject | undefined;\n      // now we need to wrap some funds\n      if (params.funderTokenWallet) {\n        funderTokenWallet = params.funderTokenWallet;\n        tokenTxn = await program.mint.wrapInstructions(\n          payer,\n          {\n            fundUpTo: params.fundAmount ?? 0,\n          },\n          params.funderAuthority\n        );\n      } else {\n        [funderTokenWallet, tokenTxn] =\n          await program.mint.getOrCreateWrappedUserInstructions(\n            payer,\n            { fundUpTo: params.fundAmount ?? 0 },\n            params.funderAuthority\n          );\n      }\n\n      if (tokenTxn) {\n        txns.push(tokenTxn);\n      }\n    }\n\n    const [leaseAccount, leaseBump] = LeaseAccount.fromSeed(\n      program,\n      params.queueAccount.publicKey,\n      params.aggregatorAccount.publicKey\n    );\n\n    const escrow = program.mint.getAssociatedAddress(leaseAccount.publicKey);\n    const escrowBalance = await program.mint.getAssociatedBalance(\n      leaseAccount.publicKey\n    );\n\n    // load jobPubkeys and authorities ONLY if undefined\n    // we need to allow empty arrays for initial job creation or else loading aggregator will fail\n    let jobPubkeys = params.jobPubkeys;\n    let jobAuthorities = params.jobAuthorities;\n    if (jobPubkeys === undefined || jobAuthorities === undefined) {\n      const aggregator = await params.aggregatorAccount.loadData();\n      jobPubkeys = aggregator.jobPubkeysData.slice(\n        0,\n        aggregator.jobPubkeysSize\n      );\n      const jobs = await params.aggregatorAccount.loadJobs(aggregator);\n      jobAuthorities = jobs.map(j => j.state.authority);\n    }\n\n    const wallets = LeaseAccount.getWallets(\n      jobAuthorities ?? [],\n      program.mint.address\n    );\n    const walletBumps = new Uint8Array(wallets.map(w => w.bump));\n\n    const remainingAccounts: Array<AccountMeta> = (jobPubkeys ?? [])\n      .concat(wallets.map(w => w.publicKey))\n      .map(pubkey => {\n        return { isSigner: false, isWritable: true, pubkey };\n      });\n\n    const createTokenAccountIxn = spl.createAssociatedTokenAccountInstruction(\n      payer,\n      escrow,\n      leaseAccount.publicKey,\n      program.mint.address\n    );\n    const leaseInitIxn = types.leaseInit(\n      program,\n      {\n        params: {\n          loadAmount: loadTokenAmountBN,\n          withdrawAuthority: params.withdrawAuthority ?? payer,\n          leaseBump: leaseBump,\n          stateBump: program.programState.bump,\n          walletBumps: walletBumps,\n        },\n      },\n      {\n        lease: leaseAccount.publicKey,\n        queue: params.queueAccount.publicKey,\n        aggregator: params.aggregatorAccount.publicKey,\n        payer: payer,\n        systemProgram: SystemProgram.programId,\n        tokenProgram: spl.TOKEN_PROGRAM_ID,\n        funder: funderTokenWallet,\n        owner: owner,\n        escrow: escrow,\n        programState: program.programState.publicKey,\n        mint: program.mint.address,\n      }\n    );\n    leaseInitIxn.keys.push(...remainingAccounts);\n\n    txns.push(\n      new TransactionObject(\n        payer,\n        escrowBalance === null // lease might already exist if account was closed and re-opened\n          ? [createTokenAccountIxn, leaseInitIxn]\n          : [leaseInitIxn],\n        params.funderAuthority ? [params.funderAuthority] : []\n      )\n    );\n\n    const packed = TransactionObject.pack(txns);\n    if (packed.length > 1) {\n      throw new Error(`Failed to pack transactions into a single transactions`);\n    }\n\n    return [leaseAccount, packed[0]];\n  }\n\n  /**\n   * Creates a LeaseAccount and optionally funds it with wrapped tokens.\n   *\n   * @param program The SwitchboardProgram instance.\n   * @param payer The PublicKey of the account that will pay for the transaction fees.\n   * @param params Lease initialization parameters including:\n   *   - aggregatorAccount (required): The AggregatorAccount to be used.\n   *   - queueAccount (required): The QueueAccount to be used.\n   *   - jobAuthorities (optional): Array of PublicKey for job authorities.\n   *   - jobPubkeys (optional): Array of PublicKey for job pubkeys.\n   *   - withdrawAuthority (optional): The PublicKey for the account that has permission to withdraw funds.\n   *\n   * @return A Promise that resolves to a tuple containing the LeaseAccount and the corresponding TransactionObject.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import { LeaseAccount } from '@switchboard-xyz/solana.js';\n   * const [leaseAccount, leaseInitSignature] = await LeaseAccount.create(program, {\n   *   queueAccount,\n   *   aggregatorAccount,\n   *   fundAmount: 1,\n   *   funderAuthority: null,\n   *   funderTokenWallet: null,\n   *   disableWrap: false,\n   *   withdrawAuthority: null,\n   *   jobPubkeys: null,\n   *   jobAuthorities: null,\n   * });\n   * const lease = await leaseAccount.loadData();\n   * ```\n   */\n  public static async create(\n    program: SwitchboardProgram,\n    params: LeaseInitParams\n  ): Promise<[LeaseAccount, TransactionSignature]> {\n    const [leaseAccount, transaction] = await LeaseAccount.createInstructions(\n      program,\n      program.walletPubkey,\n      params\n    );\n\n    const signature = await program.signAndSend(transaction);\n    return [leaseAccount, signature];\n  }\n\n  /**\n   * Fetches the balance of a Lease escrow in decimal format.\n   *\n   * @param escrow (optional) The PublicKey of the escrow account. If not provided, the associated escrow account for the current LeaseAccount will be used.\n   *\n   * @return A Promise that resolves to the escrow balance as a number in decimal format.\n   *\n   * @throws AccountNotFoundError If the Lease escrow account is not found.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * const leaseEscrowBalance = await leaseAccount.fetchBalance();\n   * console.log(\"Lease escrow balance:\", leaseEscrowBalance);\n   * ```\n   */\n  public async fetchBalance(escrow?: PublicKey): Promise<number> {\n    const escrowPubkey =\n      escrow ?? this.program.mint.getAssociatedAddress(this.publicKey);\n    const escrowBalance = await this.program.mint.fetchBalance(escrowPubkey);\n    if (escrowBalance === null) {\n      throw new errors.AccountNotFoundError('Lease Escrow', escrowPubkey);\n    }\n    return escrowBalance;\n  }\n\n  /**\n   * Fetches the balance of a Lease escrow in the raw token amount using the bn.js format.\n   *\n   * @param escrow (optional) The PublicKey of the escrow account. If not provided, the associated escrow account for the current LeaseAccount will be used.\n   *\n   * @return A Promise that resolves to the escrow balance as a BN instance.\n   *\n   * @throws AccountNotFoundError If the Lease escrow account is not found.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * const leaseEscrowBalanceBN = await leaseAccount.fetchBalanceBN();\n   * console.log(\"Lease escrow balance:\", leaseEscrowBalanceBN.toString());\n   * ```\n   */\n  public async fetchBalanceBN(escrow?: PublicKey): Promise<BN> {\n    const escrowPubkey =\n      escrow ?? this.program.mint.getAssociatedAddress(this.publicKey);\n    const escrowBalance = await this.program.mint.fetchBalanceBN(escrowPubkey);\n    if (escrowBalance === null) {\n      throw new errors.AccountNotFoundError('Lease Escrow', escrowPubkey);\n    }\n    return escrowBalance;\n  }\n\n  public async extendInstruction(\n    payer: PublicKey,\n    params: LeaseExtendParams\n  ): Promise<TransactionObject> {\n    const owner = params.funderAuthority\n      ? params.funderAuthority.publicKey\n      : payer;\n\n    const funderTokenWallet =\n      params.funderTokenWallet ?? this.program.mint.getAssociatedAddress(owner);\n\n    const { lease, jobs, wallets } = await this.fetchAllAccounts();\n\n    const leaseBump = LeaseAccount.fromSeed(\n      this.program,\n      lease.queue,\n      lease.aggregator\n    )[1];\n    const walletBumps = new Uint8Array(wallets.map(w => w.bump));\n\n    const leaseExtend = types.leaseExtend(\n      this.program,\n      {\n        params: {\n          loadAmount: this.program.mint.toTokenAmountBN(params.fundAmount),\n          stateBump: this.program.programState.bump,\n          leaseBump,\n          walletBumps: new Uint8Array(walletBumps),\n        },\n      },\n      {\n        lease: this.publicKey,\n        escrow: lease.escrow,\n        aggregator: lease.aggregator,\n        queue: lease.queue,\n        funder: funderTokenWallet,\n        owner: owner,\n        tokenProgram: spl.TOKEN_PROGRAM_ID,\n        programState: this.program.programState.publicKey,\n        mint: this.program.mint.address,\n      }\n    );\n\n    // add job and job authority associated token accounts to remaining accounts for lease payouts\n    const jobPubkeys = jobs.map(j => j.account.publicKey);\n    const walletPubkeys = wallets.map(w => w.publicKey);\n    const remainingAccounts: Array<AccountMeta> = jobPubkeys\n      .concat(walletPubkeys)\n      .map((pubkey: PublicKey): AccountMeta => {\n        return { isSigner: false, isWritable: true, pubkey };\n      });\n    leaseExtend.keys.push(...remainingAccounts);\n\n    return new TransactionObject(\n      payer,\n      [leaseExtend],\n      params.funderAuthority ? [params.funderAuthority] : []\n    );\n  }\n\n  public async extend(\n    params: LeaseExtendParams\n  ): Promise<TransactionSignature> {\n    const leaseExtend = await this.extendInstruction(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(leaseExtend);\n    return txnSignature;\n  }\n\n  public async withdrawInstruction(\n    payer: PublicKey,\n    params: LeaseWithdrawParams\n  ): Promise<TransactionObject> {\n    const { lease, queue, aggregatorAccount, aggregator, balance } =\n      await this.fetchAccounts();\n\n    // calculate expected final balance\n    const leaseBalance = this.program.mint.toTokenAmountBN(balance);\n    const minRequiredBalance = LeaseAccount.minimumLeaseAmount(\n      aggregator.oracleRequestBatchSize,\n      queue.reward\n    );\n\n    const maxWithdrawAmount = leaseBalance.sub(minRequiredBalance);\n\n    const withdrawAmount: BN = (() => {\n      if (params.amount === 'all') return maxWithdrawAmount;\n      const requestedWithdrawAmount = this.program.mint.toTokenAmountBN(\n        params.amount\n      );\n      return requestedWithdrawAmount.lte(maxWithdrawAmount)\n        ? requestedWithdrawAmount\n        : maxWithdrawAmount;\n    })();\n\n    const leaseBump = LeaseAccount.fromSeed(\n      this.program,\n      lease.queue,\n      lease.aggregator\n    )[1];\n\n    if (params.unwrap) {\n      const ephemeralWallet = Keypair.generate();\n\n      const ixns = [\n        // initialize space for ephemeral token account\n        SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: ephemeralWallet.publicKey,\n          lamports:\n            await this.program.connection.getMinimumBalanceForRentExemption(\n              spl.ACCOUNT_SIZE\n            ),\n          space: spl.ACCOUNT_SIZE,\n          programId: spl.TOKEN_PROGRAM_ID,\n        }),\n        // initialize ephemeral token account\n        spl.createInitializeAccountInstruction(\n          ephemeralWallet.publicKey,\n          this.program.mint.address,\n          payer,\n          spl.TOKEN_PROGRAM_ID\n        ),\n        types.leaseWithdraw(\n          this.program,\n          {\n            params: {\n              stateBump: this.program.programState.bump,\n              leaseBump: leaseBump,\n              amount: withdrawAmount,\n            },\n          },\n          {\n            lease: this.publicKey,\n            escrow: lease.escrow,\n            aggregator: aggregatorAccount.publicKey,\n            queue: lease.queue,\n            withdrawAuthority: payer,\n            withdrawAccount: ephemeralWallet.publicKey,\n            tokenProgram: spl.TOKEN_PROGRAM_ID,\n            programState: this.program.programState.publicKey,\n            mint: this.program.mint.address,\n          }\n        ),\n        spl.createCloseAccountInstruction(\n          ephemeralWallet.publicKey,\n          payer,\n          payer\n        ),\n      ];\n\n      const txn = new TransactionObject(payer, ixns, [ephemeralWallet]);\n      return txn;\n    }\n\n    const withdrawAuthority = params.withdrawAuthority\n      ? params.withdrawAuthority.publicKey\n      : payer;\n    const withdrawWallet = params.withdrawWallet;\n\n    const txn = new TransactionObject(\n      payer,\n      [\n        types.leaseWithdraw(\n          this.program,\n          {\n            params: {\n              stateBump: this.program.programState.bump,\n              leaseBump: leaseBump,\n              amount: withdrawAmount,\n            },\n          },\n          {\n            lease: this.publicKey,\n            escrow: lease.escrow,\n            aggregator: aggregatorAccount.publicKey,\n            queue: lease.queue,\n            withdrawAuthority: withdrawAuthority,\n            withdrawAccount: withdrawWallet,\n            tokenProgram: spl.TOKEN_PROGRAM_ID,\n            programState: this.program.programState.publicKey,\n            mint: this.program.mint.address,\n          }\n        ),\n      ],\n      params.withdrawAuthority ? [params.withdrawAuthority] : []\n    );\n\n    return txn;\n  }\n\n  public async withdraw(\n    params: LeaseWithdrawParams\n  ): Promise<TransactionSignature> {\n    const withdrawTxn = await this.withdrawInstruction(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(withdrawTxn);\n    return txnSignature;\n  }\n\n  public async setAuthority(params: {\n    newAuthority: PublicKey;\n    withdrawAuthority: Keypair;\n  }): Promise<TransactionSignature> {\n    const setAuthorityTxn = this.setAuthorityInstruction(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(setAuthorityTxn);\n    return txnSignature;\n  }\n\n  public setAuthorityInstruction(\n    payer: PublicKey,\n    params: {\n      newAuthority: PublicKey;\n      withdrawAuthority?: Keypair;\n    }\n  ): TransactionObject {\n    return new TransactionObject(\n      payer,\n      [\n        types.leaseSetAuthority(\n          this.program,\n          {\n            params: {},\n          },\n          {\n            lease: this.publicKey,\n            withdrawAuthority: params.withdrawAuthority\n              ? params.withdrawAuthority.publicKey\n              : payer,\n            newAuthority: params.newAuthority,\n          }\n        ),\n      ],\n      params.withdrawAuthority ? [params.withdrawAuthority] : []\n    );\n  }\n  public static minimumLeaseAmount(\n    oracleRequestBatchSize: number,\n    queueReward: BN\n  ): BN {\n    return queueReward.mul(new BN(oracleRequestBatchSize + 1)).mul(new BN(2));\n  }\n\n  /**\n   * Estimate the time remaining on a given lease\n   * @param oracleRequestBatchSize - the number of oracles to request per openRound call, for a given aggregator.\n   * @param minUpdateDelaySeconds - the number of seconds between openRound calls, for a given aggregator.\n   * @param queueReward - the number of tokens deducted from an aggregator's lease for each successful openRound call. This is dependent on the queue an aggregator belongs to.\n   * @param leaseBalance - the current balance in a lease in decimal format.\n   * @returns a tuple containing the number of milliseconds left in a lease and the estimated end date\n   */\n  public static estimatedLeaseTimeRemaining(\n    oracleRequestBatchSize: number,\n    minUpdateDelaySeconds: number,\n    queueReward: BN,\n    leaseBalance: number\n  ): [number, Date] {\n    const now = Date.now();\n    const msPerDay = 24 * 60 * 60 * 1000; // ms in a day\n    const updatesPerDay = (60 * 60 * 24) / (minUpdateDelaySeconds * 1.5); // account for jitter\n    const costPerDay =\n      (oracleRequestBatchSize + 1) * // add 1 to reward crank turner\n      queueReward.toNumber() *\n      updatesPerDay;\n\n    const endDate = new Date();\n    endDate.setTime((now + leaseBalance * msPerDay) / costPerDay);\n\n    return [endDate.getTime() - now, endDate];\n  }\n\n  /**\n   * Estimate the time remaining on a given lease\n   * @returns number milliseconds left in lease (estimate)\n   */\n  public async estimatedLeaseTimeRemaining(): Promise<number> {\n    const { queue, aggregator, balance } = await this.fetchAccounts();\n\n    const batchSize = aggregator.oracleRequestBatchSize + 1;\n    const minUpdateDelaySeconds = aggregator.minUpdateDelaySeconds * 1.5; // account for jitters with * 1.5\n    const updatesPerDay = (60 * 60 * 24) / minUpdateDelaySeconds;\n    const costPerDay = batchSize * queue.reward.toNumber() * updatesPerDay;\n    const msPerDay = 24 * 60 * 60 * 1000;\n    const endDate = new Date();\n    endDate.setTime(endDate.getTime() + (balance * msPerDay) / costPerDay);\n    const timeLeft = endDate.getTime() - Date.now();\n    return timeLeft;\n  }\n\n  static getWallets(\n    jobAuthorities: Array<PublicKey>,\n    mint: PublicKey\n  ): Array<{ publicKey: PublicKey; bump: number }> {\n    const wallets: Array<{ publicKey: PublicKey; bump: number }> = [];\n\n    for (const jobAuthority of jobAuthorities) {\n      if (!jobAuthority || PublicKey.default.equals(jobAuthority)) {\n        continue;\n      }\n      const [jobWallet, bump] = PublicKey.findProgramAddressSync(\n        [\n          jobAuthority.toBuffer(),\n          spl.TOKEN_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n        ],\n        spl.ASSOCIATED_TOKEN_PROGRAM_ID\n      );\n      wallets.push({ publicKey: jobWallet, bump });\n    }\n\n    return wallets;\n  }\n\n  async fetchAccounts(_lease?: types.LeaseAccountData): Promise<{\n    lease: types.LeaseAccountData;\n    queueAccount: QueueAccount;\n    queue: types.OracleQueueAccountData;\n    aggregatorAccount: AggregatorAccount;\n    aggregator: types.AggregatorAccountData;\n    escrow: spl.Account;\n    balance: number;\n  }> {\n    const lease = _lease ?? (await this.loadData());\n\n    const aggregatorAccount = new AggregatorAccount(\n      this.program,\n      lease.aggregator\n    );\n\n    const queueAccount = new QueueAccount(this.program, lease.queue);\n\n    const accountInfos = await this.program.connection.getMultipleAccountsInfo([\n      lease.aggregator,\n      lease.queue,\n      lease.escrow,\n    ]);\n\n    // decode aggregator\n    const aggregatorAccountInfo = accountInfos.shift();\n    if (!aggregatorAccountInfo) {\n      throw new errors.AccountNotFoundError('Aggregator', lease.aggregator);\n    }\n    const aggregator = types.AggregatorAccountData.decode(\n      aggregatorAccountInfo.data\n    );\n\n    // decode queue\n    const queueAccountInfo = accountInfos.shift();\n    if (!queueAccountInfo) {\n      throw new errors.AccountNotFoundError('Queue', lease.queue);\n    }\n    const queue = types.OracleQueueAccountData.decode(queueAccountInfo.data);\n\n    const leaseAccountInfo = accountInfos.shift();\n    if (!leaseAccountInfo) {\n      throw new errors.AccountNotFoundError('LeaseEscrow', lease.escrow);\n    }\n    const escrow = spl.unpackAccount(lease.escrow, leaseAccountInfo);\n    const balance = this.program.mint.fromTokenAmount(escrow.amount);\n\n    return {\n      lease,\n      queueAccount,\n      queue,\n      aggregatorAccount,\n      aggregator,\n      escrow,\n      balance,\n    };\n  }\n\n  async fetchAllAccounts(_lease?: types.LeaseAccountData): Promise<{\n    lease: types.LeaseAccountData;\n    queueAccount: QueueAccount;\n    queue: types.OracleQueueAccountData;\n    aggregatorAccount: AggregatorAccount;\n    aggregator: types.AggregatorAccountData;\n    escrow: spl.Account;\n    balance: number;\n    jobs: Array<{\n      account: JobAccount;\n      state: types.JobAccountData;\n      job: OracleJob;\n    }>;\n    wallets: Array<{ publicKey: PublicKey; bump: number }>;\n  }> {\n    const {\n      lease,\n      queueAccount,\n      queue,\n      aggregatorAccount,\n      aggregator,\n      escrow,\n      balance,\n    } = await this.fetchAccounts(_lease);\n\n    // load aggregator jobs for lease bumps\n    const jobs = await aggregatorAccount.loadJobs(aggregator);\n    const jobAuthorities = jobs.map(j => j.state.authority);\n    const wallets = LeaseAccount.getWallets(\n      jobAuthorities ?? [],\n      this.program.mint.address\n    );\n\n    return {\n      lease,\n      queueAccount,\n      queue,\n      aggregatorAccount,\n      aggregator,\n      escrow,\n      balance,\n      jobs,\n      wallets,\n    };\n  }\n}\n\nexport interface LeaseInitParams extends Partial<LeaseExtendParams> {\n  withdrawAuthority?: PublicKey;\n\n  // maybe?\n  aggregatorAccount: AggregatorAccount;\n  queueAccount: QueueAccount;\n  jobAuthorities?: Array<PublicKey>;\n  jobPubkeys?: Array<PublicKey>;\n}\n\nexport interface LeaseExtendParams {\n  /** The amount to fund the lease with. */\n  fundAmount: number;\n  /** Optional, the token account to fund the lease from. Defaults to payer's associated token account if not provided. */\n  funderTokenWallet?: PublicKey;\n  /** Optional, the funderTokenWallet authority if it differs from the provided payer. */\n  funderAuthority?: Keypair;\n  /** Optional, disable auto wrapping funds if funderTokenWallet is missing funds */\n  disableWrap?: boolean;\n}\n\nexport interface LeaseWithdrawBaseParams {\n  amount: number | 'all';\n  unwrap: boolean;\n}\n\nexport interface LeaseWithdrawUnwrapParams extends LeaseWithdrawBaseParams {\n  unwrap: true;\n}\n\nexport interface LeaseWithdrawWalletParams extends LeaseWithdrawBaseParams {\n  unwrap: false;\n  withdrawWallet: PublicKey;\n  withdrawAuthority?: Keypair;\n}\n\nexport type LeaseWithdrawParams =\n  | LeaseWithdrawUnwrapParams\n  | LeaseWithdrawWalletParams;\n"]}
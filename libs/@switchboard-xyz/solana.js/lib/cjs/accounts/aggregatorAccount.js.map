{"version":3,"file":"aggregatorAccount.js","sourceRoot":"","sources":["../../../src/accounts/aggregatorAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import * as errors from '../errors';\nimport * as types from '../generated';\nimport { SwitchboardProgram } from '../SwitchboardProgram';\nimport {\n  TransactionObject,\n  TransactionObjectOptions,\n  TransactionPackOptions,\n} from '../TransactionObject';\n\nimport { Account, OnAccountChangeCallback } from './account';\nimport { AggregatorHistoryBuffer } from './aggregatorHistoryBuffer';\nimport { CrankAccount } from './crankAccount';\nimport { JobAccount } from './jobAccount';\nimport { LeaseAccount, LeaseExtendParams } from './leaseAccount';\nimport { OracleAccount } from './oracleAccount';\nimport { PermissionAccount } from './permissionAccount';\nimport { QueueAccount } from './queueAccount';\n\nimport * as anchor from '@coral-xyz/anchor';\nimport * as spl from '@solana/spl-token-v2';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token-v2';\nimport {\n  AccountInfo,\n  AccountMeta,\n  Commitment,\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport {\n  Big,\n  BN,\n  OracleJob,\n  promiseWithTimeout,\n  toUtf8,\n} from '@switchboard-xyz/common';\nimport assert from 'assert';\nimport crypto from 'crypto';\n\n/**\n * Account type holding a data feed's update configuration, job accounts, and its current result.\n *\n * Data: {@linkcode types.AggregatorAccountData}\n *\n * Result: {@linkcode types.SwitchboardDecimal}\n *\n * HistoryBuffer?: Array<{@linkcode types.AggregatorHistoryRow}>\n *\n * An aggregator account belongs to a single {@linkcode QueueAccount} but can later be transferred by the aggregator's authority. In order for an {@linkcode OracleAccount} to respond to an aggregator's update request, the aggregator must initialize a {@linkcode PermissionAccount} and {@linkcode LeaseAccount}. These will need to be recreated when transferring queues.\n *\n * Optionally, An aggregator can be pushed onto a {@linkcode CrankAccount} in order to be updated\n *\n * Optionally, an aggregator can add a history buffer to store the last N historical samples along with their update timestamp.\n */\nexport class AggregatorAccount extends Account<types.AggregatorAccountData> {\n  static accountName = 'AggregatorAccountData';\n\n  public history?: AggregatorHistoryBuffer;\n\n  /**\n   * Returns the aggregator's name buffer in a stringified format.\n   */\n  public static getName = (aggregator: types.AggregatorAccountData) =>\n    toUtf8(aggregator.name);\n  /**\n   * Returns the aggregator's metadata buffer in a stringified format.\n   */\n  public static getMetadata = (aggregator: types.AggregatorAccountData) =>\n    toUtf8(aggregator.metadata);\n\n  public static size = 3851;\n\n  /**\n   * Get the size of an {@linkcode AggregatorAccount} on-chain.\n   */\n  public size = this.program.account.aggregatorAccountData.size;\n\n  public decode(data: Buffer): types.AggregatorAccountData {\n    try {\n      return types.AggregatorAccountData.decode(data);\n    } catch {\n      return this.program.coder.decode<types.AggregatorAccountData>(\n        AggregatorAccount.accountName,\n        data\n      );\n    }\n  }\n\n  /**\n   * Return an aggregator account state initialized to the default values.\n   */\n  public static default(): types.AggregatorAccountData {\n    const buffer = Buffer.alloc(AggregatorAccount.size, 0);\n    types.AggregatorAccountData.discriminator.copy(buffer, 0);\n    return types.AggregatorAccountData.decode(buffer);\n  }\n\n  /**\n   * Create a mock account info for a given aggregator config. Useful for test integrations.\n   */\n  public static createMock(\n    programId: PublicKey,\n    data: Partial<types.AggregatorAccountData>,\n    options?: {\n      lamports?: number;\n      rentEpoch?: number;\n    }\n  ): AccountInfo<Buffer> {\n    const fields: types.AggregatorAccountDataFields = {\n      ...AggregatorAccount.default(),\n      ...data,\n      // any cleanup actions here\n    };\n    const state = new types.AggregatorAccountData(fields);\n\n    const buffer = Buffer.alloc(AggregatorAccount.size, 0);\n    types.AggregatorAccountData.discriminator.copy(buffer, 0);\n    types.AggregatorAccountData.layout.encode(state, buffer, 8);\n\n    return {\n      executable: false,\n      owner: programId,\n      lamports: options?.lamports ?? 1 * LAMPORTS_PER_SOL,\n      data: buffer,\n      rentEpoch: options?.rentEpoch ?? 0,\n    };\n  }\n\n  /**\n   * Invoke a callback each time an AggregatorAccount's data has changed on-chain.\n   * @param callback - the callback invoked when the aggregator state changes\n   * @param commitment - optional, the desired transaction finality. defaults to 'confirmed'\n   * @returns the websocket subscription id\n   */\n  public onChange(\n    callback: OnAccountChangeCallback<types.AggregatorAccountData>,\n    commitment: Commitment = 'confirmed'\n  ): number {\n    return this.program.connection.onAccountChange(\n      this.publicKey,\n      accountInfo => {\n        callback(this.decode(accountInfo.data));\n      },\n      commitment\n    );\n  }\n\n  /**\n   * Retrieve and decode the {@linkcode types.AggregatorAccountData} stored in this account.\n   */\n  public async loadData(): Promise<types.AggregatorAccountData> {\n    const data = await types.AggregatorAccountData.fetch(\n      this.program,\n      this.publicKey\n    );\n    if (data === null)\n      throw new errors.AccountNotFoundError('Aggregator', this.publicKey);\n    this.history = AggregatorHistoryBuffer.fromAggregator(this.program, data);\n    return data;\n  }\n\n  public get slidingWindowKey(): PublicKey {\n    return PublicKey.findProgramAddressSync(\n      [Buffer.from('SlidingResultAccountData'), this.publicKey.toBytes()],\n      this.program.programId\n    )[0];\n  }\n\n  /** Load an existing AggregatorAccount with its current on-chain state */\n  public static async load(\n    program: SwitchboardProgram,\n    publicKey: PublicKey | string\n  ): Promise<[AggregatorAccount, types.AggregatorAccountData]> {\n    const account = new AggregatorAccount(\n      program,\n      typeof publicKey === 'string' ? new PublicKey(publicKey) : publicKey\n    );\n    const state = await account.loadData();\n    return [account, state];\n  }\n\n  /**\n   * Creates a transaction object with aggregatorInit instructions.\n   * @param program The SwitchboardProgram.\n   * @param payer The account that will pay for the new accounts.\n   * @param params aggregator configuration parameters.\n   * @return {@linkcode TransactionObject} that will create the aggregatorAccount.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import {AggregatorAccount} from '@switchboard-xyz/solana.js';\n   * const [aggregatorAccount, aggregatorInit ] = await AggregatorAccount.createInstruction(program, payer, {\n   *    queueAccount,\n   *    queueAuthority,\n   *    batchSize: 5,\n   *    minRequiredOracleResults: 3,\n   *    minRequiredJobResults: 1,\n   *    minUpdateDelaySeconds: 30,\n   * });\n   * const txnSignature = await program.signAndSend(aggregatorInit);\n   * ```\n   */\n  public static async createInstruction(\n    program: SwitchboardProgram,\n    payer: PublicKey,\n    params: AggregatorInitParams\n  ): Promise<[AggregatorAccount, TransactionObject]> {\n    const keypair = params.keypair ?? Keypair.generate();\n    program.verifyNewKeypair(keypair);\n\n    const ixns: TransactionInstruction[] = [];\n    const signers: Keypair[] = [keypair];\n\n    ixns.push(\n      SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: keypair.publicKey,\n        space: program.account.aggregatorAccountData.size,\n        lamports: await program.connection.getMinimumBalanceForRentExemption(\n          program.account.aggregatorAccountData.size\n        ),\n        programId: program.programId,\n      })\n    );\n\n    ixns.push(\n      types.aggregatorInit(\n        program,\n        {\n          params: {\n            name: [...Buffer.from(params.name ?? '', 'utf8').slice(0, 32)],\n            metadata: [\n              ...Buffer.from(params.metadata ?? '', 'utf8').slice(0, 128),\n            ],\n            batchSize: params.batchSize,\n            minOracleResults: params.minRequiredOracleResults,\n            minJobResults: params.minRequiredJobResults,\n            minUpdateDelaySeconds: params.minUpdateDelaySeconds,\n            startAfter: new anchor.BN(params.startAfter ?? 0),\n            varianceThreshold: types.SwitchboardDecimal.fromBig(\n              new Big(params.varianceThreshold ?? 0)\n            ).borsh,\n            forceReportPeriod: new anchor.BN(params.forceReportPeriod ?? 0),\n            expiration: new anchor.BN(params.expiration ?? 0),\n            stateBump: program.programState.bump,\n            disableCrank: params.disableCrank ?? false,\n          },\n        },\n        {\n          aggregator: keypair.publicKey,\n          authority: params.authority ?? payer,\n          queue: params.queueAccount.publicKey,\n          programState: program.programState.publicKey,\n        }\n      )\n    );\n\n    const aggregatorInit = new TransactionObject(payer, ixns, signers);\n    const aggregatorAccount = new AggregatorAccount(program, keypair.publicKey);\n\n    return [aggregatorAccount, aggregatorInit];\n  }\n\n  /**\n   * Creates an aggregator on-chain and return the transaction signature and created account resource.\n   * @param program The SwitchboardProgram.\n   * @param params aggregator configuration parameters.\n   * @return Transaction signature and the newly created aggregatorAccount.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import {AggregatorAccount} from '@switchboard-xyz/solana.js';\n   * const [aggregatorAccount, txnSignature] = await AggregatorAccount.create(program, {\n   *    queueAccount,\n   *    queueAuthority,\n   *    batchSize: 5,\n   *    minRequiredOracleResults: 3,\n   *    minRequiredJobResults: 1,\n   *    minUpdateDelaySeconds: 30,\n   * });\n   * const aggregator = await aggregatorAccount.loadData();\n   * ```\n   */\n  public static async create(\n    program: SwitchboardProgram,\n    params: AggregatorInitParams\n  ): Promise<[AggregatorAccount, TransactionSignature]> {\n    const [account, transaction] = await AggregatorAccount.createInstruction(\n      program,\n      program.walletPubkey,\n      params\n    );\n    const txnSignature = await program.signAndSend(transaction);\n    return [account, txnSignature];\n  }\n\n  /**\n   * Create the {@linkcode PermissionAccount} and {@linkcode LeaseAccount} for a new oracle queue without affecting the feed's rhythm. This does not evict a feed from the current queue.\n   */\n  async transferQueuePart1Instructions(\n    payer: PublicKey,\n    params: {\n      newQueue: QueueAccount;\n    } & LeaseExtendParams\n  ): Promise<[TransactionObject, PermissionAccount, LeaseAccount]> {\n    const txns: Array<TransactionObject> = [];\n\n    const aggregator = await this.loadData();\n    const newQueue = await params.newQueue.loadData();\n\n    const jobs = await this.loadJobs(aggregator);\n    const jobAuthorities = jobs.map(job => job.state.authority);\n\n    const [newPermissionAccount] = this.getPermissionAccount(\n      params.newQueue.publicKey,\n      newQueue.authority\n    );\n\n    const newPermissionAccountInfo =\n      await this.program.connection.getAccountInfo(\n        newPermissionAccount.publicKey\n      );\n    if (newPermissionAccountInfo === null) {\n      const [_newPermissionAccount, permissionInitTxn] =\n        PermissionAccount.createInstruction(this.program, payer, {\n          authority: newQueue.authority,\n          granter: params.newQueue.publicKey,\n          grantee: this.publicKey,\n        });\n      assert(\n        newPermissionAccount.publicKey.equals(_newPermissionAccount.publicKey)\n      );\n      txns.push(permissionInitTxn);\n    }\n\n    const [newLeaseAccount] = this.getLeaseAccount(params.newQueue.publicKey);\n    const newLeaseAccountInfo = await this.program.connection.getAccountInfo(\n      newLeaseAccount.publicKey\n    );\n    if (newLeaseAccountInfo === null) {\n      const [userTokenWallet, userWrap] =\n        params.fundAmount && params.fundAmount > 0 && !params.funderTokenWallet\n          ? await this.program.mint.getOrCreateWrappedUserInstructions(payer, {\n              fundUpTo: params.fundAmount ?? 0,\n            })\n          : [undefined, undefined];\n      if (userWrap) {\n        txns.push(userWrap);\n      }\n\n      // create lease for the new queue but dont transfer any balance\n      const [_newLeaseAccount, leaseInit] =\n        await LeaseAccount.createInstructions(this.program, payer, {\n          aggregatorAccount: this,\n          queueAccount: params.newQueue,\n          funderTokenWallet:\n            params.funderTokenWallet ?? userTokenWallet ?? undefined,\n          funderAuthority: params.funderAuthority ?? undefined,\n          jobAuthorities,\n          fundAmount: params.fundAmount ?? 0,\n          withdrawAuthority: aggregator.authority, // set to current authority\n          jobPubkeys: aggregator.jobPubkeysData.slice(\n            0,\n            aggregator.jobPubkeysSize\n          ),\n        });\n      assert(newLeaseAccount.publicKey.equals(_newLeaseAccount.publicKey));\n      txns.push(leaseInit);\n    }\n\n    const packed = TransactionObject.pack(txns);\n    if (packed.length !== 1) {\n      throw new Error(\n        `QueueTransfer-Part1: Expected a single TransactionObject`\n      );\n    }\n\n    return [packed[0], newPermissionAccount, newLeaseAccount];\n  }\n\n  /**\n   * Create the {@linkcode PermissionAccount} and {@linkcode LeaseAccount} for a new oracle queue without affecting the feed's rhythm. This does not evict a feed from the current queue.\n   */\n  async transferQueuePart1(\n    params: {\n      newQueue: QueueAccount;\n    } & LeaseExtendParams\n  ): Promise<[PermissionAccount, LeaseAccount, TransactionSignature]> {\n    const [txn, permissionAccount, leaseAccount] =\n      await this.transferQueuePart1Instructions(\n        this.program.walletPubkey,\n        params\n      );\n    const signature = await this.program.signAndSend(txn);\n    return [permissionAccount, leaseAccount, signature];\n  }\n\n  /**\n   * Approve the feed to use the new queue. Must be signed by the {@linkcode QueueAccount} authority.\n   *\n   * This does not affect the feed's rhythm nor evict it from the current queue. The Aggregator authority is still required to sign a transaction to move the feed.\n   */\n  async transferQueuePart2Instructions(\n    payer: PublicKey,\n    params: {\n      newQueue: QueueAccount;\n      enable: boolean;\n      queueAuthority?: Keypair;\n      // dont check if new accounts have been created yet\n      force?: boolean;\n    }\n  ): Promise<[TransactionObject | undefined, PermissionAccount]> {\n    const newQueue = await params.newQueue.loadData();\n    const [permissionAccount] = this.getPermissionAccount(\n      params.newQueue.publicKey,\n      newQueue.authority\n    );\n\n    if (!params.enable) {\n      return [undefined, permissionAccount];\n    }\n\n    if (\n      params.queueAuthority &&\n      !params.queueAuthority.publicKey.equals(newQueue.authority)\n    ) {\n      throw new errors.IncorrectAuthority(\n        newQueue.authority,\n        params.queueAuthority.publicKey\n      );\n    }\n\n    if (!params.force) {\n      await permissionAccount.loadData().catch(() => {\n        throw new Error(`Expected permissionAccount to be created already`);\n      });\n    }\n\n    const permissionSet = permissionAccount.setInstruction(payer, {\n      enable: params.enable,\n      queueAuthority: params.queueAuthority,\n      permission: new types.SwitchboardPermission.PermitOracleQueueUsage(),\n    });\n\n    return [permissionSet, permissionAccount];\n  }\n\n  /**\n   * Approve the feed to use the new queue. Must be signed by the {@linkcode QueueAccount} authority.\n   *\n   * This does not affect the feed's rhythm nor evict it from the current queue. The Aggregator authority is still required to sign a transaction to move the feed.\n   */\n  async transferQueuePart2(params: {\n    newQueue: QueueAccount;\n    enable: boolean;\n    queueAuthority?: Keypair;\n    // dont check if new accounts have been created yet\n    force?: boolean;\n  }): Promise<[PermissionAccount, TransactionSignature | undefined]> {\n    const [txn, permissionAccount] = await this.transferQueuePart2Instructions(\n      this.program.walletPubkey,\n      params\n    );\n    if (!txn) {\n      return [permissionAccount, undefined];\n    }\n    const signature = await this.program.signAndSend(txn);\n    return [permissionAccount, signature];\n  }\n\n  /**\n   * Transfer the feed to the new {@linkcode QueueAccount} and optionally push it on a crank. Must be signed by the Aggregator authority to approve the transfer.\n   *\n   * This will evict a feed from the previous queue and crank.\n   */\n  async transferQueuePart3Instructions(\n    payer: PublicKey,\n    params: {\n      newQueue: QueueAccount;\n      authority?: Keypair;\n      newCrank?: CrankAccount;\n      // dont check if new accounts have been created yet\n      force?: boolean;\n    }\n  ): Promise<Array<TransactionObject>> {\n    const txns: Array<TransactionObject> = [];\n\n    const newQueue = await params.newQueue.loadData();\n    const aggregator = await this.loadData();\n\n    // new permission account needs to be created and approved\n    const [permissionAccount] = this.getPermissionAccount(\n      params.newQueue.publicKey,\n      newQueue.authority\n    );\n\n    if (!params.force) {\n      await permissionAccount\n        .loadData()\n        .catch(() => {\n          throw new Error(`Expected permissionAccount to be created already`);\n        })\n        .then(permission => {\n          if (\n            !newQueue.unpermissionedFeedsEnabled &&\n            permission.permissions !== 2\n          ) {\n            throw new Error(\n              `PermissionAccount missing required permissions to enable this queue`\n            );\n          }\n        });\n    }\n\n    // check the new lease has been created\n    const [newLeaseAccount] = this.getLeaseAccount(params.newQueue.publicKey);\n    if (!params.force) {\n      await newLeaseAccount.loadData().catch(() => {\n        throw new Error(`Expected leaseAccount to be created already`);\n      });\n    }\n\n    // set the feeds queue\n    const setQueueTxn = new TransactionObject(\n      payer,\n      [\n        types.aggregatorSetQueue(\n          this.program,\n          { params: {} },\n          {\n            aggregator: this.publicKey,\n            authority: aggregator.authority,\n            queue: params.newQueue.publicKey,\n          }\n        ),\n      ],\n      params.authority ? [params.authority] : []\n    );\n    txns.push(setQueueTxn);\n\n    // push to crank\n    if (params.newCrank) {\n      const newCrank = await params.newCrank.loadData();\n      if (!newCrank.queuePubkey.equals(params.newQueue.publicKey)) {\n        throw new Error(`Crank is owned by the wrong queue`);\n      }\n      const crankPush = params.newCrank.pushInstructionSync(payer, {\n        aggregatorAccount: this,\n        queue: newQueue,\n        crank: newCrank,\n      });\n      txns.push(crankPush);\n    }\n\n    // remove any funds from the old lease account\n    const [oldLeaseAccount] = this.getLeaseAccount(aggregator.queuePubkey);\n    const oldLease = await oldLeaseAccount.loadData();\n    const oldLeaseBalance = await oldLeaseAccount.fetchBalance(oldLease.escrow);\n    if (oldLease.withdrawAuthority.equals(payer) && oldLeaseBalance > 0) {\n      const withdrawTxn = await oldLeaseAccount.withdrawInstruction(payer, {\n        amount: oldLeaseBalance,\n        unwrap: false,\n        // withdraw old lease funds into the new lease\n        withdrawWallet: this.program.mint.getAssociatedAddress(\n          newLeaseAccount.publicKey\n        ),\n      });\n      txns.push(withdrawTxn);\n    }\n\n    return TransactionObject.pack(txns);\n  }\n\n  /**\n   * Transfer the feed to the new {@linkcode QueueAccount} and optionally push it on a crank. Must be signed by the Aggregator authority to approve the transfer.\n   *\n   * This will evict a feed from the previous queue and crank.\n   */\n  async transferQueuePart3(params: {\n    newQueue: QueueAccount;\n    authority?: Keypair;\n    newCrank?: CrankAccount;\n    // dont check if new accounts have been created yet\n    force?: boolean;\n  }): Promise<Array<TransactionSignature>> {\n    const txns = await this.transferQueuePart3Instructions(\n      this.program.walletPubkey,\n      params\n    );\n    const signatures = await this.program.signAndSendAll(txns, {\n      skipPreflight: true,\n    });\n    return signatures;\n  }\n\n  async transferQueueInstructions(\n    payer: PublicKey,\n    params: {\n      authority?: Keypair;\n      newQueue: QueueAccount;\n      newCrank?: CrankAccount;\n      enable: boolean;\n      queueAuthority?: Keypair;\n    } & LeaseExtendParams,\n    opts?: TransactionObjectOptions\n  ): Promise<[Array<TransactionObject>, PermissionAccount, LeaseAccount]> {\n    const txns: Array<TransactionObject> = [];\n\n    const [part1, permissionAccount, leaseAccount] =\n      await this.transferQueuePart1Instructions(payer, {\n        newQueue: params.newQueue,\n        fundAmount: params.fundAmount,\n        funderTokenWallet: params.funderTokenWallet,\n        funderAuthority: params.funderAuthority,\n      });\n    txns.push(part1);\n\n    const [part2] = await this.transferQueuePart2Instructions(payer, {\n      newQueue: params.newQueue,\n      enable: params.enable,\n      queueAuthority: params.queueAuthority,\n      force: true,\n    });\n    if (part2) {\n      txns.push(part2);\n    }\n    const part3 = await this.transferQueuePart3Instructions(payer, {\n      newQueue: params.newQueue,\n      authority: params.authority,\n      newCrank: params.newCrank,\n      force: true,\n    });\n    txns.push(...part3);\n\n    return [\n      TransactionObject.pack(txns, opts),\n      permissionAccount,\n      leaseAccount,\n    ];\n  }\n\n  async transferQueue(\n    params: {\n      authority?: Keypair;\n      newQueue: QueueAccount;\n      newCrank?: CrankAccount;\n      enable: boolean;\n      queueAuthority?: Keypair;\n    } & LeaseExtendParams\n  ): Promise<[PermissionAccount, LeaseAccount, Array<TransactionSignature>]> {\n    const [txns, permissionAccount, leaseAccount] =\n      await this.transferQueueInstructions(this.program.walletPubkey, params);\n    const signatures = await this.program.signAndSendAll(txns, {\n      skipPreflight: true,\n    });\n    return [permissionAccount, leaseAccount, signatures];\n  }\n\n  public getPermissionAccount(\n    queuePubkey: PublicKey,\n    queueAuthority: PublicKey\n  ): [PermissionAccount, number] {\n    return PermissionAccount.fromSeed(\n      this.program,\n      queueAuthority,\n      queuePubkey,\n      this.publicKey\n    );\n  }\n\n  public getLeaseAccount(\n    queuePubkey: PublicKey\n  ): [LeaseAccount, PublicKey, number] {\n    const [leaseAccount, leaseBump] = LeaseAccount.fromSeed(\n      this.program,\n      queuePubkey,\n      this.publicKey\n    );\n    const leaseEscrow = this.program.mint.getAssociatedAddress(\n      leaseAccount.publicKey\n    );\n\n    return [leaseAccount, leaseEscrow, leaseBump];\n  }\n\n  /**\n   * Derives the Program Derived Accounts (PDAs) for the Aggregator, based on its currently assigned oracle queue.\n   *\n   * @param queueAccount The QueueAccount associated with the Aggregator.\n   * @param queueAuthority The PublicKey of the oracle queue authority.\n   *\n   * @return An object containing the Aggregator PDA accounts, including:\n   *   - permissionAccount: The permission account.\n   *   - permissionBump: The nonce value used to generate the permission account.\n   *   - leaseAccount: The lease account.\n   *   - leaseBump: The nonce value used to generate the lease account.\n   *   - leaseEscrow: The lease escrow account.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * const aggregatorPdaAccounts = aggregator.getAccounts(queueAccount, queueAuthority);\n   * console.log(\"Aggregator PDA accounts:\", aggregatorPdaAccounts);\n   * ```\n   */\n  public getAccounts(\n    queueAccount: QueueAccount,\n    queueAuthority: PublicKey\n  ): AggregatorPdaAccounts {\n    const [permissionAccount, permissionBump] = this.getPermissionAccount(\n      queueAccount.publicKey,\n      queueAuthority\n    );\n\n    const [leaseAccount, leaseEscrow, leaseBump] = this.getLeaseAccount(\n      queueAccount.publicKey\n    );\n\n    return {\n      permissionAccount,\n      permissionBump,\n      leaseAccount,\n      leaseBump,\n      leaseEscrow,\n    };\n  }\n\n  /**\n   * Retrieves the latest confirmed value stored in the aggregator account from a pre-fetched account state.\n   *\n   * @param aggregator The pre-fetched aggregator account data.\n   *\n   * @return The latest feed value as a Big instance, or null if no successful rounds have been confirmed yet.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * const latestValue = AggregatorAccount.decodeLatestValue(aggregatorAccountData);\n   * console.log(\"Latest confirmed value:\", latestValue?.toString() ?? \"No successful rounds yet\");\n   * ```\n   */\n  public static decodeLatestValue(\n    aggregator: types.AggregatorAccountData\n  ): Big | null {\n    if ((aggregator.latestConfirmedRound?.numSuccess ?? 0) === 0) {\n      return null;\n    }\n    const result = aggregator.latestConfirmedRound.result.toBig();\n    return result;\n  }\n\n  /**\n   * Retrieves the latest confirmed value stored in the aggregator account.\n   *\n   * @return A Promise that resolves to the latest feed value as a Big instance, or null if the value is not populated or no successful rounds have been confirmed yet.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * const latestValue = await aggregatorAccount.fetchLatestValue();\n   * console.log(\"Latest confirmed value:\", latestValue?.toString() ?? \"No successful rounds yet\");\n   * ```\n   */\n  public async fetchLatestValue(): Promise<Big | null> {\n    const aggregator = await this.loadData();\n    return AggregatorAccount.decodeLatestValue(aggregator);\n  }\n\n  /**\n   * Retrieves the timestamp of the latest confirmed round stored in the aggregator account from a pre-fetched account state.\n   *\n   * @param aggregator The pre-fetched aggregator account data.\n   *\n   * @return The latest feed timestamp as an anchor.BN instance.\n   *\n   * @throws Error if the aggregator currently holds no value or no successful rounds have been confirmed yet.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * const latestTimestamp = AggregatorAccount.decodeLatestTimestamp(aggregatorAccountData);\n   * console.log(\"Latest confirmed round timestamp:\", latestTimestamp.toString());\n   * ```\n   */\n  public static decodeLatestTimestamp(\n    aggregator: types.AggregatorAccountData\n  ): anchor.BN {\n    if ((aggregator.latestConfirmedRound?.numSuccess ?? 0) === 0) {\n      throw new Error('Aggregator currently holds no value.');\n    }\n    return aggregator.latestConfirmedRound.roundOpenTimestamp;\n  }\n\n  /**\n   * Decodes the confirmed round results of the aggregator account from a pre-fetched account state.\n   *\n   * @param aggregator The pre-fetched aggregator account data.\n   *\n   * @return An array of objects containing the oracle public keys and their respective reported values as Big instances.\n   *\n   * @throws Error if the aggregator currently holds no value or no successful rounds have been confirmed yet.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * const confirmedRoundResults = AggregatorAccount.decodeConfirmedRoundResults(aggregatorAccountData);\n   * console.log(\"Confirmed round results:\", confirmedRoundResults);\n   * ```\n   */\n  public static decodeConfirmedRoundResults(\n    aggregator: types.AggregatorAccountData\n  ): Array<{ oraclePubkeys: PublicKey; value: Big }> {\n    if ((aggregator.latestConfirmedRound?.numSuccess ?? 0) === 0) {\n      throw new Error('Aggregator currently holds no value.');\n    }\n    const results: Array<{ oraclePubkeys: PublicKey; value: Big }> = [];\n    for (let i = 0; i < aggregator.oracleRequestBatchSize; ++i) {\n      if (aggregator.latestConfirmedRound.mediansFulfilled[i] === true) {\n        results.push({\n          oraclePubkeys: aggregator.latestConfirmedRound.oraclePubkeysData[i],\n          value: aggregator.latestConfirmedRound.mediansData[i].toBig(),\n        });\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Retrieves the individual oracle results of the latest confirmed round from a pre-fetched account state.\n   *\n   * @param aggregator The pre-fetched aggregator account data.\n   *\n   * @return An array of objects containing the oracle account instances and their respective reported values as Big instances.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * const aggregatorAccountData = await aggregatorAccount.loadData();\n   * const confirmedRoundResults = aggregatorAccount.getConfirmedRoundResults(aggregatorAccountData);\n   * console.log(\"Confirmed round results by oracle account:\", confirmedRoundResults);\n   * ```\n   */\n  public getConfirmedRoundResults(\n    aggregator: types.AggregatorAccountData\n  ): Array<{ oracleAccount: OracleAccount; value: Big }> {\n    return AggregatorAccount.decodeConfirmedRoundResults(aggregator).map(o => {\n      return {\n        oracleAccount: new OracleAccount(this.program, o.oraclePubkeys),\n        value: o.value,\n      };\n    });\n  }\n\n  /**\n   * Generates a SHA-256 hash of all the oracle jobs currently in the aggregator.\n   *\n   * @param jobs An array of OracleJob instances representing the jobs in the aggregator.\n   *\n   * @return A crypto.Hash object representing the hash of all the feed jobs.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * const jobs = [job1, job2, job3];\n   * const jobsHash = aggregatorAccount.produceJobsHash(jobs);\n   * console.log(\"Hash of all the feed jobs:\", jobsHash);\n   * ```\n   */\n  public produceJobsHash(jobs: Array<OracleJob>): crypto.Hash {\n    const hash = crypto.createHash('sha256');\n    for (const job of jobs) {\n      const jobHasher = crypto.createHash('sha256');\n      jobHasher.update(OracleJob.encodeDelimited(job).finish());\n      hash.update(jobHasher.digest());\n    }\n    return hash;\n  }\n\n  public static decodeCurrentRoundOracles(\n    aggregator: types.AggregatorAccountData\n  ): Array<PublicKey> {\n    return aggregator.currentRound.oraclePubkeysData.slice(\n      0,\n      aggregator.oracleRequestBatchSize\n    );\n  }\n\n  public async loadCurrentRoundOracles(\n    aggregator: types.AggregatorAccountData\n  ): Promise<\n    Array<{ account: OracleAccount; state: types.OracleAccountData }>\n  > {\n    return await Promise.all(\n      AggregatorAccount.decodeCurrentRoundOracles(aggregator).map(async o => {\n        const oracleAccount = new OracleAccount(this.program, o);\n        return {\n          account: oracleAccount,\n          state: await oracleAccount.loadData(),\n        };\n      })\n    );\n  }\n\n  public static decodeJobPubkeys(\n    aggregator: types.AggregatorAccountData\n  ): Array<PublicKey> {\n    return aggregator.jobPubkeysData.slice(0, aggregator.jobPubkeysSize);\n  }\n\n  public async loadJobs(aggregator: types.AggregatorAccountData): Promise<\n    Array<{\n      account: JobAccount;\n      state: types.JobAccountData;\n      job: OracleJob;\n      weight: number;\n    }>\n  > {\n    const jobAccountDatas = await anchor.utils.rpc.getMultipleAccounts(\n      this.program.connection,\n      AggregatorAccount.decodeJobPubkeys(aggregator)\n    );\n\n    return await Promise.all(\n      jobAccountDatas.map(async j => {\n        if (!j?.account) {\n          throw new Error(\n            `Failed to fetch account data for job ${j?.publicKey}`\n          );\n        }\n        if (!j.account.owner.equals(this.program.programId)) {\n          throw new errors.IncorrectOwner(\n            this.program.programId,\n            j.account.owner\n          );\n        }\n        const jobAccount = new JobAccount(this.program, j.publicKey);\n        const jobState: types.JobAccountData = this.program.coder.decode(\n          'JobAccountData',\n          j.account.data\n        );\n        return {\n          account: jobAccount,\n          state: jobState,\n          job: OracleJob.decodeDelimited(jobState.data),\n          weight: Math.max(\n            aggregator.jobWeights[\n              aggregator.jobPubkeysData.findIndex((x: PublicKey) =>\n                x.equals(j.publicKey)\n              )\n            ] ?? 1,\n            1\n          ),\n        };\n      })\n    );\n  }\n\n  public getJobHashes(\n    jobs: Array<{\n      account: JobAccount;\n      state: types.JobAccountData;\n    }>\n  ): Array<Buffer> {\n    return jobs.map(j => Buffer.from(new Uint8Array(j.state.hash)));\n  }\n\n  /**\n   * Validates an aggregator's configuration.\n   *\n   * @param aggregator An object containing the aggregator's account data or a partial configuration.\n   * @param queue An object containing the OracleQueueAccountData.\n   * @param target An object containing the target configuration values to be verified.\n   *\n   * @throws {AggregatorConfigError} If any of the following conditions are met:\n   * - minUpdateDelaySeconds is less than 5 seconds\n   * - batchSize is greater than the queue size\n   * - minOracleResults is greater than batchSize\n   * - minJobResults is greater than the aggregator's jobPubkeysSize\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * aggregatorAccount.verifyConfig(\n   *   aggregatorData,\n   *   queueData,\n   *   {\n   *     batchSize: 10,\n   *     minOracleResults: 5,\n   *     minJobResults: 4,\n   *     minUpdateDelaySeconds: 10,\n   *   }\n   * );\n   * ```\n   */\n  public verifyConfig(\n    aggregator:\n      | types.AggregatorAccountData\n      | {\n          oracleRequestBatchSize: number;\n          minOracleResults: number;\n          minJobResults: number;\n          minUpdateDelaySeconds: number;\n          jobPubkeysSize: number;\n        },\n    queue: types.OracleQueueAccountData,\n    target: {\n      batchSize?: number;\n      minOracleResults?: number;\n      minJobResults?: number;\n      minUpdateDelaySeconds?: number;\n    }\n  ): void {\n    const numberOfOracles = queue.size;\n\n    const endState = {\n      batchSize: target.batchSize ?? aggregator.oracleRequestBatchSize,\n      minOracleResults: target.minOracleResults ?? aggregator.minOracleResults,\n      minJobResults: target.minJobResults ?? aggregator.minJobResults,\n      minUpdateDelaySeconds:\n        target.minUpdateDelaySeconds ?? aggregator.minUpdateDelaySeconds,\n    };\n\n    if (endState.minUpdateDelaySeconds < 5) {\n      throw new errors.AggregatorConfigError(\n        'minUpdateDelaySeconds',\n        'must be greater than 5 seconds'\n      );\n    }\n\n    if (endState.minJobResults > aggregator.jobPubkeysSize) {\n      throw new errors.AggregatorConfigError(\n        'minJobResults',\n        `must be less than the number of jobs (${aggregator.jobPubkeysSize})`\n      );\n    }\n\n    if (endState.batchSize > numberOfOracles) {\n      throw new errors.AggregatorConfigError(\n        'oracleRequestBatchSize',\n        `must be less than the number of oracles actively heartbeating on the queue (${numberOfOracles})`\n      );\n    }\n\n    if (endState.minOracleResults > endState.batchSize) {\n      throw new errors.AggregatorConfigError(\n        'minOracleResults',\n        `must be less than the oracleRequestBatchSize (${endState.batchSize})`\n      );\n    }\n  }\n\n  /**\n   * Creates a transaction object to set aggregator configuration parameters.\n   *\n   * @param payer The public key of the payer account.\n   * @param params An object containing partial configuration parameters to be set.\n   * @param options Optional transaction object options.\n   *\n   * @return A promise that resolves to a transaction object containing the setConfig instruction.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * const transactionObject = await aggregatorAccount.setConfigInstruction(\n   *   payerPublicKey,\n   *   {\n   *     name: 'New Aggregator Name',\n   *     metadata: 'New Aggregator Metadata',\n   *     batchSize: 10,\n   *     minOracleResults: 5,\n   *     minJobResults: 4,\n   *     minUpdateDelaySeconds: 10,\n   *     forceReportPeriod: 20,\n   *     varianceThreshold: 0.01,\n   *     basePriorityFee: 1,\n   *     priorityFeeBump: 0.1,\n   *     priorityFeeBumpPeriod: 60,\n   *     maxPriorityFeeMultiplier: 5,\n   *     force: false,\n   *   }\n   * );\n   * ```\n   */\n  public async setConfigInstruction(\n    payer: PublicKey,\n    params: Partial<{\n      name: string;\n      metadata: string;\n      batchSize: number;\n      minOracleResults: number;\n      minJobResults: number;\n      minUpdateDelaySeconds: number;\n      forceReportPeriod: number;\n      varianceThreshold: number;\n      authority: Keypair;\n      basePriorityFee: number;\n      priorityFeeBump: number;\n      priorityFeeBumpPeriod: number;\n      maxPriorityFeeMultiplier: number;\n      force: boolean;\n    }>,\n    options?: TransactionObjectOptions\n  ): Promise<TransactionObject> {\n    if (!(params.force ?? false)) {\n      const aggregator = await this.loadData();\n      const queueAccount = new QueueAccount(\n        this.program,\n        aggregator.queuePubkey\n      );\n      const queue = await queueAccount.loadData();\n      this.verifyConfig(aggregator, queue, {\n        batchSize: params.batchSize,\n        minOracleResults: params.minOracleResults,\n        minJobResults: params.minJobResults,\n        minUpdateDelaySeconds: params.minUpdateDelaySeconds,\n      });\n    }\n\n    const varianceThreshold = params.varianceThreshold ?? 0;\n    const setConfigIxn = types.aggregatorSetConfig(\n      this.program,\n      {\n        params: {\n          name: params.name\n            ? ([\n                ...Buffer.from(params.name, 'utf-8').slice(0, 32),\n              ] as Array<number>)\n            : null,\n          metadata: params.metadata\n            ? ([\n                ...Buffer.from(params.metadata, 'utf-8').slice(0, 128),\n              ] as Array<number>)\n            : null,\n          batchSize: params.batchSize ?? null,\n          minOracleResults: params.minOracleResults ?? null,\n          minUpdateDelaySeconds: params.minUpdateDelaySeconds ?? null,\n          minJobResults: params.minJobResults ?? null,\n          forceReportPeriod: params.forceReportPeriod ?? null,\n          varianceThreshold:\n            varianceThreshold >= 0\n              ? new types.BorshDecimal(\n                  types.SwitchboardDecimal.fromBig(new Big(varianceThreshold))\n                )\n              : null,\n          basePriorityFee: params.basePriorityFee ?? null,\n          priorityFeeBump: params.priorityFeeBump ?? null,\n          priorityFeeBumpPeriod: params.priorityFeeBumpPeriod ?? null,\n          maxPriorityFeeMultiplier: params.maxPriorityFeeMultiplier ?? null,\n        },\n      },\n      {\n        aggregator: this.publicKey,\n        authority: params.authority ? params.authority.publicKey : payer,\n      }\n    );\n\n    return new TransactionObject(\n      payer,\n      [setConfigIxn],\n      params.authority ? [params.authority] : [],\n      options\n    );\n  }\n\n  /**\n   * Sets an aggregator configuration parameters.\n   *\n   * @param params An object containing partial configuration parameters to be set.\n   * @param options Optional transaction object options.\n   *\n   * @return A promise that resolves to a transaction object containing the setConfig instruction.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * const transactionObject = await aggregatorAccount.setConfig(\n   *   {\n   *     name: 'New Aggregator Name',\n   *     metadata: 'New Aggregator Metadata',\n   *     batchSize: 10,\n   *     minOracleResults: 5,\n   *     minJobResults: 4,\n   *     minUpdateDelaySeconds: 10,\n   *     forceReportPeriod: 20,\n   *     varianceThreshold: 0.01,\n   *     basePriorityFee: 1,\n   *     priorityFeeBump: 0.1,\n   *     priorityFeeBumpPeriod: 60,\n   *     maxPriorityFeeMultiplier: 5,\n   *     force: false,\n   *   }\n   * );\n   * ```\n   */\n  public async setConfig(\n    params: Partial<{\n      name: string;\n      metadata: string;\n      batchSize: number;\n      minOracleResults: number;\n      minJobResults: number;\n      minUpdateDelaySeconds: number;\n      forceReportPeriod: number;\n      varianceThreshold: number;\n      authority?: Keypair;\n      basePriorityFee?: number;\n      priorityFeeBump?: number;\n      priorityFeeBumpPeriod?: number;\n      maxPriorityFeeMultiplier?: number;\n      force: boolean;\n    }>,\n    options?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const setConfigTxn = await this.setConfigInstruction(\n      this.program.walletPubkey,\n      params,\n      options\n    );\n    const txnSignature = await this.program.signAndSend(setConfigTxn);\n    return txnSignature;\n  }\n\n  public setQueueInstruction(\n    payer: PublicKey,\n    params: {\n      queueAccount: QueueAccount;\n      authority?: Keypair;\n    },\n    options?: TransactionObjectOptions\n  ): TransactionObject {\n    const setQueueIxn = types.aggregatorSetQueue(\n      this.program,\n      {\n        params: {},\n      },\n      {\n        aggregator: this.publicKey,\n        authority: params.authority ? params.authority.publicKey : payer,\n        queue: params.queueAccount.publicKey,\n      }\n    );\n    return new TransactionObject(\n      payer,\n      [setQueueIxn],\n      params.authority ? [params.authority] : [],\n      options\n    );\n  }\n\n  public async setQueue(\n    params: {\n      queueAccount: QueueAccount;\n      authority?: Keypair;\n    },\n    options?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const setQueueTxn = this.setQueueInstruction(\n      this.program.walletPubkey,\n      params,\n      options\n    );\n    const txnSignature = await this.program.signAndSend(setQueueTxn);\n    return txnSignature;\n  }\n\n  public addJobInstruction(\n    payer: PublicKey,\n    params: {\n      job: JobAccount;\n      weight?: number;\n      authority?: Keypair;\n    },\n    options?: TransactionObjectOptions\n  ): TransactionObject {\n    const authority = params.authority ? params.authority.publicKey : payer;\n    const addJobIxn = types.aggregatorAddJob(\n      this.program,\n      { params: { weight: params.weight ?? 1 } },\n      {\n        aggregator: this.publicKey,\n        authority: authority,\n        job: params.job.publicKey,\n      }\n    );\n    return new TransactionObject(\n      payer,\n      [addJobIxn],\n      params.authority ? [params.authority] : [],\n      options\n    );\n  }\n\n  public async addJob(\n    params: {\n      job: JobAccount;\n      weight?: number;\n      authority?: Keypair;\n    },\n    options?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const txn = this.addJobInstruction(\n      this.program.walletPubkey,\n      params,\n      options\n    );\n    const txnSignature = await this.program.signAndSend(txn);\n    return txnSignature;\n  }\n\n  public lockInstruction(\n    payer: PublicKey,\n    params: {\n      authority?: Keypair;\n    },\n    options?: TransactionObjectOptions\n  ): TransactionObject {\n    return new TransactionObject(\n      payer,\n      [\n        types.aggregatorLock(\n          this.program,\n          { params: {} },\n          {\n            aggregator: this.publicKey,\n            authority: params.authority ? params.authority.publicKey : payer,\n          }\n        ),\n      ],\n      params.authority ? [params.authority] : [],\n      options\n    );\n  }\n\n  public async lock(\n    params: {\n      authority?: Keypair;\n    },\n    options?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const lockTxn = this.lockInstruction(\n      this.program.walletPubkey,\n      params,\n      options\n    );\n    const txnSignature = await this.program.signAndSend(lockTxn);\n    return txnSignature;\n  }\n\n  public setAuthorityInstruction(\n    payer: PublicKey,\n    params: {\n      newAuthority: PublicKey;\n      authority?: Keypair;\n    },\n    options?: TransactionObjectOptions\n  ): TransactionObject {\n    return new TransactionObject(\n      payer,\n      [\n        types.aggregatorSetAuthority(\n          this.program,\n          { params: {} },\n          {\n            aggregator: this.publicKey,\n            authority: params.authority ? params.authority.publicKey : payer,\n            newAuthority: params.newAuthority,\n          }\n        ),\n      ],\n      params.authority ? [params.authority] : [],\n      options\n    );\n  }\n\n  public async setAuthority(\n    params: {\n      newAuthority: PublicKey;\n      authority?: Keypair;\n    },\n    options?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const setAuthorityTxn = this.setAuthorityInstruction(\n      this.program.walletPubkey,\n      params,\n      options\n    );\n    const txnSignature = await this.program.signAndSend(setAuthorityTxn);\n    return txnSignature;\n  }\n\n  public updateJobWeightInstruction(\n    payer: PublicKey,\n    params: {\n      job: JobAccount;\n      jobIdx: number;\n      weight: number;\n      authority?: Keypair;\n    },\n    options?: TransactionObjectOptions\n  ): TransactionObject {\n    const removeJob = this.removeJobInstruction(\n      payer,\n      {\n        job: params.job,\n        jobIdx: params.jobIdx,\n        authority: params.authority,\n      },\n      options\n    );\n    const addJob = this.addJobInstruction(payer, {\n      job: params.job,\n      weight: params.weight,\n      authority: params.authority,\n    });\n    return removeJob.combine(addJob);\n  }\n\n  public async updateJobWeight(\n    params: {\n      job: JobAccount;\n      jobIdx: number;\n      weight: number;\n      authority?: Keypair;\n    },\n    options?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const transaction = this.updateJobWeightInstruction(\n      this.program.walletPubkey,\n      params,\n      options\n    );\n    const signature = await this.program.signAndSend(transaction);\n    return signature;\n  }\n\n  public removeJobInstruction(\n    payer: PublicKey,\n    params: {\n      job: JobAccount;\n      jobIdx: number;\n      authority?: Keypair;\n    },\n    options?: TransactionObjectOptions\n  ): TransactionObject {\n    const authority = params.authority ? params.authority.publicKey : payer;\n    const removeJobIxn = types.aggregatorRemoveJob(\n      this.program,\n      { params: { jobIdx: params.jobIdx } },\n      {\n        aggregator: this.publicKey,\n        authority: authority,\n        job: params.job.publicKey,\n      }\n    );\n    return new TransactionObject(\n      payer,\n      [removeJobIxn],\n      params.authority ? [params.authority] : [],\n      options\n    );\n  }\n\n  public async removeJob(\n    params: {\n      job: JobAccount;\n      jobIdx: number;\n      authority?: Keypair;\n    },\n    options?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const removeJobTxn = this.removeJobInstruction(\n      this.program.walletPubkey,\n      params,\n      options\n    );\n    const txnSignature = await this.program.signAndSend(removeJobTxn);\n    return txnSignature;\n  }\n\n  public async openRoundInstruction(\n    payer: PublicKey,\n    params?: { payoutWallet?: PublicKey },\n    options?: TransactionObjectOptions\n  ): Promise<TransactionObject> {\n    const aggregatorData = await this.loadData();\n    const queueAccount = new QueueAccount(\n      this.program,\n      aggregatorData.queuePubkey\n    );\n    const queue = await queueAccount.loadData();\n\n    const {\n      permissionAccount,\n      permissionBump,\n      leaseAccount,\n      leaseBump,\n      leaseEscrow,\n    } = this.getAccounts(queueAccount, queue.authority);\n\n    const ixns: Array<TransactionInstruction> = [];\n\n    const payoutWallet =\n      params?.payoutWallet ?? this.program.mint.getAssociatedAddress(payer);\n    const payoutWalletAccountInfo =\n      await this.program.connection.getAccountInfo(payoutWallet);\n    if (payoutWalletAccountInfo === null) {\n      const [createTokenAccountTxn] =\n        this.program.mint.createAssocatedUserInstruction(payer);\n      ixns.push(...createTokenAccountTxn.ixns);\n    }\n\n    ixns.push(\n      types.aggregatorOpenRound(\n        this.program,\n        {\n          params: {\n            stateBump: this.program.programState.bump,\n            leaseBump,\n            permissionBump,\n            jitter: 0,\n          },\n        },\n        {\n          aggregator: this.publicKey,\n          lease: leaseAccount.publicKey,\n          oracleQueue: queueAccount.publicKey,\n          queueAuthority: queue.authority,\n          permission: permissionAccount.publicKey,\n          escrow: leaseEscrow,\n          programState: this.program.programState.publicKey,\n          payoutWallet: payoutWallet,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          dataBuffer: queue.dataBuffer,\n          mint: this.program.mint.address,\n        }\n      )\n    );\n\n    return new TransactionObject(payer, ixns, [], options);\n  }\n\n  public async openRound(\n    params?: {\n      payoutWallet?: PublicKey;\n    },\n    options?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const openRoundTxn = await this.openRoundInstruction(\n      this.program.walletPubkey,\n      params,\n      options\n    );\n    const txnSignature = await this.program.signAndSend(openRoundTxn);\n    return txnSignature;\n  }\n\n  public saveResultInstructionSync(\n    payer: PublicKey,\n    params: AggregatorSaveResultSyncParams,\n    options?: TransactionObjectOptions\n  ): TransactionObject {\n    const [oraclePermissionAccount, oraclePermissionBump] =\n      params.oraclePermission;\n\n    if (params.oracleIdx < 0 || params.oracleIdx > params.oracles.length - 1) {\n      throw new Error('Failed to find oracle in current round');\n    }\n\n    const saveResultIxn = types.aggregatorSaveResult(\n      this.program,\n      {\n        params: {\n          oracleIdx: params.oracleIdx,\n          error: params.error ?? false,\n          value: types.SwitchboardDecimal.fromBig(params.value).borsh,\n          jobsChecksum: [...this.produceJobsHash(params.jobs).digest()],\n          minResponse: types.SwitchboardDecimal.fromBig(params.minResponse)\n            .borsh,\n          maxResponse: types.SwitchboardDecimal.fromBig(params.maxResponse)\n            .borsh,\n          feedPermissionBump: params.permissionBump,\n          oraclePermissionBump: oraclePermissionBump,\n          leaseBump: params.leaseBump,\n          stateBump: this.program.programState.bump,\n        },\n      },\n      {\n        aggregator: this.publicKey,\n        oracle: params.oracles[params.oracleIdx].account.publicKey,\n        oracleAuthority: params.oracles[params.oracleIdx].state.oracleAuthority,\n        oracleQueue: params.queueAccount.publicKey,\n        queueAuthority: params.queueAuthority,\n        feedPermission: params.permissionAccount.publicKey,\n        oraclePermission: oraclePermissionAccount.publicKey,\n        lease: params.leaseAccount.publicKey,\n        escrow: params.leaseEscrow,\n        tokenProgram: spl.TOKEN_PROGRAM_ID,\n        programState: this.program.programState.publicKey,\n        historyBuffer: params.historyBuffer ?? this.publicKey,\n        mint: this.program.mint.address,\n      }\n    );\n\n    const remainingAccounts: Array<PublicKey> = [];\n    params.oracles.forEach(oracle =>\n      remainingAccounts.push(oracle.account.publicKey)\n    );\n    params.oracles.forEach(oracle =>\n      remainingAccounts.push(oracle.state.tokenAccount)\n    );\n    remainingAccounts.push(this.slidingWindowKey);\n\n    saveResultIxn.keys.push(\n      ...remainingAccounts.map((pubkey): AccountMeta => {\n        return { isSigner: false, isWritable: true, pubkey };\n      })\n    );\n\n    return new TransactionObject(payer, [saveResultIxn], [], options);\n  }\n\n  public async saveResultInstruction(\n    payer: PublicKey,\n    params: AggregatorSaveResultAsyncParams,\n    options?: TransactionObjectOptions\n  ): Promise<TransactionObject> {\n    const aggregator = params.aggregator ?? (await this.loadData());\n\n    const oracles =\n      params.oracles ?? (await this.loadCurrentRoundOracles(aggregator));\n\n    const oracleIdx =\n      params.oracleIdx ??\n      oracles.findIndex(o =>\n        o.account.publicKey.equals(params.oracleAccount.publicKey)\n      );\n\n    if (oracleIdx < 0 || oracleIdx > oracles.length - 1) {\n      throw new Error('Failed to find oracle in current round');\n    }\n\n    const queueAccount =\n      params.queueAccount ??\n      new QueueAccount(this.program, aggregator.queuePubkey);\n\n    const queueAuthority =\n      params.queueAuthority ?? (await queueAccount.loadData()).authority;\n\n    const [oraclePermissionAccount, oraclePermissionBump] =\n      params.oraclePermission ??\n      params.oracleAccount.getPermissionAccount(\n        queueAccount.publicKey,\n        queueAuthority\n      );\n\n    const accounts: AggregatorPdaAccounts =\n      params.permissionAccount === undefined ||\n      params.leaseAccount === undefined ||\n      params.leaseEscrow === undefined ||\n      params.permissionBump === undefined ||\n      params.leaseBump === undefined\n        ? this.getAccounts(queueAccount, queueAuthority)\n        : {\n            permissionAccount: params.permissionAccount,\n            permissionBump: params.permissionBump,\n            leaseAccount: params.leaseAccount,\n            leaseBump: params.leaseBump,\n            leaseEscrow: params.leaseEscrow,\n          };\n\n    const saveResultTxn = this.saveResultInstructionSync(\n      payer,\n      {\n        ...accounts,\n        queueAccount,\n        queueAuthority,\n        jobs: params.jobs,\n        historyBuffer: aggregator.historyBuffer.equals(PublicKey.default)\n          ? undefined\n          : aggregator.historyBuffer,\n        oracleIdx,\n        oraclePermission: [oraclePermissionAccount, oraclePermissionBump],\n        value: params.value,\n        minResponse: params.minResponse,\n        maxResponse: params.maxResponse,\n        error: params.error ?? false,\n        aggregator: aggregator,\n        oracles: oracles,\n      },\n      options\n    );\n    return saveResultTxn;\n  }\n\n  public async saveResult(\n    params: AggregatorSaveResultAsyncParams,\n    options?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const saveResultTxn = await this.saveResultInstruction(\n      this.program.walletPubkey,\n      params,\n      options\n    );\n    const txnSignature = await this.program.signAndSend(saveResultTxn);\n    return txnSignature;\n  }\n\n  public async fetchAccounts(\n    _aggregator?: types.AggregatorAccountData,\n    _queueAccount?: QueueAccount,\n    _queue?: types.OracleQueueAccountData,\n    commitment: Commitment = 'confirmed'\n  ): Promise<AggregatorAccounts> {\n    const aggregator = _aggregator ?? (await this.loadData());\n    const queueAccount =\n      _queueAccount ?? new QueueAccount(this.program, aggregator.queuePubkey);\n    const queue = _queue ?? (await queueAccount.loadData());\n\n    const {\n      permissionAccount,\n      permissionBump,\n      leaseAccount,\n      leaseEscrow,\n      leaseBump,\n    } = this.getAccounts(queueAccount, queue.authority);\n\n    const jobPubkeys = aggregator.jobPubkeysData.slice(\n      0,\n      aggregator.jobPubkeysSize\n    );\n\n    const accountInfos = await anchor.utils.rpc.getMultipleAccounts(\n      this.program.connection,\n      [\n        permissionAccount.publicKey,\n        leaseAccount.publicKey,\n        leaseEscrow,\n        ...jobPubkeys,\n      ],\n      commitment\n    );\n\n    const permissionAccountInfo = accountInfos.shift();\n    if (!permissionAccountInfo || !permissionAccountInfo.account) {\n      throw new Error(\n        `PermissionAccount has not been created yet for this aggregator`\n      );\n    }\n    const permission = types.PermissionAccountData.decode(\n      permissionAccountInfo.account.data\n    );\n\n    const leaseAccountInfo = accountInfos.shift();\n    if (!leaseAccountInfo || !leaseAccountInfo.account) {\n      throw new Error(\n        `LeaseAccount has not been created yet for this aggregator`\n      );\n    }\n    const lease = types.LeaseAccountData.decode(leaseAccountInfo.account.data);\n\n    const leaseEscrowAccountInfo = accountInfos.shift();\n    if (!leaseEscrowAccountInfo || !leaseEscrowAccountInfo.account) {\n      throw new Error(\n        `LeaseAccount escrow has not been created yet for this aggregator`\n      );\n    }\n    const leaseEscrowAccount = spl.unpackAccount(\n      leaseEscrow,\n      leaseEscrowAccountInfo.account\n    );\n\n    const jobs: Array<{\n      publicKey: PublicKey;\n      data: types.JobAccountData;\n      tasks: Array<OracleJob.ITask>;\n    }> = [];\n    accountInfos.map(accountInfo => {\n      if (!accountInfo || !accountInfo.account) {\n        throw new Error(`Failed to fetch JobAccount`);\n      }\n      const job = types.JobAccountData.decode(accountInfo.account.data);\n      const oracleJob = OracleJob.decodeDelimited(job.data);\n      jobs.push({\n        publicKey: accountInfo.publicKey,\n        data: job,\n        tasks: oracleJob.tasks,\n      });\n    });\n\n    return {\n      aggregator: {\n        publicKey: this.publicKey,\n        data: aggregator,\n      },\n      queue: {\n        publicKey: queueAccount.publicKey,\n        data: queue,\n      },\n      permission: {\n        publicKey: permissionAccount.publicKey,\n        bump: permissionBump,\n        data: permission,\n      },\n      lease: {\n        publicKey: leaseAccount.publicKey,\n        bump: leaseBump,\n        data: lease,\n        balance: this.program.mint.fromTokenAmount(leaseEscrowAccount.amount),\n      },\n      jobs: jobs,\n    };\n  }\n\n  public async toAccountsJSON(\n    _aggregator?: types.AggregatorAccountData,\n    _queueAccount?: QueueAccount,\n    _queue?: types.OracleQueueAccountData\n  ): Promise<AggregatorAccountsJSON> {\n    const accounts = await this.fetchAccounts(\n      _aggregator,\n      _queueAccount,\n      _queue\n    );\n\n    return {\n      publicKey: this.publicKey,\n      ...accounts.aggregator.data.toJSON(),\n      queue: {\n        publicKey: accounts.queue.publicKey,\n        ...accounts.queue.data.toJSON(),\n      },\n      permission: {\n        publicKey: accounts.permission.publicKey,\n        ...accounts.permission.data.toJSON(),\n        bump: accounts.permission.bump,\n      },\n      lease: {\n        publicKey: accounts.lease.publicKey,\n        ...accounts.lease.data.toJSON(),\n        bump: accounts.lease.bump,\n        balance: accounts.lease.balance,\n      },\n      jobs: accounts.jobs.map(j => {\n        return {\n          publicKey: j.publicKey,\n          ...j.data.toJSON(),\n          tasks: j.tasks,\n        };\n      }),\n    };\n  }\n\n  setSlidingWindowInstruction(\n    payer: PublicKey,\n    params: {\n      authority?: Keypair;\n      mode: types.AggregatorResolutionModeKind;\n    },\n    options?: TransactionObjectOptions\n  ): TransactionObject {\n    return new TransactionObject(\n      payer,\n      [\n        types.aggregatorSetResolutionMode(\n          this.program,\n          {\n            params: { mode: params.mode.discriminator },\n          },\n          {\n            aggregator: this.publicKey,\n            authority: params.authority ? params.authority.publicKey : payer,\n            slidingWindow: this.slidingWindowKey,\n            payer: payer,\n            systemProgram: SystemProgram.programId,\n          }\n        ),\n      ],\n      params.authority ? [params.authority] : [],\n      options\n    );\n  }\n\n  async setSlidingWindow(\n    params: {\n      authority?: Keypair;\n      mode: types.AggregatorResolutionModeKind;\n    },\n    options?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const setSlidingWindowTxn = this.setSlidingWindowInstruction(\n      this.program.walletPubkey,\n      params,\n      options\n    );\n    const txnSignature = await this.program.signAndSend(setSlidingWindowTxn);\n    return txnSignature;\n  }\n\n  async openRoundAndAwaitResult(\n    params?: { payoutWallet?: PublicKey } & {\n      aggregator?: types.AggregatorAccountData;\n    },\n    timeout = 30000,\n    options?: TransactionObjectOptions\n  ): Promise<[types.AggregatorAccountData, TransactionSignature | undefined]> {\n    const aggregator = params?.aggregator ?? (await this.loadData());\n    const currentRoundOpenSlot = aggregator.latestConfirmedRound.roundOpenSlot;\n\n    let ws: number | undefined = undefined;\n\n    const closeWebsocket = async () => {\n      if (ws !== undefined) {\n        await this.program.connection.removeAccountChangeListener(ws);\n        ws = undefined;\n      }\n    };\n\n    const statePromise: Promise<types.AggregatorAccountData> =\n      promiseWithTimeout(\n        timeout,\n        new Promise(\n          (resolve: (result: types.AggregatorAccountData) => void) => {\n            ws = this.onChange(aggregator => {\n              // if confirmed round slot larger than last open slot\n              // AND sliding window mode or sufficient oracle results\n              if (\n                aggregator.latestConfirmedRound.roundOpenSlot.gt(\n                  currentRoundOpenSlot\n                ) &&\n                (aggregator.resolutionMode.kind ===\n                  types.AggregatorResolutionMode.ModeSlidingResolution.kind ||\n                  (aggregator.latestConfirmedRound.numSuccess ?? 0) >=\n                    aggregator.minOracleResults)\n              ) {\n                resolve(aggregator);\n              }\n            });\n          }\n        )\n      ).finally(async () => {\n        await closeWebsocket();\n      });\n\n    const openRoundSignature = await this.openRound(params, options).catch(\n      async error => {\n        await closeWebsocket();\n        throw new Error(`Failed to call openRound, ${error}`);\n      }\n    );\n\n    const state = await statePromise;\n\n    await closeWebsocket();\n\n    return [state, openRoundSignature];\n  }\n\n  /**\n   * Await for the next round to close and return the aggregator round result\n   *\n   * @param roundOpenSlot - optional, the slot when the current round was opened. if not provided then it will be loaded.\n   * @param timeout - the number of milliseconds to wait for the round to close\n   *\n   * @throws {string} when the timeout interval is exceeded or when the latestConfirmedRound.roundOpenSlot exceeds the target roundOpenSlot\n   */\n  async nextRound(\n    roundOpenSlot?: anchor.BN,\n    timeout = 30000\n  ): Promise<types.AggregatorAccountData> {\n    const slot =\n      roundOpenSlot ?? (await this.loadData()).currentRound.roundOpenSlot;\n    let ws: number | undefined;\n\n    let result: types.AggregatorAccountData;\n    try {\n      result = await promiseWithTimeout(\n        timeout,\n        new Promise(\n          (resolve: (result: types.AggregatorAccountData) => void) => {\n            ws = this.onChange(aggregator => {\n              if (aggregator.latestConfirmedRound.roundOpenSlot.eq(slot)) {\n                resolve(aggregator);\n              }\n            });\n          }\n        )\n      );\n    } finally {\n      if (ws) {\n        await this.program.connection.removeAccountChangeListener(ws);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Load an aggregators {@linkcode AggregatorHistoryBuffer}.\n   * @return the list of historical samples attached to the aggregator.\n   */\n  async loadHistory(\n    startTimestamp?: number,\n    endTimestamp?: number\n  ): Promise<Array<types.AggregatorHistoryRow>> {\n    if (!this.history) {\n      this.history = new AggregatorHistoryBuffer(\n        this.program,\n        (await this.loadData()).historyBuffer\n      );\n    }\n\n    const history = await this.history.loadData(startTimestamp, endTimestamp);\n\n    return history;\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    publicKeys: Array<PublicKey>,\n    commitment: Commitment = 'confirmed'\n  ): Promise<\n    Array<{\n      account: AggregatorAccount;\n      data: types.AggregatorAccountData;\n    }>\n  > {\n    const aggregators: Array<{\n      account: AggregatorAccount;\n      data: types.AggregatorAccountData;\n    }> = [];\n\n    const accountInfos = await anchor.utils.rpc.getMultipleAccounts(\n      program.connection,\n      publicKeys,\n      commitment\n    );\n\n    for (const accountInfo of accountInfos) {\n      if (!accountInfo?.publicKey) {\n        continue;\n      }\n      try {\n        const account = new AggregatorAccount(program, accountInfo.publicKey);\n        const data = types.AggregatorAccountData.decode(\n          accountInfo.account.data\n        );\n        aggregators.push({ account, data });\n        // eslint-disable-next-line no-empty\n      } catch {}\n    }\n\n    return aggregators;\n  }\n\n  /**\n   * Calculates the required priority fee for a given aggregator\n   *\n   * Multiplier = the minimum of maxPriorityFeeMultiplier and (timestamp - lastUpdatedTimestamp) / priorityFeeBumpPeriod\n   * Fee = baseFee + basePriorityFee + priorityFeeBump * multiplier\n   *\n   * @param aggregator - the current aggregator state including its last updated timestamp and priority fee config\n   * @param timestamp - optional, the current unix timestamp. can provide the SolanaClock timestamp for better accuracy\n   * @param baseFee - optional, the Solana compute unit base fee\n   *\n   * @returns the solana priority fee to include in the save_result action\n   */\n  public static calculatePriorityFee(\n    aggregator: types.AggregatorAccountData,\n    timestamp = Math.round(Date.now() / 1000),\n    baseFee = 0 // base compute unit price\n  ): number {\n    // parse defaults\n    const lastUpdateTimestamp =\n      aggregator.latestConfirmedRound.roundOpenTimestamp.gt(new BN(0))\n        ? aggregator.latestConfirmedRound.roundOpenTimestamp.toNumber()\n        : timestamp; // on first update this would cause max multiplier\n    const priorityFeeBumpPeriod = Math.max(1, aggregator.priorityFeeBumpPeriod); // cant divide by 0\n    const maxPriorityFeeMultiplier = Math.max(\n      1,\n      aggregator.maxPriorityFeeMultiplier\n    );\n\n    // calculate staleness multiplier\n    const multiplier = Math.min(\n      (timestamp - lastUpdateTimestamp) / priorityFeeBumpPeriod,\n      maxPriorityFeeMultiplier\n    );\n\n    const feeBump = aggregator.priorityFeeBump * multiplier;\n    const fee = baseFee + aggregator.basePriorityFee + feeBump;\n    if (Number.isNaN(fee)) {\n      return 0;\n    }\n\n    // Should we enforce some upper limit? Like 1 SOL?\n    // Probably not, gives MEV bots a floor\n    return Math.round(fee);\n  }\n\n  /** Fetch the balance of an aggregator's lease */\n  public async fetchBalance(\n    leaseEscrow?: PublicKey,\n    queuePubkey?: PublicKey\n  ): Promise<number> {\n    const escrowPubkey =\n      leaseEscrow ??\n      this.getLeaseAccount(\n        queuePubkey ?? (await this.loadData()).queuePubkey\n      )[1];\n    const escrowBalance = await this.program.mint.fetchBalance(escrowPubkey);\n    if (escrowBalance === null) {\n      throw new errors.AccountNotFoundError('Lease Escrow', escrowPubkey);\n    }\n    return escrowBalance;\n  }\n\n  /** Create a transaction object that will fund an aggregator's lease up to a given balance */\n  public async fundUpToInstruction(\n    payer: PublicKey,\n    fundUpTo: number,\n    disableWrap = false\n  ): Promise<[TransactionObject | undefined, number | undefined]> {\n    const [leaseAccount, leaseEscrow] = this.getLeaseAccount(\n      (await this.loadData()).queuePubkey\n    );\n    const balance = await this.fetchBalance(leaseEscrow);\n    if (balance >= fundUpTo) {\n      return [undefined, undefined];\n    }\n\n    const fundAmount = fundUpTo - balance;\n\n    const leaseExtend = await leaseAccount.extendInstruction(payer, {\n      fundAmount,\n      disableWrap,\n    });\n    return [leaseExtend, fundAmount];\n  }\n\n  /** Fund an aggregator's lease up to a given balance */\n  public async fundUpTo(\n    payer: PublicKey,\n    fundUpTo: number,\n    disableWrap = false\n  ): Promise<[TransactionSignature | undefined, number | undefined]> {\n    const [fundUpToTxn, fundAmount] = await this.fundUpToInstruction(\n      payer,\n      fundUpTo,\n      disableWrap\n    );\n    if (!fundUpToTxn) {\n      return [undefined, undefined];\n    }\n\n    const txnSignature = await this.program.signAndSend(fundUpToTxn);\n    return [txnSignature, fundAmount!];\n  }\n\n  /** Create a set of transactions that will fund an aggregator's lease up to a given balance */\n  public static async fundMultipleUpToInstructions(\n    payer: PublicKey,\n    fundUpTo: number,\n    aggregators: Array<AggregatorAccount>,\n    options?: TransactionPackOptions | undefined\n  ): Promise<Array<TransactionObject>> {\n    if (aggregators.length === 0) {\n      throw new Error(`No aggregator accounts provided`);\n    }\n    const program = aggregators[0].program;\n\n    const txns: Array<TransactionObject> = [];\n    let wrapAmount = 0;\n\n    for (const aggregator of aggregators) {\n      const [depositTxn, depositAmount] = await aggregator.fundUpToInstruction(\n        payer,\n        fundUpTo,\n        true\n      );\n      if (depositTxn && depositAmount) {\n        txns.push(depositTxn);\n        wrapAmount = wrapAmount + depositAmount;\n      }\n    }\n\n    const [_, wrapTxn] = await program.mint.getOrCreateWrappedUserInstructions(\n      payer,\n      {\n        fundUpTo: wrapAmount,\n      }\n    );\n    if (wrapTxn) {\n      txns.unshift(wrapTxn);\n    }\n\n    return TransactionObject.pack(txns, options);\n  }\n\n  /** Fund multiple aggregator account lease's up to a given balance */\n  public static async fundMultipleUpTo(\n    fundUpTo: number,\n    aggregators: Array<AggregatorAccount>,\n    options?: TransactionPackOptions | undefined\n  ): Promise<Array<TransactionSignature>> {\n    if (aggregators.length === 0) {\n      throw new Error(`No aggregator accounts provided`);\n    }\n    const program = aggregators[0].program;\n\n    const txns = await AggregatorAccount.fundMultipleUpToInstructions(\n      program.walletPubkey,\n      fundUpTo,\n      aggregators,\n      options\n    );\n    const txnSignatures = await program.signAndSendAll(txns);\n    return txnSignatures;\n  }\n\n  public async closeInstructions(\n    payer: PublicKey,\n    params?: {\n      authority?: Keypair;\n      tokenWallet?: PublicKey;\n    },\n    opts?: TransactionObjectOptions\n  ): Promise<TransactionObject> {\n    if (this.program.cluster === 'mainnet-beta') {\n      throw new Error(\n        `Aggregators can only be closed with the devnet version of Switchboard`\n      );\n    }\n    const [tokenWallet, tokenWalletInit] = params?.tokenWallet\n      ? [params.tokenWallet, undefined]\n      : await this.program.mint.getOrCreateWrappedUserInstructions(payer, {\n          fundUpTo: 0,\n        });\n\n    const aggregator = await this.loadData();\n    const [queueAccount, queue] = await QueueAccount.load(\n      this.program,\n      aggregator.queuePubkey\n    );\n\n    const slidingWindowKey = this.slidingWindowKey;\n    const slidingWindowAccountInfo =\n      await this.program.connection.getAccountInfo(slidingWindowKey);\n\n    const {\n      permissionAccount,\n      permissionBump,\n      leaseAccount,\n      leaseBump,\n      leaseEscrow,\n    } = this.getAccounts(queueAccount, queue.authority);\n\n    const crankPubkey: PublicKey | null = aggregator.crankPubkey.equals(\n      PublicKey.default\n    )\n      ? null\n      : aggregator.crankPubkey;\n    let dataBuffer: PublicKey | null = null;\n    if (crankPubkey !== null) {\n      const [crankAccount, crank] = await CrankAccount.load(\n        this.program,\n        crankPubkey\n      );\n      dataBuffer = crank.dataBuffer;\n    }\n\n    const accounts = {\n      authority: aggregator.authority,\n      aggregator: this.publicKey,\n      permission: permissionAccount.publicKey,\n      lease: leaseAccount.publicKey,\n      escrow: leaseEscrow,\n      oracleQueue: queueAccount.publicKey,\n      queueAuthority: queue.authority,\n      programState: queueAccount.program.programState.publicKey,\n      solDest: payer,\n      escrowDest: tokenWallet,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    };\n\n    if (crankPubkey !== null && dataBuffer !== null) {\n      accounts['crank'] = crankPubkey;\n      accounts['dataBuffer'] = dataBuffer;\n    } else {\n      accounts['crank'] = null;\n      accounts['dataBuffer'] = null;\n    }\n\n    if (slidingWindowAccountInfo !== null) {\n      accounts['slidingWindow'] = slidingWindowKey;\n    } else {\n      accounts['slidingWindow'] = null;\n    }\n\n    const closeIxn = await (\n      (this.program as any)._program as anchor.Program\n    ).methods\n      .aggregatorClose({\n        stateBump: this.program.programState.bump,\n        permissionBump: permissionBump,\n        leaseBump: leaseBump,\n      })\n      .accounts(\n        accounts as any // compiler expects all types to be pubkeys\n      )\n      .instruction();\n\n    const closeTxn = tokenWalletInit\n      ? tokenWalletInit.add(\n          closeIxn,\n          params?.authority ? [params.authority] : undefined\n        )\n      : new TransactionObject(\n          payer,\n          [closeIxn],\n          params?.authority ? [params.authority] : []\n        );\n\n    // add txn options\n    return new TransactionObject(\n      closeTxn.payer,\n      closeTxn.ixns,\n      closeTxn.signers,\n      opts\n    );\n  }\n\n  public async close(\n    params?: {\n      authority?: Keypair;\n      tokenWallet?: PublicKey;\n    },\n    opts?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const closeTxn = await this.closeInstructions(\n      this.program.walletPubkey,\n      params,\n      opts\n    );\n    const txnSignature = await this.program.signAndSend(closeTxn);\n    return txnSignature;\n  }\n}\n\n/**\n * Parameters to initialize an aggregator account.\n */\nexport interface AggregatorInitParams {\n  /**\n   *  Name of the aggregator to store on-chain.\n   */\n  name?: string;\n  /**\n   *  Metadata of the aggregator to store on-chain.\n   */\n  metadata?: string;\n  /**\n   *  Number of oracles to request on aggregator update.\n   */\n  batchSize: number;\n  /**\n   *  Minimum number of oracle responses required before a round is validated.\n   */\n  minRequiredOracleResults: number;\n  /**\n   *  Minimum number of feed jobs suggested to be successful before an oracle\n   *  sends a response.\n   */\n  minRequiredJobResults: number;\n  /**\n   *  Minimum number of seconds required between aggregator rounds.\n   */\n  minUpdateDelaySeconds: number;\n  /**\n   *  unix_timestamp for which no feed update will occur before.\n   */\n  startAfter?: number;\n  /**\n   *  Change percentage required between a previous round and the current round.\n   *  If variance percentage is not met, reject new oracle responses.\n   */\n  varianceThreshold?: number;\n  /**\n   *  Number of seconds for which, even if the variance threshold is not passed,\n   *  accept new responses from oracles.\n   */\n  forceReportPeriod?: number;\n  /**\n   *  unix_timestamp after which funds may be withdrawn from the aggregator.\n   *  null/undefined/0 means the feed has no expiration.\n   */\n  expiration?: number;\n  /**\n   *  If true, this aggregator is disallowed from being updated by a crank on the queue.\n   */\n  disableCrank?: boolean;\n  /**\n   *  Optional pre-existing keypair to use for aggregator initialization.\n   */\n  keypair?: Keypair;\n  /**\n   *  If included, this keypair will be the aggregator authority rather than\n   *  the aggregator keypair.\n   */\n  authority?: PublicKey;\n  /**\n   *  The queue to which this aggregator will be linked\n   */\n  queueAccount: QueueAccount;\n  /**\n   * The authority of the queue.\n   */\n  queueAuthority: PublicKey;\n}\n\nexport interface AggregatorSetQueueParams {\n  queueAccount: QueueAccount;\n  authority?: Keypair;\n}\n\n/**\n * Parameters required to open an aggregator round\n */\nexport interface AggregatorOpenRoundParams {\n  /**\n   *  The oracle queue from which oracles are assigned this update.\n   */\n  oracleQueueAccount: QueueAccount;\n  /**\n   *  The token wallet which will receive rewards for calling update on this feed.\n   */\n  payoutWallet: PublicKey;\n}\n\n/**\n * Parameters for creating and setting a history buffer for an aggregator\n */\nexport interface AggregatorSetHistoryBufferParams {\n  /**\n   * Authority keypair for the aggregator.\n   */\n  authority?: Keypair;\n  /**\n   * Number of elements for the history buffer to fit.\n   */\n  size: number;\n}\n\n/**\n * Parameters for which oracles must submit for responding to update requests.\n */\nexport interface AggregatorSaveResultParams {\n  /**\n   *  Index in the list of oracles in the aggregator assigned to this round update.\n   */\n  oracleIdx: number;\n  /**\n   *  Reports that an error occured and the oracle could not send a value.\n   */\n  error: boolean;\n  /**\n   *  Value the oracle is responding with for this update.\n   */\n  value: Big;\n  /**\n   *  The minimum value this oracle has seen this round for the jobs listed in the\n   *  aggregator.\n   */\n  minResponse: Big;\n  /**\n   *  The maximum value this oracle has seen this round for the jobs listed in the\n   *  aggregator.\n   */\n  maxResponse: Big;\n  /**\n   *  List of OracleJobs that were performed to produce this result.\n   */\n  jobs: Array<OracleJob>;\n  /**\n   *  Authority of the queue the aggregator is attached to.\n   */\n  queueAuthority: PublicKey;\n  /**\n   *  Program token mint.\n   */\n  tokenMint: PublicKey;\n  /**\n   *  List of parsed oracles.\n   */\n  oracles: Array<types.OracleAccountData>;\n}\n\nexport type AggregatorAccountsJSON = types.AggregatorAccountDataJSON & {\n  publicKey: PublicKey;\n  queue: types.OracleQueueAccountDataJSON & { publicKey: PublicKey };\n  permission: types.PermissionAccountDataJSON & {\n    bump: number;\n    publicKey: PublicKey;\n  };\n  lease: types.LeaseAccountDataJSON & { bump: number; publicKey: PublicKey } & {\n    balance: number;\n  };\n  jobs: Array<\n    types.JobAccountDataJSON & {\n      publicKey: PublicKey;\n      tasks: Array<OracleJob.ITask>;\n    }\n  >;\n};\nexport type AggregatorAccounts = {\n  aggregator: {\n    publicKey: PublicKey;\n    data: types.AggregatorAccountData;\n  };\n  queue: {\n    publicKey: PublicKey;\n    data: types.OracleQueueAccountData;\n  };\n  permission: {\n    publicKey: PublicKey;\n    bump: number;\n    data: types.PermissionAccountData;\n  };\n  lease: {\n    publicKey: PublicKey;\n    bump: number;\n    balance: number;\n    data: types.LeaseAccountData;\n  };\n  jobs: Array<{\n    publicKey: PublicKey;\n    data: types.JobAccountData;\n    tasks: Array<OracleJob.ITask>;\n  }>;\n};\n\nexport type AggregatorPdaAccounts = {\n  permissionAccount: PermissionAccount;\n  permissionBump: number;\n  leaseAccount: LeaseAccount;\n  leaseBump: number;\n  leaseEscrow: PublicKey;\n};\n\nexport type SaveResultResponse = {\n  jobs: Array<OracleJob>;\n  // oracleAccount: OracleAccount;\n  value: Big;\n  minResponse: Big;\n  maxResponse: Big;\n  error?: boolean;\n};\n\nexport type SaveResultAccounts = AggregatorPdaAccounts & {\n  aggregator: types.AggregatorAccountData;\n  // queue\n  queueAccount: QueueAccount;\n  queueAuthority: PublicKey;\n  // oracle\n  oraclePermission: [PermissionAccount, number];\n  oracles: Array<{ account: OracleAccount; state: types.OracleAccountData }>;\n  oracleIdx: number;\n  // history\n  historyBuffer?: PublicKey;\n};\n\nexport type AggregatorSaveResultSyncParams = SaveResultResponse &\n  SaveResultAccounts;\nexport type AggregatorSaveResultAsyncParams = SaveResultResponse &\n  (Partial<SaveResultAccounts> & { oracleAccount: OracleAccount });\n"]}
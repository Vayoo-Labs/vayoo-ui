{"version":3,"file":"account.js","sourceRoot":"","sources":["../../../src/accounts/account.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,0DAA4C;AAE5C,MAAsB,OAAO;IAG3B;;;;OAIG;IACH,YACkB,OAA2B,EAC3C,SAAyC;QADzB,YAAO,GAAP,OAAO,CAAoB;QAG3C,IAAI,CAAC,SAAS;YACZ,OAAO,SAAS,KAAK,QAAQ;gBAC3B,CAAC,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;gBACtC,CAAC,CAAC,SAAS,CAAC;IAClB,CAAC;CAWF;AA3BD,0BA2BC;AAKD,4CAYsB;AAgBT,QAAA,oBAAoB,GAAG,MAAM,CAAC,IAAI,CAAC;IAC9C,EAAE;IACF,EAAE;IACF,EAAE;IACF,EAAE;IACF,EAAE;IACF,EAAE;IACF,GAAG;IACH,GAAG,EAAE,WAAW;CACjB,CAAC,CAAC;AA+CU,QAAA,iBAAiB,GAAwC,IAAI,GAAG,CAAC;IAC5E,CAAC,iCAAqB,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,YAAY,CAAC;IACrE,CAAC,oCAAwB,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,eAAe,CAAC;IAC3E,CAAC,4BAAgB,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC;IAC3D,CAAC,0BAAc,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC;IACvD,CAAC,4BAAgB,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC;IAC3D,CAAC,6BAAiB,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,QAAQ,CAAC;IAC7D,CAAC,iCAAqB,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,YAAY,CAAC;IACrE,CAAC,mBAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,cAAc,CAAC;IACzD,CAAC,kCAAsB,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC;IACjE,CAAC,oCAAwB,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,eAAe,CAAC;IAC3E,CAAC,0BAAc,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC;IACvD,CAAC,4BAAoB,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,QAAQ,CAAC;CACnD,CAAC,CAAC","sourcesContent":["import { SwitchboardProgram } from '../SwitchboardProgram';\n\nimport * as anchor from '@coral-xyz/anchor';\n\nexport abstract class Account<T> {\n  public readonly publicKey: anchor.web3.PublicKey;\n\n  /**\n   * Account constructor\n   * @param program SwitchboardProgram\n   * @param publicKey PublicKey of the on-chain resource\n   */\n  public constructor(\n    public readonly program: SwitchboardProgram,\n    publicKey: anchor.web3.PublicKey | string\n  ) {\n    this.publicKey =\n      typeof publicKey === 'string'\n        ? new anchor.web3.PublicKey(publicKey)\n        : publicKey;\n  }\n\n  /**\n   * @return on-chain account size.\n   */\n  public abstract get size(): number;\n\n  /**\n   * Retrieve and decode the data in this account.\n   */\n  public abstract loadData(): Promise<T>;\n}\n\n/** Callback to pass deserialized account data when updated on-chain */\nexport type OnAccountChangeCallback<T> = (accountData: T) => void;\n\nimport {\n  AggregatorAccountData,\n  BufferRelayerAccountData,\n  CrankAccountData,\n  JobAccountData,\n  LeaseAccountData,\n  OracleAccountData,\n  OracleQueueAccountData,\n  PermissionAccountData,\n  SbState,\n  SlidingResultAccountData,\n  VrfAccountData,\n} from '../generated';\n\nimport { AggregatorAccount } from './aggregatorAccount';\nimport { AggregatorHistoryBuffer } from './aggregatorHistoryBuffer';\nimport { BufferRelayerAccount } from './bufferRelayAccount';\nimport { CrankAccount } from './crankAccount';\nimport { CrankDataBuffer } from './crankDataBuffer';\nimport { JobAccount } from './jobAccount';\nimport { LeaseAccount } from './leaseAccount';\nimport { OracleAccount } from './oracleAccount';\nimport { PermissionAccount } from './permissionAccount';\nimport { ProgramStateAccount } from './programStateAccount';\nimport { QueueAccount } from './queueAccount';\nimport { QueueDataBuffer } from './queueDataBuffer';\nimport { VrfAccount } from './vrfAccount';\n\nexport const BUFFER_DISCRIMINATOR = Buffer.from([\n  66,\n  85,\n  70,\n  70,\n  69,\n  82,\n  120,\n  120, // BUFFERxx\n]);\n\nexport type SwitchboardAccountType =\n  | 'Aggregator'\n  | 'AggregatorHistory'\n  | 'BufferRelayer'\n  | 'Crank'\n  | 'CrankBuffer'\n  | 'Job'\n  | 'Lease'\n  | 'Oracle'\n  | 'Permission'\n  | 'ProgramState'\n  | 'Queue'\n  | 'QueueBuffer'\n  | 'SlidingWindow'\n  | 'Vrf'\n  | 'Buffer';\n\nexport type SwitchboardAccount =\n  | AggregatorAccount\n  | AggregatorHistoryBuffer\n  | BufferRelayerAccount\n  | CrankAccount\n  | CrankDataBuffer\n  | JobAccount\n  | LeaseAccount\n  | OracleAccount\n  | PermissionAccount\n  | ProgramStateAccount\n  | QueueAccount\n  | QueueDataBuffer\n  | VrfAccount;\n\nexport type SwitchboardAccountData =\n  | AggregatorAccountData\n  | BufferRelayerAccountData\n  | CrankAccountData\n  | JobAccountData\n  | LeaseAccountData\n  | OracleAccountData\n  | PermissionAccountData\n  | SbState\n  | OracleQueueAccountData\n  | SlidingResultAccountData\n  | VrfAccountData;\n\nexport const DISCRIMINATOR_MAP: Map<string, SwitchboardAccountType> = new Map([\n  [AggregatorAccountData.discriminator.toString('utf-8'), 'Aggregator'],\n  [BufferRelayerAccountData.discriminator.toString('utf-8'), 'BufferRelayer'],\n  [CrankAccountData.discriminator.toString('utf-8'), 'Crank'],\n  [JobAccountData.discriminator.toString('utf-8'), 'Job'],\n  [LeaseAccountData.discriminator.toString('utf-8'), 'Lease'],\n  [OracleAccountData.discriminator.toString('utf-8'), 'Oracle'],\n  [PermissionAccountData.discriminator.toString('utf-8'), 'Permission'],\n  [SbState.discriminator.toString('utf-8'), 'ProgramState'],\n  [OracleQueueAccountData.discriminator.toString('utf-8'), 'Queue'],\n  [SlidingResultAccountData.discriminator.toString('utf-8'), 'SlidingWindow'],\n  [VrfAccountData.discriminator.toString('utf-8'), 'Vrf'],\n  [BUFFER_DISCRIMINATOR.toString('utf-8'), 'Buffer'],\n]);\n"]}
{"version":3,"file":"oracle.js","sourceRoot":"","sources":["../../../src/json/oracle.ts"],"names":[],"mappings":";;;AACA,oCAAuC;AAEvC,mCAKiB;AAEjB,6CAA0C;AAE1C,MAAa,UAAU;IAerB,YAAY,MAA2B;QACrC,IAAI,CAAC,IAAI,GAAG,IAAA,mBAAW,EAAC,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;QAC5C,IAAI,CAAC,QAAQ,GAAG,IAAA,mBAAW,EAAC,MAAM,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;QAEpD,UAAU;QACV,IAAI,CAAC,WAAW,GAAG,IAAA,mBAAW,EAAC,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;QAEzD,aAAa;QACb,IAAI,CAAC,MAAM,GAAG,IAAA,oBAAY,EAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAEpD,WAAW;QACX,MAAM,aAAa,GAAG,IAAA,mBAAW,EAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QACvD,IAAI,CAAC,SAAS,GAAG,aAAa,CAAC,CAAC,CAAC,IAAA,mBAAW,EAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAExE,MAAM,iBAAiB,GAAG,IAAA,mBAAW,EAAC,MAAM,EAAE,sBAAsB,CAAC,CAAC;QACtE,IAAI,CAAC,oBAAoB,GAAG,iBAAiB;YAC3C,CAAC,CAAC,IAAA,mBAAW,EAAC,iBAAiB,CAAC;YAChC,CAAC,CAAC,iBAAO,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,MAA2B;QAC7C,MAAM,WAAW,GAAsB,EAAE,CAAC;QAC1C,IAAI,SAAS,IAAI,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;YACxD,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE;gBACnC,WAAW,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;aAC1C;SACF;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,MAAM;QACJ,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAA,uBAAe,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS;YACvE,oBAAoB,EAAE,IAAA,uBAAe,EAAC,IAAI,CAAC,oBAAoB,CAAC;SACjE,CAAC;IACJ,CAAC;CACF;AAvDD,gCAuDC","sourcesContent":["import { CreateQueueOracleParams } from '../accounts';\nimport { loadKeypair } from '../utils';\n\nimport {\n  keypairToString,\n  parseBoolean,\n  parseNumber,\n  parseString,\n} from './utils';\n\nimport { Keypair } from '@solana/web3.js';\n\nexport class OracleJson implements CreateQueueOracleParams {\n  // oracle params\n  name: string;\n  metadata: string;\n\n  // staking params\n  stakeAmount: number;\n\n  // permission params\n  enable: boolean;\n\n  // accounts\n  authority?: Keypair;\n  stakingWalletKeypair: Keypair;\n\n  constructor(object: Record<string, any>) {\n    this.name = parseString(object, 'name', '');\n    this.metadata = parseString(object, 'metadata', '');\n\n    // staking\n    this.stakeAmount = parseNumber(object, 'stakeAmount', 0);\n\n    // permission\n    this.enable = parseBoolean(object, 'enable', false);\n\n    // accounts\n    const authorityPath = parseString(object, 'authority');\n    this.authority = authorityPath ? loadKeypair(authorityPath) : undefined;\n\n    const stakingWalletPath = parseString(object, 'stakingWalletKeypair');\n    this.stakingWalletKeypair = stakingWalletPath\n      ? loadKeypair(stakingWalletPath)\n      : Keypair.generate();\n  }\n\n  static loadMultiple(object: Record<string, any>): Array<OracleJson> {\n    const oracleJsons: Array<OracleJson> = [];\n    if ('oracles' in object && Array.isArray(object.oracles)) {\n      for (const oracle of object.oracles) {\n        oracleJsons.push(new OracleJson(oracle));\n      }\n    }\n\n    return oracleJsons;\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      metadata: this.metadata,\n      stakeAmount: this.stakeAmount,\n      authority: this.authority ? keypairToString(this.authority) : undefined,\n      stakingWalletKeypair: keypairToString(this.stakingWalletKeypair),\n    };\n  }\n}\n"]}
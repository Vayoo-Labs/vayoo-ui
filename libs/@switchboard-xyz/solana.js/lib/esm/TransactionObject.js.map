{"version":3,"file":"TransactionObject.js","sourceRoot":"","sources":["../../src/TransactionObject.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AACtC,OAAO,KAAK,MAAM,MAAM,UAAU,CAAC;AACnC,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,EAEL,gCAAgC,GAEjC,MAAM,sBAAsB,CAAC;AAG9B,OAAO,EACL,oBAAoB,EAGpB,gBAAgB,EAChB,SAAS,EACT,WAAW,EAEX,kBAAkB,EAElB,oBAAoB,GACrB,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,KAAK,EAAE,MAAM,yBAAyB,CAAC;AAChD,OAAO,CAAC,MAAM,QAAQ,CAAC;AAwBvB;;GAEG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,CACvB,CAAyB,EACzB,CAAyB,EAChB,EAAE;IACX,OAAO,CACL,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;QAC/B,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM;QAC/B,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,CAChC,CAAC;AACJ,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,CAAyB,EACzB,CAAyB,EAChB,EAAE;IACX,OAAO,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACjE,CAAC,CAAC;AAYF,MAAM,OAAO,iBAAiB;IAS5B,4FAA4F;IAC5F,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;IAC3E,CAAC;IAED,YACE,KAAgB,EAChB,IAAmC,EACnC,OAAuB,EACvB,OAAkC;QAElC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,IAAI,CAAC,kBAAkB,GAAG,OAAO,EAAE,kBAAkB,IAAI,KAAK,CAAC;QAC/D,IAAI,CAAC,gBAAgB,GAAG,OAAO,EAAE,gBAAgB,IAAI,CAAC,CAAC;QACvD,IAAI,CAAC,gBAAgB,GAAG,OAAO,EAAE,gBAAgB,IAAI,CAAC,CAAC;QAEvD,MAAM,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;QAE/B,MAAM,eAAe,GAAG,iBAAiB,CAAC,sBAAsB,CAC9D,OAAO,EAAE,gBAAgB,CAC1B,CAAC;QACF,IACE,eAAe,KAAK,SAAS;YAC7B,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC,KAAK,CAAC,CAAC,EACrE;YACA,YAAY,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;SACvC;QAED,MAAM,WAAW,GAAG,iBAAiB,CAAC,sBAAsB,CAC1D,OAAO,EAAE,gBAAgB,CAC1B,CAAC;QACF,IACE,WAAW,KAAK,SAAS;YACzB,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC,EACjE;YACA,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;SACnC;QAED,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC;QAEzB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED,2CAA2C;IACnC,MAAM,CAAC,GAAG,CAChB,KAAgB,EAChB,OAKC;QAED,MAAM,OAAO,GAAG,OAAO,EAAE,OAAO,IAAI,EAAE,CAAC;QACvC,MAAM,QAAQ,GAAG,OAAO,EAAE,QAAQ,IAAI,EAAE,CAAC;QACzC,OAAO,IAAI,iBAAiB,CAAC,KAAK,EAAE,CAAC,GAAG,OAAO,EAAE,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;IAC9E,CAAC;IAED,MAAM;QACJ,OAAO,iBAAiB,CAAC,MAAM,CAC7B,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,kBAAkB,CACxB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,sBAAsB,CAC3B,gBAAyB;QAEzB,IAAI,gBAAgB,IAAI,gBAAgB,GAAG,CAAC,EAAE;YAC5C,OAAO,oBAAoB,CAAC,mBAAmB,CAAC;gBAC9C,KAAK,EAAE,gBAAgB;aACxB,CAAC,CAAC;SACJ;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,CAAC,sBAAsB,CAC3B,gBAAyB;QAEzB,IAAI,gBAAgB,IAAI,gBAAgB,GAAG,CAAC,EAAE;YAC5C,OAAO,oBAAoB,CAAC,mBAAmB,CAAC;gBAC9C,aAAa,EAAE,gBAAgB;aAChC,CAAC,CAAC;SACJ;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACI,OAAO,CACZ,GAA2D,EAC3D,OAAwB;QAExB,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACtB,OAAO,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC;SACzB;aAAM;YACL,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SACtB;QACD,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,OAAO,EAAE;YACX,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBAClB,IACE,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAC5B,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CACrC,KAAK,CAAC,CAAC,EACR;oBACA,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACpB;YACH,CAAC,CAAC,CAAC;SACJ;QACD,iBAAiB,CAAC,MAAM,CACtB,IAAI,CAAC,KAAK,EACV,OAAO,EACP,UAAU,EACV,IAAI,CAAC,kBAAkB,CACxB,CAAC;QACF,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,MAAM,CACX,GAA2B,EAC3B,KAAa,EACb,OAAwB;QAExB,MAAM,OAAO,GAAkC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9D,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;QAC9B,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,OAAO,EAAE;YACX,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBAClB,IACE,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAC5B,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CACrC,KAAK,CAAC,CAAC,EACR;oBACA,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACpB;YACH,CAAC,CAAC,CAAC;SACJ;QACD,iBAAiB,CAAC,MAAM,CACtB,IAAI,CAAC,KAAK,EACV,OAAO,EACP,UAAU,EACV,IAAI,CAAC,kBAAkB,CACxB,CAAC;QACF,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACI,GAAG,CACR,GAA2D,EAC3D,OAAwB;QAExB,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACtB,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;SACtB;aAAM;YACL,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACnB;QACD,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,OAAO,EAAE;YACX,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBAClB,IACE,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAC5B,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CACrC,KAAK,CAAC,CAAC,EACR;oBACA,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACpB;YACH,CAAC,CAAC,CAAC;SACJ;QACD,iBAAiB,CAAC,MAAM,CACtB,IAAI,CAAC,KAAK,EACV,OAAO,EACP,UAAU,EACV,IAAI,CAAC,kBAAkB,CACxB,CAAC;QACF,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,MAAM,CAClB,KAAgB,EAChB,IAAmC,EACnC,OAAuB,EACvB,kBAA2B;QAE3B,qCAAqC;QACrC,IAAI,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YACnC,MAAM,IAAI,MAAM,CAAC,+BAA+B,EAAE,CAAC;SACpD;QAED,0BAA0B;QAC1B,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACrB,OAAO;SACR;QAED,MAAM,SAAS,GAAG,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;QACrE,kBAAkB;QAClB,IAAI,SAAS,GAAG,EAAE,EAAE;YAClB,MAAM,IAAI,MAAM,CAAC,mCAAmC,CAAC,SAAS,CAAC,CAAC;SACjE;QAED,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE;YACnD,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YACzD,OAAO,QAAQ,CAAC;QAClB,CAAC,EAAE,IAAI,GAAG,EAAU,CAAC,CAAC;QACtB,IAAI,cAAc,CAAC,IAAI,GAAG,EAAE,EAAE;YAC5B,MAAM,IAAI,MAAM,CAAC,+BAA+B,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SACvE;QAED,MAAM,OAAO,GAAW,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAEpD,yBAAyB;QACzB,MAAM,IAAI,GAAG,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACjD,IAAI,IAAI,GAAG,gBAAgB,GAAG,OAAO,EAAE;YACrC,MAAM,IAAI,MAAM,CAAC,qCAAqC,CAAC,IAAI,CAAC,CAAC;SAC9D;QAED,iBAAiB;QACjB,iBAAiB,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACxD,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,IAAI,CAAC,KAAgB,EAAE,IAAmC;QACtE,MAAM,YAAY,GAAG,CAAC,GAAW,EAAE,EAAE;YACnC,MAAM,KAAK,GAAG,IAAI,KAAK,EAAU,CAAC;YAClC,IAAI,MAAM,GAAG,GAAG,CAAC;YACjB,SAAS;gBACP,IAAI,IAAI,GAAG,MAAM,GAAG,IAAI,CAAC;gBACzB,MAAM,KAAK,CAAC,CAAC;gBACb,IAAI,MAAM,KAAK,CAAC,EAAE;oBAChB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACjB,MAAM;iBACP;qBAAM;oBACL,IAAI,IAAI,IAAI,CAAC;oBACb,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAClB;aACF;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;QAEF,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE;YAC9C,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBACf,IAAI,CAAC,CAAC,QAAQ,EAAE;oBACd,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;iBAClC;YACH,CAAC,CAAC,CAAC;YACH,OAAO,OAAO,CAAC;QACjB,CAAC,EAAE,IAAI,GAAG,EAAU,CAAC,CAAC;QAEtB,wCAAwC;QACxC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE;YACrC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;SAClC;QAED,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC;YAC1B,QAAQ,EAAE,SAAS,CAAC,OAAO;YAC3B,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;YACzB,oBAAoB,EAAE,SAAS;SAChC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;QAEhB,MAAM,OAAO,GACX,GAAG,CAAC,gBAAgB,EAAE,CAAC,MAAM;YAC7B,UAAU,CAAC,IAAI,GAAG,EAAE;YACpB,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;QAEvC,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,IAAI,IAAI;QACN,OAAO,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IAED;;;OAGG;IACI,OAAO,CAAC,WAA8B;QAC3C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YACzC,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;SACtE;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;IACzD,CAAC;IAEO,MAAM,CAAC,aAAa,CAC1B,KAAgB,EAChB,IAAmC,EACnC,OAAuB;QAEvB,2BAA2B;QAC3B,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE;YAC9C,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBACf,IAAI,CAAC,CAAC,QAAQ,EAAE;oBACd,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;iBAClC;YACH,CAAC,CAAC,CAAC;YACH,OAAO,OAAO,CAAC;QACjB,CAAC,EAAE,IAAI,GAAG,EAAU,CAAC,CAAC;QAEtB,IAAI,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE;YACpC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;SACrC;QAED,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YAClB,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,EAAE;gBAC1C,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC3C;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,UAAU,CAAC,IAAI,GAAG,CAAC,EAAE;YACvB,MAAM,IAAI,MAAM,CAAC,6BAA6B,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;SACxE;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,OAA2B;QACtC,IAAI,WAAW,IAAI,OAAO,EAAE;YAC1B,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC;gBAC1B,QAAQ,EAAE,IAAI,CAAC,KAAK;gBACpB,SAAS,EAAE,OAAO,CAAC,SAAS;gBAC5B,cAAc,EAAE,OAAO,CAAC,cAAc;aACvC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;YACrB,OAAO,GAAG,CAAC;SACZ;QAED,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC;YAC1B,QAAQ,EAAE,IAAI,CAAC,KAAK;YACpB,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;SACnD,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;QACrB,OAAO,GAAG,CAAC;IACb,CAAC;IAEM,cAAc,CAAC,OAA2B;QAC/C,IAAI,WAAW,IAAI,OAAO,EAAE;YAC1B,MAAM,SAAS,GAAG,IAAI,kBAAkB,CAAC;gBACvC,QAAQ,EAAE,IAAI,CAAC,KAAK;gBACpB,eAAe,EAAE,OAAO,CAAC,SAAS,CAAC,KAAK;gBACxC,YAAY,EAAE,IAAI,CAAC,IAAI;aACxB,CAAC,CAAC,sBAAsB,EAAE,CAAC;YAC5B,MAAM,WAAW,GAAG,IAAI,oBAAoB,CAAC,SAAS,CAAC,CAAC;YACxD,OAAO,WAAW,CAAC;SACpB;QAED,MAAM,SAAS,GAAG,IAAI,kBAAkB,CAAC;YACvC,QAAQ,EAAE,IAAI,CAAC,KAAK;YACpB,eAAe,EAAE,OAAO,CAAC,SAAS;YAClC,YAAY,EAAE,IAAI,CAAC,IAAI;SACxB,CAAC,CAAC,sBAAsB,EAAE,CAAC;QAC5B,MAAM,WAAW,GAAG,IAAI,oBAAoB,CAAC,SAAS,CAAC,CAAC;QACxD,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;OAEG;IACI,IAAI,CACT,OAA2B,EAC3B,OAAwB;QAExB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAChC,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;QAErC,IAAI,OAAO,EAAE;YACX,UAAU,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;SAChC;QAED,IAAI,UAAU,CAAC,MAAM,EAAE;YACrB,GAAG,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC;SACzB;QAED,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,IAAI,CAChB,KAA+B,EAC/B,OAAgC;QAEhC,MAAM,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;QACxC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;SAC5C;QAED,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CACvB,IAAI;aACD,MAAM,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;YACtB,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YACjC,OAAO,MAAM,CAAC;QAChB,CAAC,EAAE,IAAI,GAAG,EAAU,CAAC;aACpB,MAAM,EAAE,CACZ,CAAC;QAEF,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;SACnE;QACD,MAAM,KAAK,GAAG,IAAI,SAAS,CAAC,MAAM,CAAC,KAAK,EAAG,CAAC,CAAC;QAE7C,MAAM,OAAO,GAAmB,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACpE,MAAM,IAAI,GAAkC,CAAC,CAAC,OAAO,CACnD,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CACtB,CAAC;QAEF,OAAO,iBAAiB,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACnE,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,QAAQ,CACpB,KAAgB,EAChB,KAAoC,EACpC,OAAwB,EACxB,OAAgC;QAEhC,MAAM,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;QACxB,MAAM,IAAI,GAA6B,EAAE,CAAC;QAE1C,IAAI,GAAG,GAAG,iBAAiB,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC,MAAM,EAAE;YAClB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAG,CAAC;YAC1B,MAAM,UAAU,GAAG,aAAa,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;YAC9D,IAAI;gBACF,GAAG,CAAC,MAAM,CACR,GAAG,EACH,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,IAAI,CAAC,CAAC,EAClD,UAAU,CACX,CAAC;aACH;YAAC,MAAM;gBACN,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACf,GAAG,GAAG,iBAAiB,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAC5C,GAAG,CAAC,MAAM,CACR,GAAG,EACH,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,IAAI,CAAC,CAAC,EAClD,UAAU,CACX,CAAC;aACH;SACF;QAED,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACf,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,cAAc,CAChC,QAAwB,EACxB,IAA8B,EAC9B,OAA+B,gCAAgC,EAC/D,UAA+B,EAC/B,KAAK,GAAG,CAAC;QAET,IAAI,SAAS;YAAE,MAAM,IAAI,MAAM,CAAC,gCAAgC,EAAE,CAAC;QAEnE,MAAM,aAAa,GAAgC,EAAE,CAAC;QACtD,IAAI,KAAK,EAAE,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAC3C,aAAa,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;YACtE,IACE,CAAC,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC;gBACrB,KAAK;gBACL,OAAO,KAAK,KAAK,QAAQ;gBACzB,KAAK,GAAG,CAAC,EACT;gBACA,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC;aACpB;SACF;QAED,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,WAAW,CACf,QAAwB,EACxB,OAA+B,gCAAgC,EAC/D,UAA+B;QAE/B,IAAI,SAAS;YAAE,MAAM,IAAI,MAAM,CAAC,gCAAgC,EAAE,CAAC;QACnE,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;YACtC,MAAM,IAAI,MAAM,CAAC,+BAA+B,EAAE,CAAC;QACrD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAC1C,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC3C;QAED,MAAM,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACnE,OAAO,CAAC,OAAO,CAAE,QAAQ,CAAC,MAAuB,CAAC,KAAK,CAAC,CAAC;QAEzD,IAAI;YACF,oBAAoB;YACpB,IACE,IAAI;gBACJ,OAAO,IAAI,CAAC,gBAAgB,KAAK,SAAS;gBAC1C,IAAI,CAAC,gBAAgB,EACrB;gBACA,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAC5B,UAAU,IAAI,CAAC,MAAM,QAAQ,CAAC,UAAU,CAAC,kBAAkB,EAAE,CAAC,CAC/D,CAAC;gBACF,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,eAAe,CAC5D,WAAW,EACX,OAAO,EACP,IAAI,CACL,CAAC;gBACF,OAAO,YAAY,CAAC;aACrB;YAED,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAC5B,UAAU,IAAI,CAAC,MAAM,QAAQ,CAAC,UAAU,CAAC,kBAAkB,EAAE,CAAC,CAC/D,CAAC;YACF,OAAO,MAAM,QAAQ,CAAC,cAAc,CAAC,WAAW,EAAE,OAAO,EAAE;gBACzD,GAAG,gCAAgC;gBACnC,GAAG,IAAI;aACR,CAAC,CAAC;SACJ;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,GAAG,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;YAC/B,IAAI,GAAG,KAAK,IAAI,EAAE;gBAChB,MAAM,KAAK,CAAC;aACb;YAED,MAAM,GAAG,CAAC;SACX;IACH,CAAC;CACF;AAED,SAAS,aAAa,CACpB,KAAgB,EAChB,IAAmC,EACnC,OAAuB;IAEvB,MAAM,UAAU,GAAG,CAAC,GAAG,OAAO,CAAC,CAAC;IAChC,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE;QAC9C,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YACf,IAAI,CAAC,CAAC,QAAQ,EAAE;gBACd,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;aAClC;QACH,CAAC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;IACjB,CAAC,EAAE,IAAI,GAAG,EAAU,CAAC,CAAC;IAEtB,MAAM,eAAe,GAAG,UAAU,CAAC,MAAM,CACvC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAC1E,CAAC;IAEF,OAAO,eAAe,CAAC;AACzB,CAAC","sourcesContent":["import { isBrowser } from './browser';\nimport * as errors from './errors';\nimport { fromTxError } from './generated';\nimport {\n  AnchorWallet,\n  DEFAULT_SEND_TRANSACTION_OPTIONS,\n  SendTransactionOptions,\n} from './SwitchboardProgram';\n\nimport { AnchorProvider } from '@coral-xyz/anchor';\nimport {\n  ComputeBudgetProgram,\n  Keypair,\n  NonceInformation,\n  PACKET_DATA_SIZE,\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n  TransactionMessage,\n  TransactionSignature,\n  VersionedTransaction,\n} from '@solana/web3.js';\nimport { sleep } from '@switchboard-xyz/common';\nimport _ from 'lodash';\n\nexport interface ITransactionObject extends Required<TransactionObjectOptions> {\n  /** The public key of the account that will pay the transaction fees */\n  payer: PublicKey;\n  /** An array of TransactionInstructions that will be added to the transaction */\n  ixns: Array<TransactionInstruction>;\n  /** An array of signers used to sign the transaction before sending. This may not include the payer keypair for web wallet support */\n  signers: Array<Keypair>;\n}\n\nexport interface TransactionObjectOptions {\n  enableDurableNonce?: boolean;\n  computeUnitPrice?: number;\n  computeUnitLimit?: number;\n}\n\nexport type TransactionPackOptions = TransactionObjectOptions & {\n  // instructions to be added first in all txns\n  preIxns?: Array<TransactionInstruction>;\n  // instructions to be added last in all txns\n  postIxns?: Array<TransactionInstruction>;\n};\n\n/**\n Compare two instructions to see if a transaction already includes a given type of instruction. Does not compare if the ixn has the same data.\n */\nexport const ixnsEqual = (\n  a: TransactionInstruction,\n  b: TransactionInstruction\n): boolean => {\n  return (\n    a.programId.equals(b.programId) &&\n    a.keys.length === b.keys.length &&\n    JSON.stringify(a) === JSON.stringify(b) &&\n    a.data.length === b.data.length\n  );\n};\n\n/**\n Compare two instructions to see if a transaction already includes a given type of instruction. Returns false if the ixn data is different.\n */\nexport const ixnsDeepEqual = (\n  a: TransactionInstruction,\n  b: TransactionInstruction\n): boolean => {\n  return ixnsEqual(a, b) && Buffer.compare(a.data, b.data) === 0;\n};\n\nexport type TransactionOptions =\n  | {\n      blockhash: string;\n      lastValidBlockHeight: number;\n    }\n  | {\n      nonceInfo: NonceInformation;\n      minContextSlot: number;\n    };\n\nexport class TransactionObject implements ITransactionObject {\n  enableDurableNonce: boolean;\n  computeUnitPrice: number;\n  computeUnitLimit: number;\n\n  payer: PublicKey;\n  ixns: Array<TransactionInstruction>;\n  signers: Array<Keypair>;\n\n  /** Return the number of instructions, including the durable nonce placeholder if enabled */\n  get length(): number {\n    return this.enableDurableNonce ? this.ixns.length + 1 : this.ixns.length;\n  }\n\n  constructor(\n    payer: PublicKey,\n    ixns: Array<TransactionInstruction>,\n    signers: Array<Keypair>,\n    options?: TransactionObjectOptions\n  ) {\n    this.payer = payer;\n\n    this.signers = signers;\n\n    this.enableDurableNonce = options?.enableDurableNonce ?? false;\n    this.computeUnitPrice = options?.computeUnitPrice ?? 0;\n    this.computeUnitLimit = options?.computeUnitLimit ?? 0;\n\n    const instructions = [...ixns];\n\n    const computeLimitIxn = TransactionObject.getComputeUnitLimitIxn(\n      options?.computeUnitLimit\n    );\n    if (\n      computeLimitIxn !== undefined &&\n      instructions.findIndex(ixn => ixnsEqual(ixn, computeLimitIxn)) === -1\n    ) {\n      instructions.unshift(computeLimitIxn);\n    }\n\n    const priorityTxn = TransactionObject.getComputeUnitPriceIxn(\n      options?.computeUnitPrice\n    );\n    if (\n      priorityTxn !== undefined &&\n      instructions.findIndex(ixn => ixnsEqual(ixn, priorityTxn)) === -1\n    ) {\n      instructions.unshift(priorityTxn);\n    }\n\n    this.ixns = instructions;\n\n    this.verify();\n  }\n\n  /** Build a new transaction with options */\n  private static new(\n    payer: PublicKey,\n    options?: TransactionObjectOptions & {\n      // instructions to be added first in the new txn\n      preIxns?: Array<TransactionInstruction>;\n      // instructions to be added last in the new txn\n      postIxns?: Array<TransactionInstruction>;\n    }\n  ): TransactionObject {\n    const preIxns = options?.preIxns ?? [];\n    const postIxns = options?.postIxns ?? [];\n    return new TransactionObject(payer, [...preIxns, ...postIxns], [], options);\n  }\n\n  verify() {\n    return TransactionObject.verify(\n      this.payer,\n      this.ixns,\n      this.signers,\n      this.enableDurableNonce\n    );\n  }\n\n  static getComputeUnitLimitIxn(\n    computeUnitLimit?: number\n  ): TransactionInstruction | undefined {\n    if (computeUnitLimit && computeUnitLimit > 0) {\n      return ComputeBudgetProgram.setComputeUnitLimit({\n        units: computeUnitLimit,\n      });\n    }\n\n    return undefined;\n  }\n\n  static getComputeUnitPriceIxn(\n    computeUnitPrice?: number\n  ): TransactionInstruction | undefined {\n    if (computeUnitPrice && computeUnitPrice > 0) {\n      return ComputeBudgetProgram.setComputeUnitPrice({\n        microLamports: computeUnitPrice,\n      });\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Append instructions to the beginning of a TransactionObject\n   */\n  public unshift(\n    ixn: TransactionInstruction | Array<TransactionInstruction>,\n    signers?: Array<Keypair>\n  ): TransactionObject {\n    const newIxns = [...this.ixns];\n    if (Array.isArray(ixn)) {\n      newIxns.unshift(...ixn);\n    } else {\n      newIxns.unshift(ixn);\n    }\n    const newSigners = [...this.signers];\n    if (signers) {\n      signers.forEach(s => {\n        if (\n          newSigners.findIndex(signer =>\n            signer.publicKey.equals(s.publicKey)\n          ) === -1\n        ) {\n          newSigners.push(s);\n        }\n      });\n    }\n    TransactionObject.verify(\n      this.payer,\n      newIxns,\n      newSigners,\n      this.enableDurableNonce\n    );\n    this.ixns = newIxns;\n    this.signers = newSigners;\n    return this;\n  }\n\n  public insert(\n    ixn: TransactionInstruction,\n    index: number,\n    signers?: Array<Keypair>\n  ) {\n    const newIxns: Array<TransactionInstruction> = [...this.ixns];\n    newIxns.splice(index, 0, ixn);\n    const newSigners = [...this.signers];\n    if (signers) {\n      signers.forEach(s => {\n        if (\n          newSigners.findIndex(signer =>\n            signer.publicKey.equals(s.publicKey)\n          ) === -1\n        ) {\n          newSigners.push(s);\n        }\n      });\n    }\n    TransactionObject.verify(\n      this.payer,\n      newIxns,\n      newSigners,\n      this.enableDurableNonce\n    );\n    this.ixns = newIxns;\n    this.signers = newSigners;\n    return this;\n  }\n\n  /**\n   * Append instructions to the end of a TransactionObject\n   */\n  public add(\n    ixn: TransactionInstruction | Array<TransactionInstruction>,\n    signers?: Array<Keypair>\n  ): TransactionObject {\n    const newIxns = [...this.ixns];\n    if (Array.isArray(ixn)) {\n      newIxns.push(...ixn);\n    } else {\n      newIxns.push(ixn);\n    }\n    const newSigners = [...this.signers];\n    if (signers) {\n      signers.forEach(s => {\n        if (\n          newSigners.findIndex(signer =>\n            signer.publicKey.equals(s.publicKey)\n          ) === -1\n        ) {\n          newSigners.push(s);\n        }\n      });\n    }\n    TransactionObject.verify(\n      this.payer,\n      newIxns,\n      newSigners,\n      this.enableDurableNonce\n    );\n    this.ixns = newIxns;\n    this.signers = newSigners;\n    return this;\n  }\n\n  /**\n   * Verify a transaction object has less than 10 instructions, less than 1232 bytes, and contains all required signers minus the payer\n   * @throws if more than 10 instructions, serialized size is greater than 1232 bytes, or if object is missing a required signer minus the payer\n   */\n  public static verify(\n    payer: PublicKey,\n    ixns: Array<TransactionInstruction>,\n    signers: Array<Keypair>,\n    enableDurableNonce: boolean\n  ) {\n    // verify payer is not default pubkey\n    if (payer.equals(PublicKey.default)) {\n      throw new errors.SwitchboardProgramReadOnlyError();\n    }\n\n    // if empty object, return\n    if (ixns.length === 0) {\n      return;\n    }\n\n    const ixnLength = enableDurableNonce ? ixns.length + 1 : ixns.length;\n    // verify num ixns\n    if (ixnLength > 10) {\n      throw new errors.TransactionInstructionOverflowError(ixnLength);\n    }\n\n    const uniqueAccounts = ixns.reduce((accounts, ixn) => {\n      ixn.keys.forEach(a => accounts.add(a.pubkey.toBase58()));\n      return accounts;\n    }, new Set<string>());\n    if (uniqueAccounts.size > 32) {\n      throw new errors.TransactionAccountOverflowError(uniqueAccounts.size);\n    }\n\n    const padding: number = enableDurableNonce ? 96 : 0;\n\n    // verify serialized size\n    const size = TransactionObject.size(payer, ixns);\n    if (size > PACKET_DATA_SIZE - padding) {\n      throw new errors.TransactionSerializationOverflowError(size);\n    }\n\n    // verify signers\n    TransactionObject.verifySigners(payer, ixns, signers);\n  }\n\n  /**\n   * Return the serialized size of an array of TransactionInstructions\n   */\n  public static size(payer: PublicKey, ixns: Array<TransactionInstruction>) {\n    const encodeLength = (len: number) => {\n      const bytes = new Array<number>();\n      let remLen = len;\n      for (;;) {\n        let elem = remLen & 0x7f;\n        remLen >>= 7;\n        if (remLen === 0) {\n          bytes.push(elem);\n          break;\n        } else {\n          elem |= 0x80;\n          bytes.push(elem);\n        }\n      }\n      return bytes;\n    };\n\n    const reqSigners = ixns.reduce((signers, ixn) => {\n      ixn.keys.map(a => {\n        if (a.isSigner) {\n          signers.add(a.pubkey.toBase58());\n        }\n      });\n      return signers;\n    }, new Set<string>());\n\n    // need to include the payer as a signer\n    if (!reqSigners.has(payer.toBase58())) {\n      reqSigners.add(payer.toBase58());\n    }\n\n    const txn = new Transaction({\n      feePayer: PublicKey.default,\n      blockhash: '1'.repeat(32),\n      lastValidBlockHeight: 200000000,\n    }).add(...ixns);\n\n    const txnSize =\n      txn.serializeMessage().length +\n      reqSigners.size * 64 +\n      encodeLength(reqSigners.size).length;\n\n    return txnSize;\n  }\n\n  get size(): number {\n    return TransactionObject.size(this.payer, this.ixns);\n  }\n\n  /**\n   * Try to combine two {@linkcode TransactionObject}'s\n   * @throws if verification fails. See TransactionObject.verify\n   */\n  public combine(otherObject: TransactionObject): TransactionObject {\n    if (!this.payer.equals(otherObject.payer)) {\n      throw new Error(`Cannot combine transactions with different payers`);\n    }\n    return this.add(otherObject.ixns, otherObject.signers);\n  }\n\n  private static verifySigners(\n    payer: PublicKey,\n    ixns: Array<TransactionInstruction>,\n    signers: Array<Keypair>\n  ) {\n    // get all required signers\n    const reqSigners = ixns.reduce((signers, ixn) => {\n      ixn.keys.map(a => {\n        if (a.isSigner) {\n          signers.add(a.pubkey.toBase58());\n        }\n      });\n      return signers;\n    }, new Set<string>());\n\n    if (reqSigners.has(payer.toBase58())) {\n      reqSigners.delete(payer.toBase58());\n    }\n\n    signers.forEach(s => {\n      if (reqSigners.has(s.publicKey.toBase58())) {\n        reqSigners.delete(s.publicKey.toBase58());\n      }\n    });\n\n    if (reqSigners.size > 0) {\n      throw new errors.TransactionMissingSignerError(Array.from(reqSigners));\n    }\n  }\n\n  /**\n   * Convert the TransactionObject into a Solana Transaction\n   */\n  public toTxn(options: TransactionOptions): Transaction {\n    if ('nonceInfo' in options) {\n      const txn = new Transaction({\n        feePayer: this.payer,\n        nonceInfo: options.nonceInfo,\n        minContextSlot: options.minContextSlot,\n      }).add(...this.ixns);\n      return txn;\n    }\n\n    const txn = new Transaction({\n      feePayer: this.payer,\n      blockhash: options.blockhash,\n      lastValidBlockHeight: options.lastValidBlockHeight,\n    }).add(...this.ixns);\n    return txn;\n  }\n\n  public toVersionedTxn(options: TransactionOptions): VersionedTransaction {\n    if ('nonceInfo' in options) {\n      const messageV0 = new TransactionMessage({\n        payerKey: this.payer,\n        recentBlockhash: options.nonceInfo.nonce,\n        instructions: this.ixns,\n      }).compileToLegacyMessage();\n      const transaction = new VersionedTransaction(messageV0);\n      return transaction;\n    }\n\n    const messageV0 = new TransactionMessage({\n      payerKey: this.payer,\n      recentBlockhash: options.blockhash,\n      instructions: this.ixns,\n    }).compileToLegacyMessage();\n    const transaction = new VersionedTransaction(messageV0);\n    return transaction;\n  }\n\n  /**\n   * Return a Transaction signed by the provided signers\n   */\n  public sign(\n    options: TransactionOptions,\n    signers?: Array<Keypair>\n  ): Transaction {\n    const txn = this.toTxn(options);\n    const allSigners = [...this.signers];\n\n    if (signers) {\n      allSigners.unshift(...signers);\n    }\n\n    if (allSigners.length) {\n      txn.sign(...allSigners);\n    }\n\n    return txn;\n  }\n\n  /**\n   * Pack an array of TransactionObject's into as few transactions as possible.\n   */\n  public static pack(\n    _txns: Array<TransactionObject>,\n    options?: TransactionPackOptions\n  ): Array<TransactionObject> {\n    const txns = [..._txns.filter(Boolean)];\n    if (txns.length === 0) {\n      throw new Error(`No transactions to pack`);\n    }\n\n    const payers = Array.from(\n      txns\n        .reduce((payers, txn) => {\n          payers.add(txn.payer.toBase58());\n          return payers;\n        }, new Set<string>())\n        .values()\n    );\n\n    if (payers.length > 1) {\n      throw new Error(`Packed transactions should have the same payer`);\n    }\n    const payer = new PublicKey(payers.shift()!);\n\n    const signers: Array<Keypair> = _.flatten(txns.map(t => t.signers));\n    const ixns: Array<TransactionInstruction> = _.flatten(\n      txns.map(t => t.ixns)\n    );\n\n    return TransactionObject.packIxns(payer, ixns, signers, options);\n  }\n\n  /**\n   * Pack an array of TransactionInstructions into as few transactions as possible. Assumes only a single signer\n   */\n  public static packIxns(\n    payer: PublicKey,\n    _ixns: Array<TransactionInstruction>,\n    signers?: Array<Keypair>,\n    options?: TransactionPackOptions\n  ): Array<TransactionObject> {\n    const ixns = [..._ixns];\n    const txns: Array<TransactionObject> = [];\n\n    let txn = TransactionObject.new(payer, options);\n    while (ixns.length) {\n      const ixn = ixns.shift()!;\n      const reqSigners = filterSigners(payer, [ixn], signers ?? []);\n      try {\n        txn.insert(\n          ixn,\n          txn.ixns.length - (options?.postIxns?.length ?? 0),\n          reqSigners\n        );\n      } catch {\n        txns.push(txn);\n        txn = TransactionObject.new(payer, options);\n        txn.insert(\n          ixn,\n          txn.ixns.length - (options?.postIxns?.length ?? 0),\n          reqSigners\n        );\n      }\n    }\n\n    txns.push(txn);\n    return txns;\n  }\n\n  public static async signAndSendAll(\n    provider: AnchorProvider,\n    txns: Array<TransactionObject>,\n    opts: SendTransactionOptions = DEFAULT_SEND_TRANSACTION_OPTIONS,\n    txnOptions?: TransactionOptions,\n    delay = 0\n  ): Promise<Array<TransactionSignature>> {\n    if (isBrowser) throw new errors.SwitchboardProgramIsBrowserError();\n\n    const txnSignatures: Array<TransactionSignature> = [];\n    for await (const [i, txn] of txns.entries()) {\n      txnSignatures.push(await txn.signAndSend(provider, opts, txnOptions));\n      if (\n        i !== txns.length - 1 &&\n        delay &&\n        typeof delay === 'number' &&\n        delay > 0\n      ) {\n        await sleep(delay);\n      }\n    }\n\n    return txnSignatures;\n  }\n\n  async signAndSend(\n    provider: AnchorProvider,\n    opts: SendTransactionOptions = DEFAULT_SEND_TRANSACTION_OPTIONS,\n    txnOptions?: TransactionOptions\n  ): Promise<TransactionSignature> {\n    if (isBrowser) throw new errors.SwitchboardProgramIsBrowserError();\n    if (this.payer.equals(PublicKey.default))\n      throw new errors.SwitchboardProgramReadOnlyError();\n    if (!this.payer.equals(provider.publicKey)) {\n      throw new Error(`Payer keypair mismatch`);\n    }\n\n    const signers = filterSigners(this.payer, this.ixns, this.signers);\n    signers.unshift((provider.wallet as AnchorWallet).payer);\n\n    try {\n      // skip confirmation\n      if (\n        opts &&\n        typeof opts.skipConfrimation === 'boolean' &&\n        opts.skipConfrimation\n      ) {\n        const transaction = this.toTxn(\n          txnOptions ?? (await provider.connection.getLatestBlockhash())\n        );\n        const txnSignature = await provider.connection.sendTransaction(\n          transaction,\n          signers,\n          opts\n        );\n        return txnSignature;\n      }\n\n      const transaction = this.toTxn(\n        txnOptions ?? (await provider.connection.getLatestBlockhash())\n      );\n      return await provider.sendAndConfirm(transaction, signers, {\n        ...DEFAULT_SEND_TRANSACTION_OPTIONS,\n        ...opts,\n      });\n    } catch (error) {\n      const err = fromTxError(error);\n      if (err === null) {\n        throw error;\n      }\n\n      throw err;\n    }\n  }\n}\n\nfunction filterSigners(\n  payer: PublicKey,\n  ixns: Array<TransactionInstruction>,\n  signers: Array<Keypair>\n): Array<Keypair> {\n  const allSigners = [...signers];\n  const reqSigners = ixns.reduce((signers, ixn) => {\n    ixn.keys.map(a => {\n      if (a.isSigner) {\n        signers.add(a.pubkey.toBase58());\n      }\n    });\n    return signers;\n  }, new Set<string>());\n\n  const filteredSigners = allSigners.filter(\n    s => !s.publicKey.equals(payer) && reqSigners.has(s.publicKey.toBase58())\n  );\n\n  return filteredSigners;\n}\n"]}
{"version":3,"file":"queueAccount.js","sourceRoot":"","sources":["../../../src/accounts/queueAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import * as errors from '../errors';\nimport * as types from '../generated';\nimport {\n  PermitOracleHeartbeat,\n  PermitOracleQueueUsage,\n  PermitVrfRequests,\n} from '../generated/types/SwitchboardPermission';\nimport { SolanaClock } from '../SolanaClock';\nimport { SwitchboardProgram } from '../SwitchboardProgram';\nimport { TransactionObject } from '../TransactionObject';\n\nimport { Account, OnAccountChangeCallback } from './account';\nimport { AggregatorAccount, AggregatorInitParams } from './aggregatorAccount';\nimport { AggregatorHistoryBuffer } from './aggregatorHistoryBuffer';\nimport { BufferRelayerAccount, BufferRelayerInit } from './bufferRelayAccount';\nimport { CrankAccount, CrankInitParams } from './crankAccount';\nimport { JobAccount, JobInitParams } from './jobAccount';\nimport { LeaseAccount, LeaseInitParams } from './leaseAccount';\nimport {\n  OracleAccount,\n  OracleInitParams,\n  OracleStakeParams,\n} from './oracleAccount';\nimport { PermissionAccount, PermissionSetParams } from './permissionAccount';\nimport { QueueDataBuffer } from './queueDataBuffer';\nimport { VrfAccount, VrfInitParams } from './vrfAccount';\nimport { VrfLiteAccount, VrfLiteInitParams } from './vrfLiteAccount';\n\nimport * as anchor from '@coral-xyz/anchor';\nimport * as spl from '@solana/spl-token';\nimport {\n  AccountInfo,\n  Commitment,\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  SystemProgram,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport { Big, BN, SwitchboardDecimal, toUtf8 } from '@switchboard-xyz/common';\n\n/**\n * Account type representing an oracle queue's configuration along with a buffer account holding a list of oracles that are actively heartbeating.\n *\n * A QueueAccount is responsible for allocating update requests to it's round robin queue of {@linkcode OracleAccount}'s.\n *\n * Data: {@linkcode types.OracleQueueAccountData}\n *\n * Buffer: {@linkcode QueueDataBuffer}\n */\nexport class QueueAccount extends Account<types.OracleQueueAccountData> {\n  static accountName = 'OracleQueueAccountData';\n\n  /** The {@linkcode QueueDataBuffer} storing a list of oracle's that are actively heartbeating */\n  dataBuffer?: QueueDataBuffer;\n\n  public static size = 1269;\n\n  /**\n   * Get the size of an {@linkcode QueueAccount} on-chain.\n   */\n  public readonly size = this.program.account.oracleQueueAccountData.size;\n\n  /**\n   * Returns the queue's name buffer in a stringified format.\n   */\n  public static getName = (queue: types.OracleQueueAccountData) =>\n    toUtf8(queue.name);\n\n  /**\n   * Returns the queue's metadata buffer in a stringified format.\n   */\n  public static getMetadata = (queue: types.OracleQueueAccountData) =>\n    toUtf8(queue.metadata);\n  /** Load an existing QueueAccount with its current on-chain state */\n  public static async load(\n    program: SwitchboardProgram,\n    publicKey: PublicKey | string\n  ): Promise<[QueueAccount, types.OracleQueueAccountData]> {\n    const account = new QueueAccount(\n      program,\n      typeof publicKey === 'string' ? new PublicKey(publicKey) : publicKey\n    );\n    const state = await account.loadData();\n    return [account, state];\n  }\n\n  /**\n   * Return a oracle queue account state initialized to the default values.\n   */\n  public static default(): types.OracleQueueAccountData {\n    const buffer = Buffer.alloc(1269, 0);\n    types.OracleQueueAccountData.discriminator.copy(buffer, 0);\n    return types.OracleQueueAccountData.decode(buffer);\n  }\n\n  /**\n   * Create a mock account info for a given oracle queue config. Useful for test integrations.\n   */\n  public static createMock(\n    programId: PublicKey,\n    data: Partial<types.OracleQueueAccountData>,\n    options?: {\n      lamports?: number;\n      rentEpoch?: number;\n    }\n  ): AccountInfo<Buffer> {\n    const fields: types.OracleQueueAccountDataFields = {\n      ...QueueAccount.default(),\n      ...data,\n      // any cleanup actions here\n    };\n    const state = new types.OracleQueueAccountData(fields);\n\n    const buffer = Buffer.alloc(QueueAccount.size, 0);\n    types.OracleQueueAccountData.discriminator.copy(buffer, 0);\n    types.OracleQueueAccountData.layout.encode(state, buffer, 8);\n\n    return {\n      executable: false,\n      owner: programId,\n      lamports: options?.lamports ?? 1 * LAMPORTS_PER_SOL,\n      data: buffer,\n      rentEpoch: options?.rentEpoch ?? 0,\n    };\n  }\n\n  /**\n   * Invoke a callback each time a QueueAccount's data has changed on-chain.\n   * @param callback - the callback invoked when the queues state changes\n   * @param commitment - optional, the desired transaction finality. defaults to 'confirmed'\n   * @returns the websocket subscription id\n   */\n  onChange(\n    callback: OnAccountChangeCallback<types.OracleQueueAccountData>,\n    commitment: Commitment = 'confirmed'\n  ): number {\n    return this.program.connection.onAccountChange(\n      this.publicKey,\n      accountInfo =>\n        callback(types.OracleQueueAccountData.decode(accountInfo.data)),\n      commitment\n    );\n  }\n\n  /**\n   * Retrieve and decode the {@linkcode types.OracleQueueAccountData} stored in this account.\n   */\n  public async loadData(): Promise<types.OracleQueueAccountData> {\n    const data = await types.OracleQueueAccountData.fetch(\n      this.program,\n      this.publicKey\n    );\n    if (data === null)\n      throw new errors.AccountNotFoundError('Queue', this.publicKey);\n    this.dataBuffer = new QueueDataBuffer(this.program, data.dataBuffer);\n    return data;\n  }\n\n  /**\n   * Get the spl Mint associated with this {@linkcode QueueAccount}.\n   */\n  public get mint(): spl.Mint {\n    return this.program.mint.mint;\n  }\n\n  /**\n   * Creates a transaction object with oracleQueueInit instructions.\n   *\n   * @param program The SwitchboardProgram.\n   *\n   * @param payer - the publicKey of the account that will pay for the new accounts. Will also be used as the account authority if no other authority is provided.\n   *\n   * @param params oracle queue configuration parameters.\n   *\n   * @return Transaction signature and the newly created QueueAccount.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import { QueueAccount } from '@switchboard-xyz/solana.js';\n   * const [queueAccount, queueInitTxn] = await QueueAccount.createInstructions(program, payer, {\n        name: 'My Queue',\n        metadata: 'Top Secret',\n        queueSize: 100,\n        reward: 0.00001337,\n        minStake: 10,\n        oracleTimeout: 60,\n        slashingEnabled: false,\n        unpermissionedFeeds: true,\n        unpermissionedVrf: true,\n        enableBufferRelayers: false,\n   * });\n   * const queueInitSignature = await program.signAndSend(queueInitTxn);\n   * const queue = await queueAccount.loadData();\n   * ```\n   */\n  public static async createInstructions(\n    program: SwitchboardProgram,\n    payer: PublicKey,\n    params: QueueInitParams\n  ): Promise<[QueueAccount, TransactionObject]> {\n    const keypair = params.keypair ?? Keypair.generate();\n    program.verifyNewKeypair(keypair);\n\n    const dataBuffer = params.dataBufferKeypair ?? Keypair.generate();\n    program.verifyNewKeypair(dataBuffer);\n\n    const queueAccount = new QueueAccount(program, keypair.publicKey);\n    queueAccount.dataBuffer = new QueueDataBuffer(\n      program,\n      dataBuffer.publicKey\n    );\n\n    const queueSize = params.queueSize ?? 500;\n    const queueDataSize = QueueDataBuffer.getAccountSize(queueSize);\n\n    const reward = program.mint.toTokenAmountBN(params.reward);\n    const minStake = program.mint.toTokenAmountBN(params.minStake);\n\n    const txn = new TransactionObject(\n      payer,\n      [\n        SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: dataBuffer.publicKey,\n          space: queueDataSize,\n          lamports: await program.connection.getMinimumBalanceForRentExemption(\n            queueDataSize\n          ),\n          programId: program.programId,\n        }),\n        types.oracleQueueInit(\n          program,\n          {\n            params: {\n              name: Array.from(\n                new Uint8Array(Buffer.from(params.name ?? '').slice(0, 32))\n              ),\n              metadata: [\n                ...new Uint8Array(\n                  Buffer.from(params.metadata ?? '').slice(0, 64)\n                ),\n              ],\n              reward: reward,\n              minStake: minStake,\n              feedProbationPeriod: params.feedProbationPeriod ?? 0,\n              oracleTimeout: params.oracleTimeout ?? 180,\n              slashingEnabled: params.slashingEnabled ?? false,\n              varianceToleranceMultiplier: SwitchboardDecimal.fromBig(\n                new Big(params.varianceToleranceMultiplier ?? 2)\n              ),\n              consecutiveFeedFailureLimit: new anchor.BN(\n                params.consecutiveFeedFailureLimit ?? 1000\n              ),\n              consecutiveOracleFailureLimit: new anchor.BN(\n                params.consecutiveOracleFailureLimit ?? 1000\n              ),\n              queueSize: queueSize,\n              unpermissionedFeeds: params.unpermissionedFeeds ?? false,\n              unpermissionedVrf: params.unpermissionedVrf ?? false,\n              enableBufferRelayers: params.enableBufferRelayers ?? false,\n            },\n          },\n          {\n            oracleQueue: queueAccount.publicKey,\n            authority: params.authority ?? payer,\n            buffer: dataBuffer.publicKey,\n            systemProgram: SystemProgram.programId,\n            payer,\n            mint: program.mint.address,\n          }\n        ),\n      ],\n      [dataBuffer, keypair]\n    );\n\n    return [queueAccount, txn];\n  }\n\n  /**\n   * Creates an oracle queue on-chain and return the transaction signature and created account resource.\n   *\n   * @param program The SwitchboardProgram.\n   *\n   * @param params oracle queue configuration parameters.\n   *\n   * @return Transaction signature and the newly created QueueAccount.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import { QueueAccount } from '@switchboard-xyz/solana.js';\n   * const [queueAccount, txnSignature] = await QueueAccount.create(program, {\n        name: 'My Queue',\n        metadata: 'Top Secret',\n        queueSize: 100,\n        reward: 0.00001337,\n        minStake: 10,\n        oracleTimeout: 60,\n        slashingEnabled: false,\n        unpermissionedFeeds: true,\n        unpermissionedVrf: true,\n        enableBufferRelayers: false,\n   * });\n   * const queue = await queueAccount.loadData();\n   * ```\n   */\n  public static async create(\n    program: SwitchboardProgram,\n    params: QueueInitParams\n  ): Promise<[QueueAccount, string]> {\n    const [account, txnObject] = await this.createInstructions(\n      program,\n      program.walletPubkey,\n      params\n    );\n    const txnSignature = await program.signAndSend(txnObject);\n    return [account, txnSignature];\n  }\n\n  /**\n   * Creates a transaction object with oracleInit instructions for the given QueueAccount.\n   *\n   * @param payer - the publicKey of the account that will pay for the new accounts. Will also be used as the account authority if no other authority is provided.\n   *\n   * @param params - the oracle configuration parameters.\n   *\n   * @return Transaction signature and the newly created OracleAccount.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import { QueueAccount } from '@switchboard-xyz/solana.js';\n   * const queueAccount = new QueueAccount(program, queuePubkey);\n   * const [oracleAccount, oracleInitTxn] = await queueAccount.createOracleInstructions(payer, {\n   *  name: \"My Oracle\",\n   *  metadata: \"Oracle #1\"\n   * });\n   * const oracleInitSignature = await program.signAndSend(oracleInitTxn);\n   * const oracle = await oracleAccount.loadData();\n   * ```\n   */\n  public async createOracleInstructions(\n    /** The publicKey of the account that will pay for the new accounts. Will also be used as the account authority if no other authority is provided. */\n    payer: PublicKey,\n    params: CreateQueueOracleParams\n  ): Promise<[OracleAccount, Array<TransactionObject>]> {\n    const queueAuthorityPubkey = params.queueAuthority\n      ? params.queueAuthority.publicKey\n      : params.queueAuthorityPubkey ?? (await this.loadData()).authority;\n\n    const [oracleAccount, createOracleTxnObject] =\n      await OracleAccount.createInstructions(this.program, payer, {\n        ...params,\n        queueAccount: this,\n      });\n\n    const [permissionAccount, createPermissionTxnObject] =\n      PermissionAccount.createInstruction(this.program, payer, {\n        granter: this.publicKey,\n        grantee: oracleAccount.publicKey,\n        authority: queueAuthorityPubkey,\n      });\n\n    if (\n      params.enable &&\n      (params.queueAuthority || queueAuthorityPubkey.equals(payer))\n    ) {\n      const permissionSetTxn = permissionAccount.setInstruction(payer, {\n        permission: new PermitOracleHeartbeat(),\n        enable: true,\n        queueAuthority: params.queueAuthority,\n      });\n      createPermissionTxnObject.combine(permissionSetTxn);\n    }\n\n    return [\n      oracleAccount,\n      TransactionObject.pack([\n        ...createOracleTxnObject,\n        createPermissionTxnObject,\n      ]),\n    ];\n  }\n\n  /**\n   * Creates a new {@linkcode OracleAccount}.\n   *\n   * @param params - the oracle configuration parameters.\n   *\n   * @return Transaction signature and the newly created OracleAccount.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import { QueueAccount } from '@switchboard-xyz/solana.js';\n   * const queueAccount = new QueueAccount(program, queuePubkey);\n   * const [oracleAccount, oracleInitSignature] = await queueAccount.createOracle({\n   *  name: \"My Oracle\",\n   *  metadata: \"Oracle #1\"\n   * });\n   * const oracle = await oracleAccount.loadData();\n   * ```\n   */\n  public async createOracle(\n    params: CreateQueueOracleParams\n  ): Promise<[OracleAccount, Array<TransactionSignature>]> {\n    const signers: Keypair[] = [];\n\n    const queue = await this.loadData();\n\n    if (\n      params.queueAuthority &&\n      params.queueAuthority.publicKey.equals(queue.authority)\n    ) {\n      signers.push(params.queueAuthority);\n    }\n\n    const [oracleAccount, txn] = await this.createOracleInstructions(\n      this.program.walletPubkey,\n      params\n    );\n\n    const signatures = await this.program.signAndSendAll(txn);\n\n    return [oracleAccount, signatures];\n  }\n\n  /**\n   * Create a new {@linkcode TransactionObject} constaining the instructions and signers needed to create a new {@linkcode AggregatorAccount} for the queue along with its {@linkcode PermissionAccount} and {@linkcode LeaseAccount}.\n   *\n   * @param payer - the publicKey of the account that will pay for the new accounts. Will also be used as the account authority if no other authority is provided.\n   *\n   * @param params - the aggregatorInit, jobInit, permissionInit, permissionSet, leaseInit, and crankPush configuration parameters.\n   *\n   * Optionally, specify a crankPubkey in order to push it onto an existing {@linkcode CrankAccount}.\n   *\n   * Optionally, enable the permissions by setting a queueAuthority keypair along with the enable boolean set to true.\n   *\n   * ```ts\n   * import { QueueAccount } from '@switchboard-xyz/solana.js';\n   * const queueAccount = new QueueAccount(program, queuePubkey);\n   * const [aggregatorAccount, aggregatorInitTxnObject] =\n      await queueAccount.createFeedInstructions({\n        enable: true, // not needed if queue has unpermissionedFeedsEnabled\n        queueAuthority: queueAuthority, // not needed if queue has unpermissionedFeedsEnabled\n        batchSize: 1,\n        minRequiredOracleResults: 1,\n        minRequiredJobResults: 1,\n        minUpdateDelaySeconds: 60,\n        fundAmount: 2.5, // deposit 2.5 wSOL into the leaseAccount escrow\n        jobs: [\n          { pubkey: jobAccount.publicKey },\n          {\n            weight: 2,\n            data: OracleJob.encodeDelimited(\n              OracleJob.fromObject({\n                tasks: [\n                  {\n                    valueTask: {\n                      value: 1,\n                    },\n                  },\n                ],\n              })\n            ).finish(),\n          },\n        ],\n      });\n      const aggregatorInitSignatures = await this.program.signAndSendAll(txns);\n   * ```\n   */\n  public async createFeedInstructions(\n    payer: PublicKey,\n    params: CreateQueueFeedParams\n  ): Promise<[AggregatorAccount, Array<TransactionObject>]> {\n    const queueAuthorityPubkey = params.queueAuthority\n      ? params.queueAuthority.publicKey\n      : params.queueAuthorityPubkey ?? (await this.loadData()).authority;\n\n    const pre: Array<TransactionObject> = [];\n    const txns: Array<TransactionObject> = [];\n    const post: Array<TransactionObject> = [];\n\n    // getOrCreate token account for\n    const userTokenAddress = this.program.mint.getAssociatedAddress(payer);\n    const userTokenAccountInfo = await this.program.connection.getAccountInfo(\n      userTokenAddress\n    );\n\n    if (userTokenAccountInfo === null && params.disableWrap !== true) {\n      const [createTokenAccount] =\n        this.program.mint.createAssocatedUserInstruction(payer);\n      pre.push(createTokenAccount);\n    }\n\n    // create / load jobs\n    const jobs: { job: JobAccount; weight: number }[] = [];\n    if (params.jobs && Array.isArray(params.jobs)) {\n      for await (const job of params.jobs) {\n        if ('data' in job) {\n          const [jobAccount, jobInit] = JobAccount.createInstructions(\n            this.program,\n            payer,\n            {\n              data: job.data,\n              name: job.name ?? '',\n              authority: job.authority,\n              expiration: job.expiration,\n              variables: job.variables,\n              keypair: job.keypair,\n            }\n          );\n          pre.push(...jobInit);\n          jobs.push({ job: jobAccount, weight: job.weight ?? 1 });\n        } else if ('pubkey' in job) {\n          const jobAccount = new JobAccount(this.program, job.pubkey);\n          // should we verify its a valid job account?\n          jobs.push({ job: jobAccount, weight: job.weight ?? 1 });\n        } else {\n          throw new Error(`Failed to create job account ${job}`);\n        }\n      }\n    }\n\n    const [aggregatorAccount, aggregatorInit] =\n      await AggregatorAccount.createInstruction(this.program, payer, {\n        ...params,\n        queueAccount: this,\n        queueAuthority: queueAuthorityPubkey,\n        keypair: params.keypair,\n        authority: params.authority ? params.authority.publicKey : undefined,\n      });\n\n    txns.push(aggregatorInit);\n\n    const [leaseAccount, leaseInit] = await LeaseAccount.createInstructions(\n      this.program,\n      payer,\n      {\n        fundAmount: params.fundAmount,\n        funderTokenWallet: params.funderTokenWallet ?? userTokenAddress,\n        funderAuthority: params.funderAuthority ?? undefined,\n        aggregatorAccount: aggregatorAccount,\n        queueAccount: this,\n        jobAuthorities: [], // create lease before adding jobs to skip this step\n        jobPubkeys: [],\n        disableWrap: params.disableWrap,\n      }\n    );\n    txns.push(leaseInit);\n\n    // create permission account\n    const [permissionAccount, permissionInit] =\n      PermissionAccount.createInstruction(this.program, payer, {\n        granter: this.publicKey,\n        authority: queueAuthorityPubkey,\n        grantee: aggregatorAccount.publicKey,\n      });\n\n    // set permissions\n    if (\n      params.enable &&\n      (params.queueAuthority || queueAuthorityPubkey.equals(payer))\n    ) {\n      const permissionSetTxn = permissionAccount.setInstruction(payer, {\n        permission: new PermitOracleQueueUsage(),\n        enable: true,\n        queueAuthority: params.queueAuthority,\n      });\n      permissionInit.combine(permissionSetTxn);\n    }\n\n    txns.push(permissionInit);\n\n    // set resolution mode\n    if (params.slidingWindow !== undefined && params.slidingWindow === true) {\n      const setResolutionMode = aggregatorAccount.setSlidingWindowInstruction(\n        payer,\n        {\n          authority: params.authority,\n          mode: new types.AggregatorResolutionMode.ModeSlidingResolution(),\n        }\n      );\n      post.push(setResolutionMode);\n    }\n\n    // set priority fees\n    if (\n      params.basePriorityFee !== undefined ||\n      params.priorityFeeBump !== undefined ||\n      params.priorityFeeBumpPeriod !== undefined ||\n      params.maxPriorityFeeMultiplier !== undefined\n    ) {\n      const setAggregatorConfig = await aggregatorAccount.setConfigInstruction(\n        payer,\n        {\n          force: true,\n          authority: params.authority,\n          basePriorityFee: params.basePriorityFee,\n          priorityFeeBump: params.priorityFeeBump,\n          priorityFeeBumpPeriod: params.priorityFeeBumpPeriod,\n          maxPriorityFeeMultiplier: params.maxPriorityFeeMultiplier,\n        }\n      );\n\n      post.push(setAggregatorConfig);\n    }\n\n    for await (const { job, weight } of jobs) {\n      const addJobTxn = aggregatorAccount.addJobInstruction(payer, {\n        job: job,\n        weight: weight,\n        authority: params.authority,\n      });\n      post.push(addJobTxn);\n    }\n\n    if (params.crankPubkey) {\n      const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n        this.program,\n        queueAuthorityPubkey,\n        this.publicKey,\n        aggregatorAccount.publicKey\n      );\n\n      const leaseEscrow = this.program.mint.getAssociatedAddress(\n        leaseAccount.publicKey\n      );\n\n      post.push(\n        new TransactionObject(\n          payer,\n          [\n            types.crankPush(\n              this.program,\n              {\n                params: {\n                  stateBump: this.program.programState.bump,\n                  permissionBump: permissionBump,\n                  notifiRef: null,\n                },\n              },\n              {\n                crank: params.crankPubkey,\n                aggregator: aggregatorAccount.publicKey,\n                oracleQueue: this.publicKey,\n                queueAuthority: queueAuthorityPubkey,\n                permission: permissionAccount.publicKey,\n                lease: leaseAccount.publicKey,\n                escrow: leaseEscrow,\n                programState: this.program.programState.publicKey,\n                dataBuffer:\n                  params.crankDataBuffer ??\n                  (\n                    await new CrankAccount(\n                      this.program,\n                      params.crankPubkey\n                    ).loadData()\n                  ).dataBuffer,\n              }\n            ),\n          ],\n          []\n        )\n      );\n    }\n\n    if (params.historyLimit && params.historyLimit > 0) {\n      const historyBufferInit = (\n        await AggregatorHistoryBuffer.createInstructions(this.program, payer, {\n          aggregatorAccount,\n          maxSamples: params.historyLimit,\n        })\n      )[1];\n      post.push(historyBufferInit);\n    }\n\n    const packed = TransactionObject.pack([\n      ...(pre.length ? TransactionObject.pack(pre) : []),\n      ...(txns.length ? TransactionObject.pack(txns) : []),\n      ...(post.length ? TransactionObject.pack(post) : []),\n    ]);\n\n    return [aggregatorAccount, packed];\n  }\n\n  /**\n   * Create a new {@linkcode AggregatorAccount} for the queue, along with its {@linkcode PermissionAccount} and {@linkcode LeaseAccount}.\n   *\n   * Optionally, specify a crankPubkey in order to push it onto an existing {@linkcode CrankAccount}.\n   *\n   * Optionally, enable the permissions by setting a queueAuthority keypair along with the enable boolean set to true.\n   *\n   * ```ts\n   * import { QueueAccount } from '@switchboard-xyz/solana.js';\n   * const queueAccount = new QueueAccount(program, queuePubkey);\n   * const [aggregatorAccount, aggregatorInitSignatures] =\n      await queueAccount.createFeed({\n        enable: true, // not needed if queue has unpermissionedFeedsEnabled\n        queueAuthority: queueAuthority, // not needed if queue has unpermissionedFeedsEnabled\n        batchSize: 1,\n        minRequiredOracleResults: 1,\n        minRequiredJobResults: 1,\n        minUpdateDelaySeconds: 60,\n        fundAmount: 2.5, // deposit 2.5 wSOL into the leaseAccount escrow\n        jobs: [\n          { pubkey: jobAccount.publicKey },\n          {\n            weight: 2,\n            data: OracleJob.encodeDelimited(\n              OracleJob.fromObject({\n                tasks: [\n                  {\n                    valueTask: {\n                      value: 1,\n                    },\n                  },\n                ],\n              })\n            ).finish(),\n          },\n        ],\n      });\n   * ```\n   */\n  public async createFeed(\n    params: CreateQueueFeedParams\n  ): Promise<[AggregatorAccount, Array<TransactionSignature>]> {\n    const signers: Keypair[] = [];\n\n    const queue = await this.loadData();\n\n    if (\n      params.queueAuthority &&\n      params.queueAuthority.publicKey.equals(queue.authority)\n    ) {\n      signers.push(params.queueAuthority);\n    }\n\n    const [aggregatorAccount, txns] = await this.createFeedInstructions(\n      this.program.walletPubkey,\n      params\n    );\n\n    const signatures = await this.program.signAndSendAll(txns, {\n      skipPreflight: true,\n    });\n\n    return [aggregatorAccount, signatures];\n  }\n\n  /**\n   * Creates a transaction object with crankInit instructions for the given QueueAccount.\n   *\n   * @param payer - the publicKey of the account that will pay for the new accounts. Will also be used as the account authority if no other authority is provided.\n   *\n   * @param params - the crank configuration parameters.\n   *\n   * @return Transaction signature and the newly created CrankAccount.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import { QueueAccount } from '@switchboard-xyz/solana.js';\n   * const queueAccount = new QueueAccount(program, queuePubkey);\n   * const [crankAccount, crankInitTxn] = await queueAccount.createCrankInstructions(payer, {\n   *  name: \"My Crank\",\n   *  metadata: \"Crank #1\",\n   *  maxRows: 1000,\n   * });\n   * const crankInitSignature = await program.signAndSend(crankInitTxn);\n   * const crank = await crankAccount.loadData();\n   * ```\n   */\n  public async createCrankInstructions(\n    payer: PublicKey,\n    params: CreateQueueCrankParams\n  ): Promise<[CrankAccount, TransactionObject]> {\n    return await CrankAccount.createInstructions(this.program, payer, {\n      ...params,\n      queueAccount: this,\n    });\n  }\n\n  /**\n   * Creates a new {@linkcode CrankAccount}.\n   *\n   * @param params - the crank configuration parameters.\n   *\n   * @return Transaction signature and the newly created CrankAccount.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import { QueueAccount } from '@switchboard-xyz/solana.js';\n   * const queueAccount = new QueueAccount(program, queuePubkey);\n   * const [crankAccount, crankInitSignature] = await queueAccount.createCrank({\n   *  name: \"My Crank\",\n   *  metadata: \"Crank #1\",\n   *  maxRows: 1000,\n   * });\n   * const crank = await crankAccount.loadData();\n   * ```\n   */\n  public async createCrank(\n    params: CreateQueueCrankParams\n  ): Promise<[CrankAccount, TransactionSignature]> {\n    const [crankAccount, txn] = await this.createCrankInstructions(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(txn);\n    return [crankAccount, txnSignature];\n  }\n\n  /**\n   * Creates a transaction object with vrfInit instructions for the given QueueAccount.\n   *\n   * @param payer - the publicKey of the account that will pay for the new accounts. Will also be used as the account authority if no other authority is provided.\n   *\n   * @param params - the vrf configuration parameters.\n   *\n   * @return Transaction signature and the newly created VrfAccount.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import { QueueAccount } from '@switchboard-xyz/solana.js';\n   * const queueAccount = new QueueAccount(program, queuePubkey);\n   * const vrfKeypair = Keypair.generate();\n   * const [vrfAccount, vrfInitTxn] = await queueAccount.createVrfInstructions(payer, {\n   *  vrfKeypair: vrfKeypair,\n   *  callback: {\n   *    programId: \"\",\n   *    accounts: [],\n   *    ixData: Buffer.from(\"\")\n   *  },\n   * });\n   * const vrfInitSignature = await program.signAndSend(vrfInitTxn);\n   * const vrf = await vrfAccount.loadData();\n   * ```\n   */\n  public async createVrfInstructions(\n    payer: PublicKey,\n    params: CreateQueueVrfParams\n  ): Promise<[VrfAccount, TransactionObject]> {\n    const queueAuthorityPubkey = params.queueAuthority\n      ? params.queueAuthority.publicKey\n      : params.queueAuthorityPubkey ?? (await this.loadData()).authority;\n\n    const [vrfAccount, vrfInit] = await VrfAccount.createInstructions(\n      this.program,\n      payer,\n      {\n        vrfKeypair: params.vrfKeypair,\n        queueAccount: this,\n        callback: params.callback,\n        authority: params.authority,\n      }\n    );\n\n    // eslint-disable-next-line prefer-const\n    let [permissionAccount, permissionInit] =\n      PermissionAccount.createInstruction(this.program, payer, {\n        granter: this.publicKey,\n        grantee: vrfAccount.publicKey,\n        authority: queueAuthorityPubkey,\n      });\n\n    if (\n      params.enable &&\n      (params.queueAuthority || queueAuthorityPubkey.equals(payer))\n    ) {\n      const permissionSet = permissionAccount.setInstruction(payer, {\n        permission: new PermitVrfRequests(),\n        enable: true,\n        queueAuthority: params.queueAuthority,\n      });\n      permissionInit = permissionInit.combine(permissionSet);\n    }\n\n    return [vrfAccount, vrfInit.combine(permissionInit)];\n  }\n\n  /**\n   * Creates a new {@linkcode VrfAccount} for a given QueueAccount.\n   *\n   * @param params - the vrf configuration parameters.\n   *\n   * @return Transaction signature and the newly created VrfAccount.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import { QueueAccount } from '@switchboard-xyz/solana.js';\n   * const queueAccount = new QueueAccount(program, queuePubkey);\n   * const vrfKeypair = Keypair.generate();\n   * const [vrfAccount, vrfInitSignature] = await queueAccount.createVrf({\n   *  vrfKeypair: vrfKeypair,\n   *  callback: {\n   *    programId: \"\",\n   *    accounts: [],\n   *    ixData: Buffer.from(\"\")\n   *  },\n   * });\n   * const vrf = await vrfAccount.loadData();\n   * ```\n   */\n  public async createVrf(\n    params: CreateQueueVrfParams\n  ): Promise<[VrfAccount, TransactionSignature]> {\n    const [vrfAccount, txn] = await this.createVrfInstructions(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(txn);\n    return [vrfAccount, txnSignature];\n  }\n\n  /**\n   * Creates a transaction object with bufferRelayerInit instructions for the given QueueAccount.\n   *\n   * @param payer - the publicKey of the account that will pay for the new accounts. Will also be used as the account authority if no other authority is provided.\n   *\n   * @param params - the buffer relayer configuration parameters.\n   *\n   * @return Transaction signature and the newly created BufferRelayerAccount.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import { QueueAccount } from '@switchboard-xyz/solana.js';\n   * const queueAccount = new QueueAccount(program, queuePubkey);\n   * const [bufferRelayerAccount, bufferRelayerInitTxn] = await queueAccount.createBufferRelayerInstructions(payer, {\n   *  name: \"My Buffer\",\n   *  minUpdateDelaySeconds: 30,\n   *  job: existingJobPubkey,\n   * });\n   * const bufferRelayerInitSignature = await program.signAndSend(bufferRelayerInitTxn);\n   * const bufferRelayer = await bufferRelayerAccount.loadData();\n   * ```\n   */\n  public async createBufferRelayerInstructions(\n    payer: PublicKey,\n    params: CreateQueueBufferRelayerParams\n  ): Promise<[BufferRelayerAccount, TransactionObject]> {\n    const queueAuthorityPubkey = params.queueAuthority\n      ? params.queueAuthority.publicKey\n      : params.queueAuthorityPubkey ?? (await this.loadData()).authority;\n\n    const txns: Array<TransactionObject> = [];\n\n    let job: JobAccount;\n    if ('data' in params.job) {\n      const [jobAccount, jobInit] = JobAccount.createInstructions(\n        this.program,\n        payer,\n        {\n          data: params.job.data,\n          name: params.job.name ?? '',\n          authority: params.job.authority,\n          expiration: params.job.expiration,\n          variables: params.job.variables,\n          keypair: params.job.keypair,\n        }\n      );\n      txns.push(...jobInit);\n      job = jobAccount;\n    } else if (params.job instanceof PublicKey) {\n      const jobAccount = new JobAccount(this.program, params.job);\n      // should we verify its a valid job account?\n      job = jobAccount;\n    } else if (params.job instanceof JobAccount) {\n      job = params.job;\n    } else {\n      throw new Error(\n        `Failed to create BufferRelayer job account. 'data' or 'pubkey' was not defined in jobDefinition`\n      );\n    }\n\n    const [bufferAccount, bufferInit] =\n      await BufferRelayerAccount.createInstructions(this.program, payer, {\n        name: params.name,\n        minUpdateDelaySeconds: params.minUpdateDelaySeconds,\n        queueAccount: this,\n        authority: params.authority,\n        jobAccount: job,\n        keypair: params.keypair,\n      });\n\n    txns.push(bufferInit);\n\n    // eslint-disable-next-line prefer-const\n    let [permissionAccount, permissionInit] =\n      PermissionAccount.createInstruction(this.program, payer, {\n        granter: this.publicKey,\n        grantee: bufferAccount.publicKey,\n        authority: queueAuthorityPubkey,\n      });\n\n    if (\n      params.enable &&\n      (params.queueAuthority || queueAuthorityPubkey.equals(payer))\n    ) {\n      const permissionSet = permissionAccount.setInstruction(payer, {\n        permission: new PermitOracleQueueUsage(),\n        enable: true,\n        queueAuthority: params.queueAuthority,\n      });\n      permissionInit = permissionInit.combine(permissionSet);\n    }\n\n    txns.push(permissionInit);\n\n    const packed = TransactionObject.pack(txns);\n    if (packed.length > 1) {\n      throw new Error(\n        `Failed to pack buffer relayer instructions into a single transaction`\n      );\n    }\n\n    return [bufferAccount, packed[0]];\n  }\n\n  /**\n   * Creates a new {@linkcode BufferRelayerAccount} for a given QueueAccount.\n   *\n   * @param params - the buffer relayer configuration parameters.\n   *\n   * @return Transaction signature and the newly created BufferRelayerAccount.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * import { QueueAccount } from '@switchboard-xyz/solana.js';\n   * const queueAccount = new QueueAccount(program, queuePubkey);\n   * const [bufferRelayerAccount, bufferRelayerInitSignature] = await queueAccount.createBufferRelayer({\n   *  name: \"My Buffer\",\n   *  minUpdateDelaySeconds: 30,\n   *  job: existingJobPubkey,\n   * });\n   * const bufferRelayer = await bufferRelayerAccount.loadData();\n   * ```\n   */\n  public async createBufferRelayer(\n    params: CreateQueueBufferRelayerParams\n  ): Promise<[BufferRelayerAccount, TransactionSignature]> {\n    const [bufferRelayerAccount, txn] =\n      await this.createBufferRelayerInstructions(\n        this.program.walletPubkey,\n        params\n      );\n    const txnSignature = await this.program.signAndSend(txn);\n    return [bufferRelayerAccount, txnSignature];\n  }\n\n  public async createVrfLiteInstructions(\n    payer: PublicKey,\n    params: CreateVrfLiteParams\n  ): Promise<[VrfLiteAccount, TransactionObject]> {\n    const queueAuthorityPubkey = params.queueAuthority\n      ? params.queueAuthority.publicKey\n      : params.queueAuthorityPubkey ?? (await this.loadData()).authority;\n\n    const txns: Array<TransactionObject> = [];\n\n    const [vrfLite, vrfLiteInit] = await VrfLiteAccount.createInstruction(\n      this.program,\n      payer,\n      {\n        ...params,\n        queueAccount: this,\n      }\n    );\n    txns.push(vrfLiteInit);\n\n    const [permissionAccount] = PermissionAccount.fromSeed(\n      this.program,\n      queueAuthorityPubkey,\n      this.publicKey,\n      vrfLite.publicKey\n    );\n\n    if (\n      params.enable &&\n      (params.queueAuthority || queueAuthorityPubkey.equals(payer))\n    ) {\n      const permissionSet = permissionAccount.setInstruction(payer, {\n        permission: new PermitVrfRequests(),\n        enable: true,\n        queueAuthority: params.queueAuthority,\n      });\n      vrfLiteInit.combine(permissionSet);\n    }\n\n    return [vrfLite, vrfLiteInit];\n  }\n\n  public async createVrfLite(\n    params: CreateVrfLiteParams\n  ): Promise<[VrfLiteAccount, TransactionSignature]> {\n    const [vrfLiteAccount, txn] = await this.createVrfLiteInstructions(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(txn, {\n      skipPreflight: true,\n    });\n    return [vrfLiteAccount, txnSignature];\n  }\n\n  /** Load the list of oracles that are currently stored in the buffer */\n  public async loadOracles(): Promise<Array<PublicKey>> {\n    let queue: QueueDataBuffer;\n    if (this.dataBuffer) {\n      queue = this.dataBuffer;\n    } else {\n      const queueData = await this.loadData();\n      queue = new QueueDataBuffer(this.program, queueData.dataBuffer);\n    }\n\n    return queue.loadData();\n  }\n\n  /** Loads the oracle states for the oracles currently on the queue's dataBuffer */\n  public async loadOracleAccounts(_oracles?: Array<PublicKey>): Promise<\n    Array<{\n      account: OracleAccount;\n      data: types.OracleAccountData;\n    }>\n  > {\n    const oraclePubkeys = _oracles ?? (await this.loadOracles());\n\n    return await OracleAccount.fetchMultiple(this.program, oraclePubkeys);\n  }\n\n  public async loadActiveOracleAccounts(\n    _queue?: types.OracleQueueAccountData\n  ): Promise<\n    Array<{\n      account: OracleAccount;\n      data: types.OracleAccountData;\n    }>\n  > {\n    const queue = _queue ?? (await this.loadData());\n\n    const oracles = await this.loadOracleAccounts();\n\n    const unixTimestamp = (await SolanaClock.fetch(this.program.connection))\n      .unixTimestamp;\n    const timeout = unixTimestamp.sub(new BN(queue.oracleTimeout));\n    const activeOracles = oracles.filter(\n      o => o.data && o.data.lastHeartbeat.gte(timeout)\n    );\n    return activeOracles;\n  }\n\n  /** Returns a flag dictating whether enough oracles are actively heartbeating on an oracle queue and ready for on-chain update requests */\n  public async isReady(\n    _queue?: types.OracleQueueAccountData,\n    oraclesNeeded = 1\n  ): Promise<boolean> {\n    const activeOracles = await this.loadActiveOracleAccounts(_queue);\n    return activeOracles.length >= oraclesNeeded;\n  }\n\n  public async setConfig(\n    params: QueueSetConfigParams & { authority?: Keypair }\n  ): Promise<TransactionSignature> {\n    const setConfigTxn = this.setConfigInstruction(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(setConfigTxn);\n    return txnSignature;\n  }\n\n  public setConfigInstruction(\n    payer: PublicKey,\n    params: QueueSetConfigParams & { authority?: Keypair }\n  ): TransactionObject {\n    const multiplier =\n      params.varianceToleranceMultiplier &&\n      Number.isFinite(params.varianceToleranceMultiplier)\n        ? SwitchboardDecimal.fromBig(\n            new Big(params.varianceToleranceMultiplier)\n          )\n        : null;\n\n    const reward = params.reward\n      ? this.program.mint.toTokenAmountBN(params.reward)\n      : null;\n    const minStake = params.minStake\n      ? this.program.mint.toTokenAmountBN(params.minStake)\n      : null;\n\n    return new TransactionObject(\n      payer,\n      [\n        types.oracleQueueSetConfig(\n          this.program,\n          {\n            params: {\n              name: params.name\n                ? [\n                    ...new Uint8Array(\n                      Buffer.from(params.name ?? '').slice(0, 32)\n                    ),\n                  ]\n                : null,\n              metadata: params.metadata\n                ? [\n                    ...new Uint8Array(\n                      Buffer.from(params.metadata ?? '').slice(0, 64)\n                    ),\n                  ]\n                : null,\n              unpermissionedFeedsEnabled:\n                params.unpermissionedFeedsEnabled ?? null,\n              unpermissionedVrfEnabled: params.unpermissionedVrfEnabled ?? null,\n              enableBufferRelayers: params.enableBufferRelayers ?? null,\n              slashingEnabled: params.slashingEnabled ?? null,\n              reward: reward,\n              minStake: minStake,\n              oracleTimeout: params.oracleTimeout ?? null,\n              consecutiveFeedFailureLimit: params.consecutiveFeedFailureLimit\n                ? new anchor.BN(params.consecutiveFeedFailureLimit)\n                : null,\n              consecutiveOracleFailureLimit:\n                params.consecutiveOracleFailureLimit\n                  ? new anchor.BN(params.consecutiveOracleFailureLimit)\n                  : null,\n              varianceToleranceMultiplier: multiplier,\n            },\n          },\n          {\n            authority: params.authority ? params.authority.publicKey : payer,\n            queue: this.publicKey,\n          }\n        ),\n      ],\n      params.authority ? [params.authority] : []\n    );\n  }\n\n  public async toAccountsJSON(\n    _queue?: types.OracleQueueAccountData,\n    _oracles?: Array<PublicKey>\n  ): Promise<QueueAccountsJSON> {\n    const queue = _queue ?? (await this.loadData());\n    const oracles = _oracles ?? (await this.loadOracles());\n    const oracleAccounts = await this.loadOracleAccounts(oracles);\n\n    return {\n      publicKey: this.publicKey,\n      ...queue.toJSON(),\n      dataBuffer: {\n        publicKey: queue.dataBuffer,\n        data: oracles,\n      },\n      oracles: oracleAccounts.map(o => {\n        return {\n          publicKey: o.account.publicKey,\n          data: o.data.toJSON(),\n        };\n      }),\n    };\n  }\n\n  public async fetchAccounts(\n    _queue?: types.OracleQueueAccountData,\n    _oracles?: Array<PublicKey>\n  ): Promise<QueueAccounts> {\n    const queue = _queue ?? (await this.loadData());\n    const oracles = _oracles ?? (await this.loadOracles());\n\n    const oracleAccounts = await this.loadOracleAccounts(oracles);\n\n    return {\n      queue: {\n        publicKey: this.publicKey,\n        data: queue,\n      },\n      dataBuffer: {\n        publicKey: queue.dataBuffer,\n        data: oracles,\n      },\n      oracles: oracleAccounts.map(o => {\n        return {\n          publicKey: o.account.publicKey,\n          data: o.data,\n        };\n      }),\n    };\n  }\n}\n\n/**\n *  Parameters for initializing an {@linkcode QueueAccount}\n */\nexport interface QueueInitParams {\n  /**\n   *  A name to assign to this {@linkcode QueueAccount}\n   */\n  name?: string;\n  /**\n   *  Metadata for the queue for easier identification.\n   */\n  metadata?: string;\n  /**\n   *  Rewards to provide oracles and round openers on this queue.\n   */\n  reward: number;\n  /**\n   *  The minimum amount of stake oracles must present to remain on the queue.\n   */\n  minStake: number;\n  /**\n   *  After a feed lease is funded or re-funded, it must consecutively succeed\n   *  N amount of times or its authorization to use the queue is auto-revoked.\n   */\n  feedProbationPeriod?: number;\n  /**\n   *  Time period (in seconds) we should remove an oracle after if no response.\n   */\n  oracleTimeout?: number;\n  /**\n   *  Whether slashing is enabled on this queue.\n   */\n  slashingEnabled?: boolean;\n  /**\n   *  The tolerated variance amount oracle results can have from the accepted round result\n   *  before being slashed.\n   *  slashBound = varianceToleranceMultiplier * stdDeviation\n   *  Default: 2\n   */\n  varianceToleranceMultiplier?: number;\n  /**\n   *  Consecutive failure limit for a feed before feed permission is revoked.\n   */\n  consecutiveFeedFailureLimit?: number;\n  /**\n   *  Consecutive failure limit for an oracle before oracle permission is revoked.\n   */\n  consecutiveOracleFailureLimit?: number;\n  /**\n   *  Optionally set the size of the queue.\n   */\n  queueSize?: number;\n  /**\n   *  Enabling this setting means data feeds do not need explicit permission to join the queue.\n   */\n  unpermissionedFeeds?: boolean;\n  /**\n   *  Enabling this setting means data feeds do not need explicit permission\n   *  to request VRF proofs and verifications from this queue.\n   */\n  unpermissionedVrf?: boolean;\n  /**\n   *  Enabling this setting will allow buffer relayer accounts to call openRound.\n   */\n  enableBufferRelayers?: boolean;\n  /**\n   *  The account to delegate authority to for creating permissions targeted at the queue.\n   *\n   *  Defaults to the payer.\n   */\n  authority?: PublicKey;\n\n  keypair?: Keypair;\n  dataBufferKeypair?: Keypair;\n}\n\nexport interface QueueSetConfigParams {\n  /** Alternative keypair that is the queue authority and is permitted to make account changes. Defaults to the payer if not provided. */\n  authority?: anchor.web3.Keypair;\n  /**\n   *  A name to assign to this {@linkcode QueueAccount}\n   */\n  name?: string;\n  /**\n   *  Metadata for the queue for easier identification.\n   */\n  metadata?: string;\n  /**\n   *  Enabling this setting means data feeds do not need explicit permission to join the queue.\n   */\n  unpermissionedFeedsEnabled?: boolean;\n  /**\n   *  Enabling this setting means data feeds do not need explicit permission\n   *  to request VRF proofs and verifications from this queue.\n   */\n  unpermissionedVrfEnabled?: boolean;\n  /**\n   *  Enabling this setting will allow buffer relayer accounts to call openRound.\n   */\n  enableBufferRelayers?: boolean;\n  /**\n   *  Whether slashing is enabled on this queue.\n   */\n  slashingEnabled?: boolean;\n  /**\n   *  The tolerated variance amount oracle results can have from the accepted round result\n   *  before being slashed.\n   *  slashBound = varianceToleranceMultiplier * stdDeviation\n   */\n  varianceToleranceMultiplier?: number;\n  /**\n   *  Time period (in seconds) we should remove an oracle after if no response.\n   */\n  oracleTimeout?: number;\n  /**\n   *  Rewards to provide oracles and round openers on this queue.\n   */\n  reward?: number;\n  /**\n   *  The minimum amount of stake oracles must present to remain on the queue.\n   */\n  minStake?: number;\n  /**\n   *  Consecutive failure limit for a feed before feed permission is revoked.\n   */\n  consecutiveFeedFailureLimit?: number;\n  /**\n   *  Consecutive failure limit for an oracle before oracle permission is revoked.\n   */\n  consecutiveOracleFailureLimit?: number;\n}\n\nexport type QueueAccountsJSON = Omit<\n  types.OracleQueueAccountDataJSON,\n  'dataBuffer'\n> & {\n  publicKey: PublicKey;\n  dataBuffer: { publicKey: PublicKey; data: Array<PublicKey> };\n  oracles: Array<{\n    publicKey: PublicKey;\n    data: types.OracleAccountDataJSON;\n  }>;\n};\n\nexport type QueueAccounts = {\n  queue: {\n    publicKey: PublicKey;\n    data: types.OracleQueueAccountData;\n  };\n  dataBuffer: {\n    publicKey: PublicKey;\n    data: Array<PublicKey>;\n  };\n  oracles: Array<{\n    publicKey: PublicKey;\n    data: types.OracleAccountData;\n  }>;\n};\n\nexport type CreateQueueOracleParams = OracleInitParams &\n  Partial<OracleStakeParams> &\n  Partial<PermissionSetParams> & {\n    queueAuthorityPubkey?: PublicKey;\n  };\n\nexport type CreateQueueCrankParams = Omit<CrankInitParams, 'queueAccount'>;\n\nexport type CreateQueueFeedParams = Omit<\n  Omit<Omit<AggregatorInitParams, 'queueAccount'>, 'queueAuthority'>,\n  'authority'\n> & {\n  authority?: Keypair;\n  crankPubkey?: PublicKey;\n  crankDataBuffer?: PublicKey;\n  historyLimit?: number;\n} & {\n  slidingWindow?: boolean;\n  basePriorityFee?: number;\n  priorityFeeBump?: number;\n  priorityFeeBumpPeriod?: number;\n  maxPriorityFeeMultiplier?: number;\n} & Partial<LeaseInitParams> &\n  Partial<PermissionSetParams> & {\n    // job params\n    jobs?: Array<{ pubkey: PublicKey; weight?: number } | JobInitParams>;\n  } & {\n    queueAuthorityPubkey?: PublicKey;\n  };\n\nexport type CreateQueueVrfParams = Omit<VrfInitParams, 'queueAccount'> &\n  Partial<PermissionSetParams> & {\n    queueAuthorityPubkey?: PublicKey;\n  };\n\nexport type CreateQueueBufferRelayerParams = Omit<\n  Omit<BufferRelayerInit, 'jobAccount'>,\n  'queueAccount'\n> &\n  Partial<PermissionSetParams> & {\n    // job params\n    job: JobAccount | PublicKey | Omit<JobInitParams, 'weight'>;\n  } & {\n    queueAuthorityPubkey?: PublicKey;\n  };\n\nexport type CreateVrfLiteParams = VrfLiteInitParams &\n  Partial<PermissionSetParams> & {\n    queueAuthorityPubkey?: PublicKey;\n  };\n"]}
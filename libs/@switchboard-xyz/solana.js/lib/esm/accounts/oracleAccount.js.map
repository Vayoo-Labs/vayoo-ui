{"version":3,"file":"oracleAccount.js","sourceRoot":"","sources":["../../../src/accounts/oracleAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import * as errors from '../errors';\nimport * as types from '../generated';\nimport { SwitchboardProgram } from '../SwitchboardProgram';\nimport {\n  TransactionObject,\n  TransactionObjectOptions,\n} from '../TransactionObject';\n\nimport { Account, OnAccountChangeCallback } from './account';\nimport { PermissionAccount } from './permissionAccount';\nimport { QueueAccount } from './queueAccount';\n\nimport * as anchor from '@coral-xyz/anchor';\nimport * as spl from '@solana/spl-token';\nimport {\n  AccountInfo,\n  Commitment,\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  SystemProgram,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport { BN } from '@switchboard-xyz/common';\n\n/**\n * Account type holding an oracle's configuration including the authority and the reward/slashing wallet along with a set of metrics tracking its reliability.\n *\n * An oracle is a server that sits between the internet and a blockchain and facilitates the flow of information and is rewarded for responding with the honest majority.\n *\n * Data: {@linkcode types.OracleAccountData}\n */\nexport class OracleAccount extends Account<types.OracleAccountData> {\n  static accountName = 'OracleAccountData';\n\n  public static size = 636;\n\n  /**\n   * Get the size of an {@linkcode OracleAccount} on-chain.\n   */\n  public size = this.program.account.oracleAccountData.size;\n\n  /**\n   * Return an oracle account state initialized to the default values.\n   */\n  public static default(): types.OracleAccountData {\n    const buffer = Buffer.alloc(OracleAccount.size, 0);\n    types.OracleAccountData.discriminator.copy(buffer, 0);\n    return types.OracleAccountData.decode(buffer);\n  }\n\n  /**\n   * Create a mock account info for a given oracle config. Useful for test integrations.\n   */\n  public static createMock(\n    programId: PublicKey,\n    data: Partial<types.OracleAccountData>,\n    options?: {\n      lamports?: number;\n      rentEpoch?: number;\n    }\n  ): AccountInfo<Buffer> {\n    const fields: types.OracleAccountDataFields = {\n      ...OracleAccount.default(),\n      ...data,\n      // any cleanup actions here\n    };\n    const state = new types.OracleAccountData(fields);\n\n    const buffer = Buffer.alloc(OracleAccount.size, 0);\n    types.OracleAccountData.discriminator.copy(buffer, 0);\n    types.OracleAccountData.layout.encode(state, buffer, 8);\n\n    return {\n      executable: false,\n      owner: programId,\n      lamports: options?.lamports ?? 1 * LAMPORTS_PER_SOL,\n      data: buffer,\n      rentEpoch: options?.rentEpoch ?? 0,\n    };\n  }\n\n  /** Load an existing OracleAccount with its current on-chain state */\n  public static async load(\n    program: SwitchboardProgram,\n    publicKey: PublicKey | string\n  ): Promise<[OracleAccount, types.OracleAccountData]> {\n    const account = new OracleAccount(\n      program,\n      typeof publicKey === 'string' ? new PublicKey(publicKey) : publicKey\n    );\n    const state = await account.loadData();\n    return [account, state];\n  }\n\n  decode(data: Buffer): types.OracleAccountData {\n    try {\n      return types.OracleAccountData.decode(data);\n    } catch {\n      return this.program.coder.decode<types.OracleAccountData>(\n        OracleAccount.accountName,\n        data\n      );\n    }\n  }\n\n  /**\n   * Invoke a callback each time an OracleAccount's data has changed on-chain.\n   * @param callback - the callback invoked when the oracle state changes\n   * @param commitment - optional, the desired transaction finality. defaults to 'confirmed'\n   * @returns the websocket subscription id\n   */\n  onChange(\n    callback: OnAccountChangeCallback<types.OracleAccountData>,\n    commitment: Commitment = 'confirmed'\n  ): number {\n    return this.program.connection.onAccountChange(\n      this.publicKey,\n      accountInfo => callback(this.decode(accountInfo.data)),\n      commitment\n    );\n  }\n\n  async fetchBalance(stakingWallet?: PublicKey): Promise<number> {\n    const tokenAccount = stakingWallet ?? (await this.loadData()).tokenAccount;\n    const amount = await this.program.mint.fetchBalance(tokenAccount);\n    if (amount === null) {\n      throw new Error(`Failed to fetch oracle staking wallet balance`);\n    }\n    return amount;\n  }\n\n  async fetchBalanceBN(stakingWallet?: PublicKey): Promise<BN> {\n    const tokenAccount = stakingWallet ?? (await this.loadData()).tokenAccount;\n    const amount = await this.program.mint.fetchBalanceBN(tokenAccount);\n    if (amount === null) {\n      throw new Error(`Failed to fetch oracle staking wallet balance`);\n    }\n    return amount;\n  }\n\n  /**\n   * Retrieve and decode the {@linkcode types.OracleAccountData} stored in this account.\n   */\n  public async loadData(): Promise<types.OracleAccountData> {\n    const data = await types.OracleAccountData.fetch(\n      this.program,\n      this.publicKey\n    );\n    if (data === null)\n      throw new errors.AccountNotFoundError('Oracle', this.publicKey);\n    return data;\n  }\n\n  /**\n   * Loads an OracleAccount from the expected PDA seed format.\n   * @param program The Switchboard program for the current connection.\n   * @param queue The queue pubkey to be incorporated into the account seed.\n   * @param wallet The oracles token wallet to be incorporated into the account seed.\n   * @return OracleAccount and PDA bump.\n   */\n  public static fromSeed(\n    program: SwitchboardProgram,\n    queue: PublicKey,\n    wallet: PublicKey\n  ): [OracleAccount, number] {\n    const [publicKey, bump] = PublicKey.findProgramAddressSync(\n      [Buffer.from('OracleAccountData'), queue.toBuffer(), wallet.toBuffer()],\n      program.programId\n    );\n    return [new OracleAccount(program, publicKey), bump];\n  }\n\n  public async getPermissions(\n    _oracle?: types.OracleAccountData,\n    _queueAccount?: QueueAccount,\n    _queue?: types.OracleQueueAccountData\n  ): Promise<[PermissionAccount, number, types.PermissionAccountData]> {\n    const oracle = _oracle ?? (await this.loadData());\n    const queueAccount =\n      _queueAccount ?? new QueueAccount(this.program, oracle.queuePubkey);\n    const queue = _queue ?? (await queueAccount.loadData());\n    const [permissionAccount, permissionBump] = this.getPermissionAccount(\n      queueAccount.publicKey,\n      queue.authority\n    );\n    const permission = await permissionAccount.loadData();\n    return [permissionAccount, permissionBump, permission];\n  }\n\n  public static async createInstructions(\n    program: SwitchboardProgram,\n    payer: PublicKey,\n    params: {\n      queueAccount: QueueAccount;\n    } & OracleInitParams &\n      Partial<OracleStakeParams>\n  ): Promise<[OracleAccount, Array<TransactionObject>]> {\n    const txns: Array<TransactionObject> = [];\n\n    const tokenWallet = params.stakingWalletKeypair ?? Keypair.generate();\n\n    const authority = params.authority?.publicKey ?? payer;\n\n    const [oracleAccount, oracleBump] = OracleAccount.fromSeed(\n      program,\n      params.queueAccount.publicKey,\n      tokenWallet.publicKey\n    );\n\n    const oracleInit = new TransactionObject(\n      payer,\n      [\n        SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: tokenWallet.publicKey,\n          space: spl.ACCOUNT_SIZE,\n          lamports: await program.connection.getMinimumBalanceForRentExemption(\n            spl.ACCOUNT_SIZE\n          ),\n          programId: spl.TOKEN_PROGRAM_ID,\n        }),\n        spl.createInitializeAccountInstruction(\n          tokenWallet.publicKey,\n          program.mint.address,\n          authority\n        ),\n        spl.createSetAuthorityInstruction(\n          tokenWallet.publicKey,\n          authority,\n          spl.AuthorityType.AccountOwner,\n          program.programState.publicKey\n        ),\n        types.oracleInit(\n          program,\n          {\n            params: {\n              name: new Uint8Array(\n                Buffer.from(params.name ?? '', 'utf8').slice(0, 32)\n              ),\n              metadata: new Uint8Array(\n                Buffer.from(params.metadata ?? '', 'utf8').slice(0, 128)\n              ),\n              oracleBump,\n              stateBump: program.programState.bump,\n            },\n          },\n          {\n            oracle: oracleAccount.publicKey,\n            oracleAuthority: authority,\n            wallet: tokenWallet.publicKey,\n            programState: program.programState.publicKey,\n            queue: params.queueAccount.publicKey,\n            payer,\n            systemProgram: SystemProgram.programId,\n          }\n        ),\n      ],\n      params.authority ? [params.authority, tokenWallet] : [tokenWallet]\n    );\n\n    txns.push(oracleInit);\n\n    if (params.stakeAmount && params.stakeAmount > 0) {\n      const depositTxn = await oracleAccount.stakeInstructions(payer, {\n        ...params,\n        tokenAccount: tokenWallet.publicKey,\n        stakeAmount: params.stakeAmount ?? 0,\n      });\n      txns.push(depositTxn);\n    }\n\n    return [oracleAccount, TransactionObject.pack(txns)];\n  }\n\n  public static async create(\n    program: SwitchboardProgram,\n    params: {\n      queueAccount: QueueAccount;\n    } & OracleInitParams &\n      Partial<OracleStakeParams>\n  ): Promise<[OracleAccount, Array<TransactionSignature>]> {\n    const [oracleAccount, txns] = await OracleAccount.createInstructions(\n      program,\n      program.walletPubkey,\n      params\n    );\n\n    const signatures = await program.signAndSendAll(txns);\n\n    return [oracleAccount, signatures];\n  }\n\n  stakeInstruction(\n    stakeAmount: number,\n    oracleStakingWallet: PublicKey,\n    funderTokenWallet: PublicKey,\n    funderAuthority: PublicKey\n  ) {\n    if (stakeAmount <= 0) {\n      throw new Error(`stake amount should be greater than 0`);\n    }\n    return spl.createTransferInstruction(\n      funderTokenWallet,\n      oracleStakingWallet,\n      funderAuthority,\n      this.program.mint.toTokenAmount(stakeAmount)\n    );\n  }\n\n  async stakeInstructions(\n    payer: PublicKey,\n    params: OracleStakeParams & { tokenAccount?: PublicKey }\n  ): Promise<TransactionObject> {\n    const txns: Array<TransactionObject> = [];\n\n    if (!params.stakeAmount || params.stakeAmount <= 0) {\n      throw new Error(`stake amount should be greater than 0`);\n    }\n\n    const tokenWallet =\n      params.tokenAccount ?? (await this.loadData()).tokenAccount;\n\n    const owner = params.funderAuthority\n      ? params.funderAuthority.publicKey\n      : payer;\n\n    let funderTokenWallet: PublicKey;\n    if (params.disableWrap) {\n      funderTokenWallet =\n        params.funderTokenWallet ??\n        this.program.mint.getAssociatedAddress(owner);\n    } else {\n      let tokenTxn: TransactionObject | undefined;\n      // now we need to wrap some funds\n      if (params.funderTokenWallet) {\n        funderTokenWallet = params.funderTokenWallet;\n        tokenTxn = await this.program.mint.wrapInstructions(\n          payer,\n          {\n            fundUpTo: params.stakeAmount ?? 0,\n          },\n          params.funderAuthority\n        );\n      } else {\n        [funderTokenWallet, tokenTxn] =\n          await this.program.mint.getOrCreateWrappedUserInstructions(\n            payer,\n            { fundUpTo: params.stakeAmount ?? 0 },\n            params.funderAuthority\n          );\n      }\n\n      if (tokenTxn) {\n        txns.push(tokenTxn);\n      }\n    }\n\n    const transferTxn = new TransactionObject(\n      payer,\n      [\n        spl.createTransferInstruction(\n          funderTokenWallet,\n          tokenWallet,\n          params.funderAuthority ? params.funderAuthority.publicKey : payer,\n          this.program.mint.toTokenAmount(params.stakeAmount)\n        ),\n      ],\n      params.funderAuthority ? [params.funderAuthority] : []\n    );\n    txns.push(transferTxn);\n\n    const packed = TransactionObject.pack(txns);\n    if (packed.length > 1) {\n      throw new Error(`Failed to pack transactions into a single transactions`);\n    }\n\n    return packed[0];\n  }\n\n  async stake(\n    params: OracleStakeParams & { tokenAccount?: PublicKey }\n  ): Promise<TransactionSignature> {\n    const stakeTxn = await this.stakeInstructions(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(stakeTxn);\n    return txnSignature;\n  }\n\n  heartbeatInstruction(\n    payer: PublicKey,\n    params: {\n      tokenWallet: PublicKey;\n      gcOracle: PublicKey;\n      oracleQueue: PublicKey;\n      dataBuffer: PublicKey;\n      permission: [PermissionAccount, number];\n      authority?: PublicKey;\n    }\n  ): anchor.web3.TransactionInstruction {\n    const [permissionAccount, permissionBump] = params.permission;\n\n    return types.oracleHeartbeat(\n      this.program,\n      { params: { permissionBump } },\n      {\n        oracle: this.publicKey,\n        oracleAuthority: params.authority ?? payer,\n        tokenAccount: params.tokenWallet,\n        gcOracle: params.gcOracle,\n        oracleQueue: params.oracleQueue,\n        permission: permissionAccount.publicKey,\n        dataBuffer: params.dataBuffer,\n      }\n    );\n  }\n\n  async heartbeat(\n    params?: {\n      queueAccount: QueueAccount;\n      tokenWallet?: PublicKey;\n      queueAuthority?: PublicKey;\n      queue?: types.OracleQueueAccountData;\n      permission?: [PermissionAccount, number];\n      authority?: Keypair;\n    },\n    opts?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const oracle = await this.loadData();\n    const tokenWallet = params?.tokenWallet ?? oracle.tokenAccount;\n\n    const queueAccount =\n      params?.queueAccount ??\n      new QueueAccount(this.program, oracle.queuePubkey);\n\n    const queue = params?.queue ?? (await queueAccount.loadData());\n    const oracles = await queueAccount.loadOracles();\n\n    let lastPubkey = this.publicKey;\n    if (oracles.length !== 0) {\n      lastPubkey = oracles[queue.gcIdx];\n    }\n\n    const [permissionAccount, permissionBump] =\n      params?.permission ??\n      this.getPermissionAccount(queueAccount.publicKey, queue.authority);\n\n    try {\n      await permissionAccount.loadData();\n    } catch (_) {\n      throw new Error(\n        'A requested oracle permission pda account has not been initialized.'\n      );\n    }\n\n    if (\n      params?.authority &&\n      !oracle.oracleAuthority.equals(params.authority.publicKey)\n    ) {\n      throw new errors.IncorrectAuthority(\n        oracle.oracleAuthority,\n        params.authority.publicKey\n      );\n    }\n\n    const heartbeatTxn = new TransactionObject(\n      this.program.walletPubkey,\n      [\n        this.heartbeatInstruction(this.program.walletPubkey, {\n          tokenWallet: tokenWallet,\n          gcOracle: lastPubkey,\n          oracleQueue: queueAccount.publicKey,\n          dataBuffer: queue.dataBuffer,\n          permission: [permissionAccount, permissionBump],\n          authority: oracle.oracleAuthority,\n        }),\n      ],\n      params?.authority ? [params.authority] : [],\n      opts\n    );\n\n    const txnSignature = await this.program.signAndSend(heartbeatTxn);\n    return txnSignature;\n  }\n\n  async withdrawInstruction(\n    payer: PublicKey,\n    params: OracleWithdrawParams,\n    opts?: TransactionObjectOptions\n  ): Promise<TransactionObject> {\n    const tokenAmount = this.program.mint.toTokenAmountBN(params.amount);\n\n    const oracle = await this.loadData();\n    const queueAccount = new QueueAccount(this.program, oracle.queuePubkey);\n    const queue = await queueAccount.loadData();\n\n    const [permissionAccount, permissionBump] = await this.getPermissions(\n      oracle,\n      queueAccount,\n      queue\n    );\n\n    if (params.unwrap) {\n      const ephemeralWallet = Keypair.generate();\n\n      const ixns = [\n        // initialize space for ephemeral token account\n        SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: ephemeralWallet.publicKey,\n          lamports:\n            await this.program.connection.getMinimumBalanceForRentExemption(\n              spl.ACCOUNT_SIZE\n            ),\n          space: spl.ACCOUNT_SIZE,\n          programId: spl.TOKEN_PROGRAM_ID,\n        }),\n        // initialize ephemeral token account\n        spl.createInitializeAccountInstruction(\n          ephemeralWallet.publicKey,\n          this.program.mint.address,\n          payer,\n          spl.TOKEN_PROGRAM_ID\n        ),\n        types.oracleWithdraw(\n          this.program,\n          {\n            params: {\n              stateBump: this.program.programState.bump,\n              permissionBump,\n              amount: tokenAmount,\n            },\n          },\n          {\n            oracle: this.publicKey,\n            oracleAuthority: oracle.oracleAuthority,\n            tokenAccount: oracle.tokenAccount,\n            withdrawAccount: ephemeralWallet.publicKey,\n            oracleQueue: queueAccount.publicKey,\n            permission: permissionAccount.publicKey,\n            tokenProgram: spl.TOKEN_PROGRAM_ID,\n            programState: this.program.programState.publicKey,\n            payer: payer,\n            systemProgram: SystemProgram.programId,\n          }\n        ),\n        spl.createCloseAccountInstruction(\n          ephemeralWallet.publicKey,\n          oracle.oracleAuthority,\n          payer\n        ),\n      ];\n\n      const txn = new TransactionObject(\n        payer,\n        ixns,\n        params.authority\n          ? [params.authority, ephemeralWallet]\n          : [ephemeralWallet],\n        opts\n      );\n      return txn;\n    }\n\n    const withdrawAccount =\n      params.withdrawAccount ?? this.program.mint.getAssociatedAddress(payer);\n\n    const withdrawIxn = types.oracleWithdraw(\n      this.program,\n      {\n        params: {\n          stateBump: this.program.programState.bump,\n          permissionBump,\n          amount: tokenAmount,\n        },\n      },\n      {\n        oracle: this.publicKey,\n        oracleAuthority: oracle.oracleAuthority,\n        tokenAccount: oracle.tokenAccount,\n        withdrawAccount: withdrawAccount,\n        oracleQueue: queueAccount.publicKey,\n        permission: permissionAccount.publicKey,\n        tokenProgram: spl.TOKEN_PROGRAM_ID,\n        programState: this.program.programState.publicKey,\n        payer: payer,\n        systemProgram: SystemProgram.programId,\n      }\n    );\n\n    return new TransactionObject(\n      payer,\n      [withdrawIxn],\n      params.authority ? [params.authority] : [],\n      opts\n    );\n  }\n\n  async withdraw(\n    params: OracleWithdrawParams,\n    opts?: TransactionObjectOptions\n  ): Promise<TransactionSignature> {\n    const withdrawTxn = await this.withdrawInstruction(\n      this.program.walletPubkey,\n      params,\n      opts\n    );\n    const txnSignature = await this.program.signAndSend(withdrawTxn);\n    return txnSignature;\n  }\n\n  public getPermissionAccount(\n    queuePubkey: PublicKey,\n    queueAuthority: PublicKey\n  ): [PermissionAccount, number] {\n    return PermissionAccount.fromSeed(\n      this.program,\n      queueAuthority,\n      queuePubkey,\n      this.publicKey\n    );\n  }\n\n  public async toAccountsJSON(\n    _oracle?: types.OracleAccountData & { balance: number },\n    _permissionAccount?: PermissionAccount,\n    _permission?: types.PermissionAccountData\n  ): Promise<OracleAccountsJSON> {\n    const oracle = _oracle ?? (await this.loadData());\n    let permissionAccount = _permissionAccount;\n    let permission = _permission;\n    if (!permissionAccount || !permission) {\n      const queueAccount = new QueueAccount(this.program, oracle.queuePubkey);\n      const queue = await queueAccount.loadData();\n      [permissionAccount] = this.getPermissionAccount(\n        queueAccount.publicKey,\n        queue.authority\n      );\n      permission = await permissionAccount.loadData();\n    }\n\n    const oracleBalance =\n      (await this.program.mint.fetchBalance(oracle.tokenAccount)) ?? 0;\n\n    return {\n      publicKey: this.publicKey,\n      balance: oracleBalance,\n      ...oracle.toJSON(),\n      permission: {\n        publicKey: permissionAccount.publicKey,\n        ...permission.toJSON(),\n      },\n    };\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    publicKeys: Array<PublicKey>,\n    commitment: Commitment = 'confirmed'\n  ): Promise<\n    Array<{\n      account: OracleAccount;\n      data: types.OracleAccountData;\n    }>\n  > {\n    const oracles: Array<{\n      account: OracleAccount;\n      data: types.OracleAccountData;\n    }> = [];\n\n    const accountInfos = await anchor.utils.rpc.getMultipleAccounts(\n      program.connection,\n      publicKeys,\n      commitment\n    );\n\n    for (const accountInfo of accountInfos) {\n      if (!accountInfo?.publicKey) {\n        continue;\n      }\n      try {\n        const account = new OracleAccount(program, accountInfo.publicKey);\n        const data = types.OracleAccountData.decode(accountInfo.account.data);\n        oracles.push({ account, data });\n        // eslint-disable-next-line no-empty\n      } catch {}\n    }\n\n    return oracles;\n  }\n}\n\nexport interface OracleInitParams {\n  /** Name of the oracle for easier identification. */\n  name?: string;\n  /** Metadata of the oracle for easier identification. */\n  metadata?: string;\n  /** Alternative keypair that will be the authority for the oracle. If not set the payer will be used. */\n  authority?: Keypair;\n  /**\n   * Optional,\n   */\n  stakingWalletKeypair?: Keypair;\n}\n\nexport interface OracleStakeParams {\n  /** The amount of funds to deposit into the oracle's staking wallet. The oracle must have the {@linkcode QueueAccount} minStake before being permitted to heartbeat and join the queue. */\n  stakeAmount: number;\n  /** The tokenAccount for the account funding the staking wallet. Will default to the payer's associatedTokenAccount if not provided. */\n  funderTokenWallet?: PublicKey;\n  /** The funderTokenWallet authority for approving the transfer of funds from the funderTokenWallet into the oracle staking wallet. Will default to the payer if not provided. */\n  funderAuthority?: Keypair;\n\n  /** Do not wrap funds if funderTokenWallet is missing funds */\n  disableWrap?: boolean;\n}\n\n// export interface OracleWithdrawParams {\n//   /** The amount of tokens to withdraw from the oracle staking wallet. Ex: 1.25 would withdraw 1250000000 wSOL tokens from the staking wallet */\n//   amount: number;\n//   /** SPL token account where the tokens will be sent. Defaults to the payers associated token account. */\n//   withdrawAccount?: PublicKey;\n//   /** Alternative keypair that is the oracle authority and required to withdraw from the staking wallet. */\n//   authority?: Keypair;\n// }\n\nexport type OracleAccountsJSON = types.OracleAccountDataJSON & {\n  publicKey: PublicKey;\n  balance: number;\n  permission: types.PermissionAccountDataJSON & { publicKey: PublicKey };\n};\n\nexport interface OracleWithdrawBaseParams {\n  /** The amount of tokens to withdraw from the oracle staking wallet. Ex: 1.25 would withdraw 1250000000 wSOL tokens from the staking wallet */\n  amount: number;\n  /** Unwrap funds directly to oracle authority */\n  unwrap: boolean;\n  /** Alternative keypair that is the oracle authority and required to withdraw from the staking wallet. */\n  authority?: Keypair;\n}\n\nexport interface OracleWithdrawUnwrapParams extends OracleWithdrawBaseParams {\n  unwrap: true;\n}\n\nexport interface OracleWithdrawWalletParams extends OracleWithdrawBaseParams {\n  unwrap: false;\n  /** SPL token account where the tokens will be sent. Defaults to the payers associated token account. */\n  withdrawAccount?: PublicKey;\n}\n\nexport type OracleWithdrawParams =\n  | OracleWithdrawUnwrapParams\n  | OracleWithdrawWalletParams;\n"]}
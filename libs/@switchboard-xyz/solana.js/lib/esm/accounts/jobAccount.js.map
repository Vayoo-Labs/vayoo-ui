{"version":3,"file":"jobAccount.js","sourceRoot":"","sources":["../../../src/accounts/jobAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import * as errors from '../errors';\nimport * as types from '../generated';\nimport { SwitchboardProgram } from '../SwitchboardProgram';\nimport {\n  TransactionObject,\n  TransactionObjectOptions,\n} from '../TransactionObject';\n\nimport { Account } from './account';\n\nimport * as anchor from '@coral-xyz/anchor';\nimport {\n  AccountInfo,\n  Commitment,\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  SystemProgram,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport { OracleJob, toUtf8 } from '@switchboard-xyz/common';\n\n/**\n * Account type storing a list of SwitchboardTasks {@linkcode OracleJob.Task} dictating how to source data off-chain.\n *\n * Data: {@linkcode types.JobAccountData}\n */\nexport class JobAccount extends Account<types.JobAccountData> {\n  static accountName = 'JobAccountData';\n\n  /**\n   * Returns the job's name buffer in a stringified format.\n   */\n  public static getName = (job: types.JobAccountData) => toUtf8(job.name);\n  /**\n   * Returns the job's metadata buffer in a stringified format.\n   */\n  public static getMetadata = (job: types.JobAccountData) =>\n    toUtf8(job.metadata);\n  /**\n   * Get the size of an {@linkcode JobAccount} on-chain.\n   */\n  public size = this.program.account.jobAccountData.size;\n\n  public static getAccountSize(byteLength: number): number {\n    return 181 + byteLength;\n  }\n\n  /**\n   * Return a job account initialized to the default values.\n   *\n   * @params byteLength - the length of the serialized job\n   */\n  public static default(byteLength: number): types.LeaseAccountData {\n    const buffer = Buffer.alloc(JobAccount.getAccountSize(byteLength), 0);\n    types.LeaseAccountData.discriminator.copy(buffer, 0);\n    return types.LeaseAccountData.decode(buffer);\n  }\n\n  /**\n   * Creates a mock account info for a given job. Useful for test integrations.\n   */\n  public static createMock(\n    programId: PublicKey,\n    data: Partial<types.JobAccountData> &\n      ({ job: OracleJob } | { tasks: Array<OracleJob.Task> }),\n    options?: {\n      lamports?: number;\n      rentEpoch?: number;\n    }\n  ): AccountInfo<Buffer> {\n    let jobData: Buffer | undefined = undefined;\n    if ('data' in data && data.data && data.data.byteLength > 0) {\n      jobData = Buffer.from(data.data);\n    }\n    if ('job' in data) {\n      jobData = Buffer.from(OracleJob.encodeDelimited(data.job).finish());\n    } else if ('tasks' in data) {\n      jobData = Buffer.from(\n        OracleJob.encodeDelimited(OracleJob.fromObject(data.tasks)).finish()\n      );\n    }\n    if (!jobData) {\n      throw new Error(`No job data found to create mock`);\n    }\n\n    const fields: types.LeaseAccountDataFields = {\n      ...JobAccount.default(jobData.byteLength),\n      ...data,\n      // any cleanup actions here\n    };\n    const state = new types.LeaseAccountData(fields);\n\n    const buffer = Buffer.alloc(\n      JobAccount.getAccountSize(jobData.byteLength),\n      0\n    );\n    types.LeaseAccountData.discriminator.copy(buffer, 0);\n    types.LeaseAccountData.layout.encode(state, buffer, 8);\n    jobData.copy(buffer, 181);\n\n    return {\n      executable: false,\n      owner: programId,\n      lamports: options?.lamports ?? 1 * LAMPORTS_PER_SOL,\n      data: buffer,\n      rentEpoch: options?.rentEpoch ?? 0,\n    };\n  }\n\n  /** Load an existing JobAccount with its current on-chain state */\n  public static async load(\n    program: SwitchboardProgram,\n    publicKey: PublicKey | string\n  ): Promise<[JobAccount, types.JobAccountData]> {\n    const account = new JobAccount(\n      program,\n      typeof publicKey === 'string' ? new PublicKey(publicKey) : publicKey\n    );\n    const state = await account.loadData();\n    return [account, state];\n  }\n\n  /**\n   * Retrieve and decode the {@linkcode types.JobAccountData} stored in this account.\n   */\n  public async loadData(): Promise<types.JobAccountData> {\n    const data = await types.JobAccountData.fetch(this.program, this.publicKey);\n    if (data === null)\n      throw new errors.AccountNotFoundError('Job', this.publicKey);\n    return data;\n  }\n\n  public static createInstructions(\n    program: SwitchboardProgram,\n    payer: PublicKey,\n    params: JobInitParams,\n    options?: TransactionObjectOptions\n  ): [JobAccount, Array<TransactionObject>] {\n    if (params.data.byteLength > 6400) {\n      throw new Error('Switchboard jobs need to be less than 6400 bytes');\n    }\n\n    const jobKeypair = params.keypair ?? Keypair.generate();\n    program.verifyNewKeypair(jobKeypair);\n\n    const authority = params.authority ? params.authority.publicKey : payer;\n\n    const CHUNK_SIZE = 800;\n\n    const txns: Array<TransactionObject> = [];\n\n    if (params.data.byteLength <= CHUNK_SIZE) {\n      const jobInitIxn = types.jobInit(\n        program,\n        {\n          params: {\n            name: [...Buffer.from(params.name ?? '', 'utf8').slice(0, 32)],\n            expiration: new anchor.BN(params.expiration ?? 0),\n            stateBump: program.programState.bump,\n            data: params.data,\n            size: params.data.byteLength,\n          },\n        },\n        {\n          job: jobKeypair.publicKey,\n          authority: authority,\n          programState: program.programState.publicKey,\n          payer,\n          systemProgram: SystemProgram.programId,\n        }\n      );\n      txns.push(\n        new TransactionObject(\n          payer,\n          [jobInitIxn],\n          params.authority ? [jobKeypair, params.authority] : [jobKeypair],\n          options\n        )\n      );\n    } else {\n      const chunks: Uint8Array[] = [];\n\n      for (let i = 0; i < params.data.byteLength; ) {\n        const end =\n          i + CHUNK_SIZE >= params.data.byteLength\n            ? params.data.byteLength\n            : i + CHUNK_SIZE;\n        chunks.push(params.data.slice(i, end));\n        i = end;\n      }\n\n      const jobInitIxn = types.jobInit(\n        program,\n        {\n          params: {\n            name: [...Buffer.from(params.name ?? '', 'utf8').slice(0, 32)],\n            expiration: new anchor.BN(params.expiration ?? 0),\n            stateBump: program.programState.bump,\n            data: new Uint8Array(),\n            size: params.data.byteLength,\n          },\n        },\n        {\n          job: jobKeypair.publicKey,\n          authority: authority,\n          programState: program.programState.publicKey,\n          payer,\n          systemProgram: SystemProgram.programId,\n        }\n      );\n\n      txns.push(\n        new TransactionObject(\n          payer,\n          [jobInitIxn],\n          params.authority ? [jobKeypair, params.authority] : [jobKeypair],\n          options\n        )\n      );\n\n      for (const [n, chunk] of chunks.entries()) {\n        const jobSetDataIxn = types.jobSetData(\n          program,\n          {\n            params: {\n              data: chunk,\n              chunkIdx: n,\n            },\n          },\n          {\n            job: jobKeypair.publicKey,\n            authority: authority,\n          }\n        );\n        txns.push(\n          new TransactionObject(\n            payer,\n            [jobSetDataIxn],\n            params.authority ? [params.authority] : [],\n            options\n          )\n        );\n      }\n    }\n\n    return [new JobAccount(program, jobKeypair.publicKey), txns];\n  }\n\n  public static async create(\n    program: SwitchboardProgram,\n    params: JobInitParams,\n    options?: TransactionObjectOptions\n  ): Promise<[JobAccount, Array<TransactionSignature>]> {\n    const [account, transactions] = JobAccount.createInstructions(\n      program,\n      program.walletPubkey,\n      params,\n      options\n    );\n    const txSignature = await program.signAndSendAll(transactions);\n    return [account, txSignature];\n  }\n\n  decode(data: Buffer): types.JobAccountData {\n    try {\n      return types.JobAccountData.decode(data);\n    } catch {\n      return this.program.coder.decode<types.JobAccountData>(\n        JobAccount.accountName,\n        data\n      );\n    }\n  }\n\n  static decode(\n    program: SwitchboardProgram,\n    accountInfo: AccountInfo<Buffer>\n  ): types.JobAccountData {\n    if (!accountInfo || accountInfo.data === null) {\n      throw new Error('Cannot decode empty JobAccountData');\n    }\n    return program.coder.decode(JobAccount.accountName, accountInfo?.data);\n  }\n\n  static decodeJob(\n    program: SwitchboardProgram,\n    accountInfo: AccountInfo<Buffer>\n  ): OracleJob {\n    return OracleJob.decodeDelimited(\n      JobAccount.decode(program, accountInfo).data!\n    );\n  }\n\n  public async toAccountsJSON(\n    _job?: types.JobAccountData\n  ): Promise<JobAccountsJSON> {\n    const job = _job ?? (await this.loadData());\n    const oracleJob = OracleJob.decodeDelimited(job.data);\n\n    return {\n      publicKey: this.publicKey,\n      ...job.toJSON(),\n      tasks: oracleJob.tasks,\n    };\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    publicKeys: Array<PublicKey>,\n    commitment: Commitment = 'confirmed'\n  ): Promise<\n    Array<{\n      account: JobAccount;\n      data: types.JobAccountData;\n      job: OracleJob;\n    }>\n  > {\n    const jobs: Array<{\n      account: JobAccount;\n      data: types.JobAccountData;\n      job: OracleJob;\n    }> = [];\n\n    const accountInfos = await anchor.utils.rpc.getMultipleAccounts(\n      program.connection,\n      publicKeys,\n      commitment\n    );\n\n    for (const accountInfo of accountInfos) {\n      if (!accountInfo?.publicKey) {\n        continue;\n      }\n      try {\n        const account = new JobAccount(program, accountInfo.publicKey);\n        const data = types.JobAccountData.decode(accountInfo.account.data);\n        const job = OracleJob.decodeDelimited(data.data);\n        jobs.push({ account, data, job });\n        // eslint-disable-next-line no-empty\n      } catch {}\n    }\n\n    return jobs;\n  }\n}\n\nexport interface JobInitParams {\n  data: Uint8Array;\n  weight?: number;\n  name?: string;\n  authority?: Keypair;\n  expiration?: number;\n  variables?: Array<string>;\n  keypair?: Keypair;\n}\n\nexport type JobAccountsJSON = types.JobAccountDataJSON & {\n  publicKey: PublicKey;\n  tasks: Array<OracleJob.ITask>;\n};\n"]}
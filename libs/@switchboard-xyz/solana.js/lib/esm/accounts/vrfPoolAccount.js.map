{"version":3,"file":"vrfPoolAccount.js","sourceRoot":"","sources":["../../../src/accounts/vrfPoolAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import { VRF_POOL_REQUEST_AMOUNT } from '../const';\nimport { AccountNotFoundError, InsufficientFundsError } from '../errors';\nimport * as types from '../generated';\nimport { VrfPoolRequestEvent } from '../SwitchboardEvents';\nimport { SwitchboardProgram } from '../SwitchboardProgram';\nimport { TransactionObject } from '../TransactionObject';\n\nimport { Account, OnAccountChangeCallback } from './account';\nimport { PermissionAccount } from './permissionAccount';\nimport { CreateVrfLiteParams, QueueAccount } from './queueAccount';\nimport { Callback } from './vrfAccount';\nimport { VrfLiteAccount } from './vrfLiteAccount';\n\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  createTransferInstruction,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token-v2';\nimport {\n  AccountMeta,\n  Commitment,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport { promiseWithTimeout } from '@switchboard-xyz/common';\nimport _ from 'lodash';\n\n// export type VrfPoolRow = {\n//   timestamp: number;\n//   pubkey: PublicKey;\n// };\n\nexport type VrfPoolPushNewParams = CreateVrfLiteParams &\n  Omit<VrfPoolPushParams, 'vrf'> & {\n    queueAccount?: QueueAccount;\n    vrfPool?: types.VrfPoolAccountData;\n  };\n\nexport interface VrfPoolInitParams {\n  maxRows: number;\n  minInterval?: number;\n  authority?: PublicKey;\n  keypair?: Keypair;\n}\n\nexport interface VrfPoolPushParams {\n  authority?: Keypair;\n  vrf: VrfLiteAccount;\n  permission?: PermissionAccount;\n}\n\nexport interface VrfPoolPopParams {\n  authority?: Keypair;\n}\n\nexport interface VrfPoolRequestParams {\n  authority?: Keypair;\n  callback?: Callback;\n}\n\nexport type VrfPoolDepositParams = {\n  tokenWallet?: PublicKey;\n  tokenAuthority?: Keypair;\n  amount: number;\n  disableWrap?: boolean;\n};\n\nexport type VrfPoolAccountData = types.VrfPoolAccountData & {\n  pool: Array<types.VrfPoolRow>;\n};\n\nexport class VrfPoolAccount extends Account<VrfPoolAccountData> {\n  public size = this.program.account.vrfPoolAccountData.size;\n\n  /**\n   * Invoke a callback each time a VrfAccount's data has changed on-chain.\n   * @param callback - the callback invoked when the vrf state changes\n   * @param commitment - optional, the desired transaction finality. defaults to 'confirmed'\n   * @returns the websocket subscription id\n   */\n  onChange(\n    callback: OnAccountChangeCallback<VrfPoolAccountData>,\n    commitment: Commitment = 'confirmed'\n  ): number {\n    return this.program.connection.onAccountChange(\n      this.publicKey,\n      accountInfo => callback(VrfPoolAccount.decode(accountInfo.data)),\n      commitment\n    );\n  }\n\n  public static decode(data: Buffer): VrfPoolAccountData {\n    const accountData = types.VrfPoolAccountData.decode(\n      data.slice(0, 8 + types.VrfPoolAccountData.layout.span)\n    );\n\n    const poolBytes = data.slice(8 + types.VrfPoolAccountData.layout.span);\n    const ROW_SIZE = types.VrfPoolRow.layout().span;\n    const pool: Array<types.VrfPoolRow> = [];\n    for (let i = 0; i < poolBytes.length; i += ROW_SIZE) {\n      if (i + ROW_SIZE > poolBytes.length) {\n        break;\n      }\n\n      const row = types.VrfPoolRow.fromDecoded(\n        types.VrfPoolRow.layout().decode(poolBytes, i)\n      );\n      if (row.pubkey.equals(PublicKey.default)) {\n        break;\n      }\n\n      pool.push(row);\n    }\n\n    accountData['pool'] = pool;\n\n    return accountData as VrfPoolAccountData;\n  }\n\n  public async loadData(): Promise<VrfPoolAccountData> {\n    const info = await this.program.connection.getAccountInfo(this.publicKey);\n\n    if (info === null) {\n      throw new AccountNotFoundError('VrfPool', this.publicKey);\n    }\n    if (!info.owner.equals(this.program.programId)) {\n      throw new Error(\"account doesn't belong to this program\");\n    }\n\n    return VrfPoolAccount.decode(info.data);\n  }\n\n  public static getSize(program: SwitchboardProgram, maxRows: number) {\n    return 8 + types.VrfPoolAccountData.layout.span + maxRows * 40;\n  }\n\n  public static async createInstruction(\n    program: SwitchboardProgram,\n    payer: PublicKey,\n    params: VrfPoolInitParams & { queueAccount: QueueAccount }\n  ): Promise<[VrfPoolAccount, TransactionObject]> {\n    const vrfPoolKeypair = params.keypair ?? Keypair.generate();\n    const space = VrfPoolAccount.getSize(program, params.maxRows);\n\n    const vrfPoolAccount = new VrfPoolAccount(\n      program,\n      vrfPoolKeypair.publicKey\n    );\n\n    const vrfPoolEscrow = program.mint.getAssociatedAddress(\n      vrfPoolKeypair.publicKey\n    );\n\n    const vrfPoolInitTxn = new TransactionObject(\n      payer,\n      [\n        SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: vrfPoolKeypair.publicKey,\n          lamports: await program.connection.getMinimumBalanceForRentExemption(\n            space\n          ),\n          space: space,\n          programId: program.programId,\n        }),\n        types.vrfPoolInit(\n          program,\n          {\n            params: {\n              maxRows: params.maxRows,\n              minInterval: params.minInterval ?? 0,\n              stateBump: program.programState.bump,\n            },\n          },\n          {\n            vrfPool: vrfPoolKeypair.publicKey,\n            authority: params.authority ?? payer,\n            queue: params.queueAccount.publicKey,\n            mint: program.mint.address,\n            escrow: vrfPoolEscrow,\n            programState: program.programState.publicKey,\n            payer: payer,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n            systemProgram: SystemProgram.programId,\n            rent: SYSVAR_RENT_PUBKEY,\n          }\n        ),\n      ],\n      [vrfPoolKeypair]\n    );\n\n    return [vrfPoolAccount, vrfPoolInitTxn];\n  }\n\n  public static async create(\n    program: SwitchboardProgram,\n    params: VrfPoolInitParams & { queueAccount: QueueAccount }\n  ): Promise<[VrfPoolAccount, TransactionSignature]> {\n    const [account, transaction] = await VrfPoolAccount.createInstruction(\n      program,\n      program.walletPubkey,\n      params\n    );\n    const txnSignature = await program.signAndSend(transaction, {\n      skipPreflight: true,\n    });\n    return [account, txnSignature];\n  }\n\n  public async pushNewInstruction(\n    payer: PublicKey,\n    params?: VrfPoolPushNewParams\n  ): Promise<[VrfLiteAccount, TransactionObject]> {\n    const vrfPool = params?.vrfPool ?? (await this.loadData());\n    const queueAccount =\n      params?.queueAccount ?? new QueueAccount(this.program, vrfPool.queue);\n\n    const [vrfLiteAccount, vrfLiteInit] =\n      await queueAccount.createVrfLiteInstructions(payer, {\n        ...params,\n        authority: vrfPool.authority,\n      });\n    const pushTxn = await this.pushInstruction(payer, {\n      ...params,\n      vrf: vrfLiteAccount,\n    });\n\n    const packed = TransactionObject.pack([vrfLiteInit, pushTxn]);\n    if (packed.length > 1) {\n      throw new Error(`Packing error`);\n    }\n\n    return [vrfLiteAccount, packed[0]];\n  }\n\n  public async pushNew(\n    params?: VrfPoolPushNewParams\n  ): Promise<[VrfLiteAccount, TransactionSignature]> {\n    const [vrfLiteAccount, transaction] = await this.pushNewInstruction(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(transaction, {\n      skipPreflight: true,\n    });\n    return [vrfLiteAccount, txnSignature];\n  }\n\n  public async pushInstruction(\n    payer: PublicKey,\n    params: VrfPoolPushParams\n  ): Promise<TransactionObject> {\n    const vrfPool = await this.loadData();\n    const [queueAccount, queue] = await QueueAccount.load(\n      this.program,\n      vrfPool.queue\n    );\n\n    const [permissionAccount] = params.vrf.getPermissionAccount(\n      queueAccount.publicKey,\n      queue.authority\n    );\n\n    // verify permissions\n\n    const pushIxn = types.vrfPoolAdd(\n      this.program,\n      { params: {} },\n      {\n        vrfPool: this.publicKey,\n        authority: vrfPool.authority,\n        vrfLite: params.vrf.publicKey,\n        queue: queueAccount.publicKey,\n        permission: permissionAccount.publicKey,\n      }\n    );\n\n    return new TransactionObject(\n      payer,\n      [pushIxn],\n      params.authority ? [params.authority] : []\n    );\n  }\n\n  public async push(params: VrfPoolPushParams): Promise<TransactionSignature> {\n    const transaction = await this.pushInstruction(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(transaction, {\n      skipPreflight: true,\n    });\n    return txnSignature;\n  }\n\n  public async popInstructions(\n    payer: PublicKey,\n    params?: VrfPoolPopParams\n  ): Promise<TransactionObject> {\n    const vrfPool = await this.loadData();\n    const [queueAccount, queue] = await QueueAccount.load(\n      this.program,\n      vrfPool.queue\n    );\n    const vrfs = vrfPool.pool.slice(-5);\n\n    const popIxn = types.vrfPoolRemove(\n      this.program,\n      { params: {} },\n      {\n        vrfPool: this.publicKey,\n        authority: vrfPool.authority,\n        queue: queueAccount.publicKey,\n      }\n    );\n    popIxn.keys = popIxn.keys.concat(\n      vrfs.map((v): AccountMeta => {\n        return {\n          pubkey: v.pubkey,\n          isSigner: false,\n          isWritable: true,\n        };\n      })\n    );\n\n    return new TransactionObject(\n      payer,\n      [popIxn],\n      params?.authority ? [params.authority] : []\n    );\n  }\n\n  public async pop(params?: VrfPoolPopParams): Promise<TransactionSignature> {\n    const transaction = await this.popInstructions(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(transaction, {\n      skipPreflight: true,\n    });\n    return txnSignature;\n  }\n\n  /** Returns the sorted, next {@param size} rows in the pool */\n  public getRemainingAccounts(\n    vrfPool: VrfPoolAccountData,\n    queueAuthority: PublicKey,\n    size = 7\n  ): Array<AccountMeta> {\n    const vrfRows = [\n      ...vrfPool.pool.slice(vrfPool.idx),\n      ...vrfPool.pool.slice(0, vrfPool.idx),\n    ].slice(0, size);\n\n    const accountMetas = vrfRows.map((row): Array<AccountMeta> => {\n      const escrow = this.program.mint.getAssociatedAddress(row.pubkey);\n      const vrfLiteAccount = new VrfLiteAccount(this.program, row.pubkey);\n      const [permission] = vrfLiteAccount.getPermissionAccount(\n        vrfPool.queue,\n        queueAuthority\n      );\n\n      return [\n        {\n          pubkey: row.pubkey,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: permission.publicKey,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: escrow,\n          isSigner: false,\n          isWritable: true,\n        },\n      ];\n    });\n\n    const remainingAccounts: Array<AccountMeta> = _.flatten(accountMetas).sort(\n      (a, b) => Buffer.compare(a.pubkey.toBuffer(), b.pubkey.toBuffer())\n    );\n\n    return remainingAccounts;\n  }\n\n  public async requestInstructions(\n    payer: PublicKey,\n    params?: VrfPoolRequestParams,\n    size = 7\n  ): Promise<TransactionObject> {\n    const vrfPool = await this.loadData();\n\n    const [queueAccount, queue] = await QueueAccount.load(\n      this.program,\n      vrfPool.queue\n    );\n\n    const remainingAccounts = this.getRemainingAccounts(\n      vrfPool,\n      queue.authority,\n      size\n    );\n\n    // we dont want to wrap any funds. it will take up space in the txn needed for remainingAccounts\n    // to increase probability of popping the next row\n    const vrfPoolBalance = await this.fetchBalance(vrfPool.escrow);\n    if (vrfPoolBalance < VRF_POOL_REQUEST_AMOUNT) {\n      throw new InsufficientFundsError(VRF_POOL_REQUEST_AMOUNT, vrfPoolBalance);\n    }\n\n    const requestIxn = types.vrfPoolRequest(\n      this.program,\n      {\n        params: {\n          callback: params?.callback ?? null,\n        },\n      },\n      {\n        vrfPool: this.publicKey,\n        authority: vrfPool.authority,\n        escrow: vrfPool.escrow,\n        mint: this.program.mint.address,\n        queue: queueAccount.publicKey,\n        queueAuthority: queue.authority,\n        dataBuffer: queue.dataBuffer,\n        recentBlockhashes: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        programState: this.program.programState.publicKey,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      }\n    );\n    requestIxn.keys = requestIxn.keys.concat(remainingAccounts);\n\n    const requestTxn = new TransactionObject(\n      payer,\n      [requestIxn],\n      params?.authority ? [params.authority] : []\n    );\n\n    return requestTxn;\n  }\n\n  public async request(\n    params?: VrfPoolRequestParams\n  ): Promise<TransactionSignature> {\n    const transaction = await this.requestInstructions(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(transaction, {\n      skipPreflight: true,\n    });\n    return txnSignature;\n  }\n\n  // public requestSync(\n  //   payer: PublicKey,\n  //   params: {\n  //     payoutTokenWallet: PublicKey;\n\n  //     queuePubkey: PublicKey;\n  //     queueAuthority: PublicKey;\n  //     queueDataBuffer: PublicKey;\n  //     crankDataBuffer: PublicKey;\n\n  //     readyAggregators: Array<[AggregatorAccount, AggregatorPdaAccounts]>;\n\n  //     nonce?: number;\n  //     failOpenOnMismatch?: boolean;\n  //     popIdx?: number;\n  //   },\n  //   options?: TransactionObjectOptions\n  // ): TransactionObject {\n  //   if (params.readyAggregators.length < 1) {\n  //     throw new Error(`No aggregators ready`);\n  //   }\n\n  //   let remainingAccounts: PublicKey[] = [];\n  //   let txn: TransactionObject | undefined = undefined;\n\n  //   const allLeaseBumps = params.readyAggregators.reduce(\n  //     (map, [aggregatorAccount, pdaAccounts]) => {\n  //       map.set(aggregatorAccount.publicKey.toBase58(), pdaAccounts.leaseBump);\n  //       return map;\n  //     },\n  //     new Map<string, number>()\n  //   );\n  //   const allPermissionBumps = params.readyAggregators.reduce(\n  //     (map, [aggregatorAccount, pdaAccounts]) => {\n  //       map.set(\n  //         aggregatorAccount.publicKey.toBase58(),\n  //         pdaAccounts.permissionBump\n  //       );\n  //       return map;\n  //     },\n  //     new Map<string, number>()\n  //   );\n\n  //   // add as many readyAggregators until the txn overflows\n  //   for (const [\n  //     readyAggregator,\n  //     aggregatorPdaAccounts,\n  //   ] of params.readyAggregators) {\n  //     const { leaseAccount, leaseEscrow, permissionAccount } =\n  //       aggregatorPdaAccounts;\n\n  //     const newRemainingAccounts = [\n  //       ...remainingAccounts,\n  //       readyAggregator.publicKey,\n  //       leaseAccount.publicKey,\n  //       leaseEscrow,\n  //       permissionAccount.publicKey,\n  //     ];\n\n  //     try {\n  //       const newTxn = this.getPopTxn(\n  //         payer,\n  //         {\n  //           ...params,\n  //           remainingAccounts: newRemainingAccounts,\n  //           leaseBumps: allLeaseBumps,\n  //           permissionBumps: allPermissionBumps,\n  //         },\n  //         options\n  //       );\n  //       // succeeded, so set running txn and remaining accounts and try again\n  //       txn = newTxn;\n  //       remainingAccounts = newRemainingAccounts;\n  //     } catch (error) {\n  //       if (error instanceof errors.TransactionOverflowError) {\n  //         if (txn === undefined) {\n  //           throw new Error(`Failed to create crank pop transaction, ${error}`);\n  //         }\n  //         return txn;\n  //       }\n  //       throw error;\n  //     }\n  //   }\n\n  //   if (txn === undefined) {\n  //     throw new Error(`Failed to create crank pop transaction`);\n  //   }\n\n  //   return txn;\n  // }\n\n  public async depositInstructions(\n    payer: PublicKey,\n    params: VrfPoolDepositParams\n  ): Promise<TransactionObject> {\n    const userTokenAddress =\n      params.tokenWallet ??\n      this.program.mint.getAssociatedAddress(\n        params.tokenAuthority?.publicKey ?? payer\n      );\n\n    const userBalance = await this.program.mint.fetchBalance(userTokenAddress);\n    if (params.disableWrap && !userBalance) {\n      throw new InsufficientFundsError(params.amount, 0);\n    }\n    if (params.disableWrap && params.amount > (userBalance ?? 0)) {\n      throw new InsufficientFundsError(params.amount, userBalance ?? 0);\n    }\n\n    const transferTxn = new TransactionObject(\n      payer,\n      [\n        createTransferInstruction(\n          userTokenAddress,\n          this.getEscrow(),\n          params.tokenAuthority?.publicKey ?? payer,\n          this.program.mint.toTokenAmount(params.amount)\n        ),\n      ],\n      params.tokenAuthority ? [params.tokenAuthority] : []\n    );\n\n    if (params.amount > (userBalance ?? 0)) {\n      const [wrapAccount, wrapIxn] =\n        await this.program.mint.getOrCreateWrappedUserInstructions(\n          payer,\n          { amount: params.amount },\n          params.tokenAuthority\n        );\n      if (wrapIxn) {\n        if (!wrapAccount.equals(userTokenAddress)) {\n          throw new Error(\n            `Incorrect token account, expected ${userTokenAddress}, received ${wrapAccount}`\n          );\n        }\n        return wrapIxn.combine(transferTxn);\n      }\n    }\n\n    return transferTxn;\n  }\n\n  public async deposit(\n    params: VrfPoolDepositParams\n  ): Promise<TransactionSignature> {\n    const transaction = await this.depositInstructions(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(transaction);\n    return txnSignature;\n  }\n\n  public async requestAndAwaitEvent(\n    params?: { vrf?: types.VrfAccountData } & (\n      | VrfPoolRequestParams\n      | {\n          requestFunction: (...args: any[]) => Promise<TransactionSignature>;\n        }\n    ),\n    timeout = 30000\n  ): Promise<[VrfPoolRequestEvent, TransactionSignature]> {\n    let ws: number | undefined = undefined;\n\n    const closeWebsocket = async () => {\n      if (ws !== undefined) {\n        await this.program.removeEventListener(ws).catch();\n        ws = undefined;\n      }\n    };\n\n    const eventPromise: Promise<VrfPoolRequestEvent> = promiseWithTimeout(\n      timeout,\n      new Promise((resolve: (result: VrfPoolRequestEvent) => void) => {\n        ws = this.program.addEventListener(\n          'VrfPoolRequestEvent',\n          (event, slot, signature) => {\n            if (event.vrfPoolPubkey.equals(this.publicKey)) {\n              resolve(event);\n            }\n          }\n        );\n      })\n    ).finally(async () => {\n      await closeWebsocket();\n    });\n\n    let requestRandomnessSignature: string | undefined = undefined;\n    if (params && 'requestFunction' in params) {\n      requestRandomnessSignature = await params\n        .requestFunction()\n        .catch(async error => {\n          await closeWebsocket();\n          throw new Error(`Failed to call requestRandomness, ${error}`);\n        });\n    } else {\n      requestRandomnessSignature = await this.request(params).catch(\n        async error => {\n          await closeWebsocket();\n          throw new Error(`Failed to call requestRandomness, ${error}`);\n        }\n      );\n    }\n\n    const event = await eventPromise;\n    await closeWebsocket();\n\n    return [event, requestRandomnessSignature];\n  }\n\n  public getPermissionAccount(\n    queuePubkey: PublicKey,\n    queueAuthority: PublicKey\n  ): [PermissionAccount, number] {\n    return PermissionAccount.fromSeed(\n      this.program,\n      queueAuthority,\n      queuePubkey,\n      this.publicKey\n    );\n  }\n\n  public getEscrow(): PublicKey {\n    return this.program.mint.getAssociatedAddress(this.publicKey);\n  }\n\n  public async fetchBalance(escrow?: PublicKey): Promise<number> {\n    const escrowPubkey =\n      escrow ?? this.program.mint.getAssociatedAddress(this.publicKey);\n    const escrowBalance = await this.program.mint.fetchBalance(escrowPubkey);\n    if (escrowBalance === null) {\n      throw new AccountNotFoundError('VrfPool Escrow', escrowPubkey);\n    }\n    return escrowBalance;\n  }\n\n  public async fundUpToInstruction(\n    payer: PublicKey,\n    fundUpTo: number,\n    disableWrap = false\n  ): Promise<[TransactionObject | undefined, number | undefined]> {\n    const escrowPubkey = this.getEscrow();\n    const balance = await this.fetchBalance(escrowPubkey);\n    if (balance >= fundUpTo) {\n      return [undefined, undefined];\n    }\n\n    const fundAmount = fundUpTo - balance;\n\n    const depositTxn = await this.depositInstructions(payer, {\n      amount: fundAmount,\n      disableWrap,\n    });\n    return [depositTxn, fundAmount];\n  }\n\n  public async fundUpTo(\n    payer: PublicKey,\n    fundUpTo: number,\n    disableWrap = false\n  ): Promise<[TransactionSignature | undefined, number | undefined]> {\n    const [fundUpToTxn, fundAmount] = await this.fundUpToInstruction(\n      payer,\n      fundUpTo,\n      disableWrap\n    );\n    if (!fundUpToTxn) {\n      return [undefined, undefined];\n    }\n\n    const txnSignature = await this.program.signAndSend(fundUpToTxn);\n    return [txnSignature, fundAmount!];\n  }\n}\n"]}
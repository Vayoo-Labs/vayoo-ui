{"version":3,"file":"queueDataBuffer.js","sourceRoot":"","sources":["../../../src/accounts/queueDataBuffer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as errors from '../errors';\nimport * as types from '../generated';\nimport { SwitchboardProgram } from '../SwitchboardProgram';\n\nimport {\n  Account,\n  BUFFER_DISCRIMINATOR,\n  OnAccountChangeCallback,\n} from './account';\n\nimport {\n  AccountInfo,\n  Commitment,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n} from '@solana/web3.js';\nimport assert from 'assert';\n\n/**\n * Account holding a list of oracles actively heartbeating on the queue\n *\n * Data: Array<{@linkcode PublicKey}>\n */\nexport class QueueDataBuffer extends Account<Array<PublicKey>> {\n  static accountName = 'QueueDataBuffer';\n\n  public size = 32;\n\n  public static getAccountSize(size: number): number {\n    return 8 + size * 32;\n  }\n\n  /**\n   * Return an oracle queue buffer initialized to the default values.\n   *\n   * @param size - the number of oracles the buffer should support\n   */\n  public static default(size = 100): Buffer {\n    const buffer = Buffer.alloc(QueueDataBuffer.getAccountSize(size), 0);\n    BUFFER_DISCRIMINATOR.copy(buffer, 0);\n    return buffer;\n  }\n\n  /**\n   * Create a mock account info for a given vrf config. Useful for test integrations.\n   */\n  public static createMock(\n    programId: PublicKey,\n    data: { size?: number; oracles?: Array<PublicKey> },\n    options?: {\n      lamports?: number;\n      rentEpoch?: number;\n    }\n  ): AccountInfo<Buffer> {\n    const size = data.size ?? 100;\n\n    const oracles: Array<PublicKey> = Array(size).fill(PublicKey.default);\n    for (const [n, oracle] of (data.oracles ?? []).entries()) {\n      oracles[n] = oracle;\n    }\n\n    const buffer = Buffer.alloc(QueueDataBuffer.getAccountSize(size), 0);\n    BUFFER_DISCRIMINATOR.copy(buffer, 0);\n    for (const [n, oracle] of oracles.entries()) {\n      const oracleBuffer = oracle.toBuffer();\n      assert(oracleBuffer.byteLength === 32);\n      oracleBuffer.copy(buffer, 8 + n * 32);\n    }\n\n    return {\n      executable: false,\n      owner: programId,\n      lamports: options?.lamports ?? 1 * LAMPORTS_PER_SOL,\n      data: buffer,\n      rentEpoch: options?.rentEpoch ?? 0,\n    };\n  }\n\n  /**\n   * Invoke a callback each time a QueueAccount's oracle queue buffer has changed on-chain. The buffer stores a list of oracle's and their last heartbeat timestamp.\n   * @param callback - the callback invoked when the queues buffer changes\n   * @param commitment - optional, the desired transaction finality. defaults to 'confirmed'\n   * @returns the websocket subscription id\n   */\n  onChange(\n    callback: OnAccountChangeCallback<Array<PublicKey>>,\n    commitment: Commitment = 'confirmed'\n  ): number {\n    if (this.publicKey.equals(PublicKey.default)) {\n      throw new Error(\n        `No queue dataBuffer provided. Call crankAccount.loadData() or pass it to this function in order to watch the account for changes`\n      );\n    }\n    return this.program.connection.onAccountChange(\n      this.publicKey,\n      accountInfo => callback(QueueDataBuffer.decode(accountInfo)),\n      commitment\n    );\n  }\n\n  /**\n   * Retrieve and decode the {@linkcode types.CrankAccountData} stored in this account.\n   */\n  public async loadData(): Promise<Array<PublicKey>> {\n    if (this.publicKey.equals(PublicKey.default)) {\n      return [];\n    }\n    const accountInfo = await this.program.connection.getAccountInfo(\n      this.publicKey\n    );\n    if (accountInfo === null)\n      throw new errors.AccountNotFoundError(\n        'Oracle Queue Buffer',\n        this.publicKey\n      );\n    const data = QueueDataBuffer.decode(accountInfo);\n    return data;\n  }\n\n  public static decode(\n    bufferAccountInfo: AccountInfo<Buffer>\n  ): Array<PublicKey> {\n    const buffer = bufferAccountInfo.data.slice(8) ?? Buffer.from('');\n\n    const oracles: PublicKey[] = [];\n\n    for (let i = 0; i < buffer.byteLength * 32; i += 32) {\n      if (buffer.byteLength - i < 32) {\n        break;\n      }\n\n      const pubkeyBuf = buffer.slice(i, i + 32);\n      const pubkey = new PublicKey(pubkeyBuf);\n      if (PublicKey.default.equals(pubkey)) {\n        break;\n      }\n      oracles.push(pubkey);\n    }\n\n    return oracles;\n  }\n\n  /**\n   * Return a queues dataBuffer\n   *\n   * @throws {string} if dataBuffer is equal to default publicKey\n   */\n  static fromQueue(\n    program: SwitchboardProgram,\n    queue: types.OracleQueueAccountData\n  ): QueueDataBuffer {\n    if (queue.dataBuffer.equals(PublicKey.default)) {\n      throw new Error(`Failed to find queue data buffer`);\n    }\n\n    return new QueueDataBuffer(program, queue.dataBuffer);\n  }\n}\n"]}
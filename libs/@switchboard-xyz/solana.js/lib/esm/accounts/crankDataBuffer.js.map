{"version":3,"file":"crankDataBuffer.js","sourceRoot":"","sources":["../../../src/accounts/crankDataBuffer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as errors from '../errors';\nimport * as types from '../generated';\nimport { SwitchboardProgram } from '../SwitchboardProgram';\n\nimport {\n  Account,\n  BUFFER_DISCRIMINATOR,\n  OnAccountChangeCallback,\n} from './account';\n\nimport * as anchor from '@coral-xyz/anchor';\nimport { AccountInfo, Commitment, PublicKey } from '@solana/web3.js';\n\n/**\n * Account holding a priority queue of aggregators and their next available update time.\n *\n * Data: Array<{@linkcode types.CrankRow}>\n */\nexport class CrankDataBuffer extends Account<Array<types.CrankRow>> {\n  static accountName = 'CrankDataBuffer';\n\n  public size = 40;\n\n  /**\n   * Invoke a callback each time a crank's buffer has changed on-chain. The buffer stores a list of {@linkcode AggregatorAccount} public keys along with their next available update time.\n   * @param callback - the callback invoked when the crank's buffer changes\n   * @param commitment - optional, the desired transaction finality. defaults to 'confirmed'\n   * @returns the websocket subscription id\n   */\n  onChange(\n    callback: OnAccountChangeCallback<Array<types.CrankRow>>,\n    commitment: Commitment = 'confirmed'\n  ): number {\n    if (this.publicKey.equals(PublicKey.default)) {\n      throw new Error(\n        `No crank dataBuffer provided. Call crankAccount.loadData() or pass it to this function in order to watch the account for changes`\n      );\n    }\n    return this.program.connection.onAccountChange(\n      this.publicKey,\n      accountInfo => callback(CrankDataBuffer.decode(accountInfo)),\n      commitment\n    );\n  }\n\n  /**\n   * Retrieve and decode the {@linkcode types.CrankAccountData} stored in this account.\n   */\n  public async loadData(): Promise<Array<types.CrankRow>> {\n    if (this.publicKey.equals(PublicKey.default)) {\n      return [];\n    }\n    const accountInfo = await this.program.connection.getAccountInfo(\n      this.publicKey\n    );\n    if (accountInfo === null)\n      throw new errors.AccountNotFoundError(\n        'Crank Data Buffer',\n        this.publicKey\n      );\n    const data = CrankDataBuffer.decode(accountInfo);\n    return data;\n  }\n\n  public static decode(\n    bufferAccountInfo: AccountInfo<Buffer>\n  ): Array<types.CrankRow> {\n    const buffer = bufferAccountInfo.data.slice(8) ?? Buffer.from('');\n    const maxRows = Math.floor(buffer.byteLength / 40);\n\n    const pqData: Array<types.CrankRow> = [];\n\n    for (let i = 0; i < maxRows * 40; i += 40) {\n      if (buffer.byteLength - i < 40) {\n        break;\n      }\n\n      const rowBuf = buffer.slice(i, i + 40);\n      const pubkey = new PublicKey(rowBuf.slice(0, 32));\n      if (pubkey.equals(PublicKey.default)) {\n        break;\n      }\n\n      const nextTimestamp = new anchor.BN(rowBuf.slice(32, 40), 'le');\n      pqData.push(new types.CrankRow({ pubkey, nextTimestamp }));\n    }\n\n    return pqData;\n  }\n\n  public static getAccountSize(size: number): number {\n    return 8 + size * 40;\n  }\n\n  public static default(size = 100): Buffer {\n    const buffer = Buffer.alloc(CrankDataBuffer.getAccountSize(size), 0);\n    BUFFER_DISCRIMINATOR.copy(buffer, 0);\n    return buffer;\n  }\n\n  public static sort(crankRows: Array<types.CrankRow>): Array<types.CrankRow> {\n    const sorted: Array<types.CrankRow> = [];\n\n    const rows = [...crankRows];\n\n    while (rows.length > 0) {\n      const popped = pqPop(rows);\n      if (popped !== undefined) {\n        sorted.push(popped);\n      }\n    }\n\n    if (sorted.length !== crankRows.length) {\n      throw new Error(`Crank sort error`);\n    }\n\n    return sorted;\n  }\n\n  /**\n   * Return a crank's dataBuffer\n   *\n   * @throws {string} if dataBuffer is equal to default publicKey\n   */\n  static fromCrank(\n    program: SwitchboardProgram,\n    crank: types.CrankAccountData\n  ): CrankDataBuffer {\n    if (crank.dataBuffer.equals(PublicKey.default)) {\n      throw new Error(`Failed to find crank data buffer`);\n    }\n\n    return new CrankDataBuffer(program, crank.dataBuffer);\n  }\n}\n\nfunction pqPop<T extends types.CrankRow>(crankData: Array<T>): T | undefined {\n  const ret = crankData[0]!;\n  crankData[0] = crankData.at(-1)!;\n  crankData.pop();\n  let current = 0;\n\n  let maxLoops = crankData.length * 2;\n  while (maxLoops > 0) {\n    const leftChildIdx = current * 2 + 1;\n    const rightChildIdx = current * 2 + 2;\n    let swapIdx = rightChildIdx;\n    if (rightChildIdx < crankData.length) {\n      const leftChild = crankData[leftChildIdx];\n      const rightChild = crankData[rightChildIdx];\n      if (leftChild.nextTimestamp < rightChild.nextTimestamp) {\n        swapIdx = leftChildIdx;\n      }\n    }\n    if (swapIdx >= crankData.length) {\n      swapIdx = leftChildIdx;\n    }\n    if (swapIdx >= crankData.length) {\n      break;\n    }\n    const currentItem = crankData[current];\n    const swapItem = crankData[swapIdx];\n    if (currentItem.nextTimestamp < swapItem.nextTimestamp) {\n      break;\n    }\n    crankData[current] = swapItem;\n    crankData[swapIdx] = currentItem;\n    current = swapIdx;\n    --maxLoops;\n    if (maxLoops === 0) {\n      throw new Error(\n        `Failed to sort crank rows in ${crankData.length * 2} loops`\n      );\n    }\n  }\n  return ret;\n}\n"]}
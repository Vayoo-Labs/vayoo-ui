{"version":3,"file":"vrfLiteAccount.js","sourceRoot":"","sources":["../../../src/accounts/vrfLiteAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import * as errors from '../errors';\nimport * as types from '../generated';\nimport { vrfLiteInit } from '../generated';\nimport { vrfLiteCloseAction } from '../generated/instructions/vrfLiteCloseAction';\nimport { SwitchboardProgram } from '../SwitchboardProgram';\nimport {\n  TransactionObject,\n  TransactionObjectOptions,\n} from '../TransactionObject';\n\nimport { Account, OnAccountChangeCallback } from './account';\nimport { OracleAccount } from './oracleAccount';\nimport { PermissionAccount } from './permissionAccount';\nimport { QueueAccount } from './queueAccount';\nimport { Callback } from './vrfAccount';\n\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  createTransferInstruction,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport {\n  Commitment,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport { BN, promiseWithTimeout } from '@switchboard-xyz/common';\n\nexport interface VrfLiteInitParams {\n  callback?: Callback;\n  expiration?: number;\n  keypair?: Keypair;\n  authority?: PublicKey;\n}\n\nexport type VrfLiteDepositParams = {\n  tokenWallet?: PublicKey;\n  tokenAuthority?: Keypair;\n  amount: number;\n};\n\nexport interface VrfLiteProveAndVerifyParams {\n  vrfLite: types.VrfLiteAccountData;\n  counter?: BN;\n  proof: string;\n  oraclePubkey: PublicKey;\n  oracleTokenWallet: PublicKey;\n  oracleAuthority: PublicKey;\n}\n\nexport interface VrfLiteCloseParams {\n  destination?: PublicKey;\n  authority?: Keypair;\n  queueAccount?: QueueAccount;\n  queueAuthority?: PublicKey;\n}\n\nexport class VrfLiteAccount extends Account<types.VrfLiteAccountData> {\n  public size = this.program.account.vrfLiteAccountData.size;\n\n  /**\n   * Invoke a callback each time a VrfAccount's data has changed on-chain.\n   * @param callback - the callback invoked when the vrf state changes\n   * @param commitment - optional, the desired transaction finality. defaults to 'confirmed'\n   * @returns the websocket subscription id\n   */\n  onChange(\n    callback: OnAccountChangeCallback<types.VrfLiteAccountData>,\n    commitment: Commitment = 'confirmed'\n  ): number {\n    return this.program.connection.onAccountChange(\n      this.publicKey,\n      accountInfo =>\n        callback(types.VrfLiteAccountData.decode(accountInfo.data)),\n      commitment\n    );\n  }\n\n  public async loadData(): Promise<types.VrfLiteAccountData> {\n    const data = await types.VrfLiteAccountData.fetch(\n      this.program,\n      this.publicKey\n    );\n    if (data === null)\n      throw new errors.AccountNotFoundError('VrfLite', this.publicKey);\n    return data;\n  }\n\n  public static async createInstruction(\n    program: SwitchboardProgram,\n    payer: PublicKey,\n    params: VrfLiteInitParams & { queueAccount: QueueAccount }\n  ): Promise<[VrfLiteAccount, TransactionObject]> {\n    const queue = await params.queueAccount.loadData();\n\n    const vrfLiteKeypair = params.keypair ?? Keypair.generate();\n    const vrfLiteAccount = new VrfLiteAccount(\n      program,\n      vrfLiteKeypair.publicKey\n    );\n\n    const vrfPoolEscrow = program.mint.getAssociatedAddress(\n      vrfLiteKeypair.publicKey\n    );\n\n    const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n      program,\n      queue.authority,\n      params.queueAccount.publicKey,\n      vrfLiteKeypair.publicKey\n    );\n\n    const vrfLiteInitIxn = vrfLiteInit(\n      program,\n      {\n        params: {\n          callback: params.callback ?? null,\n          stateBump: program.programState.bump,\n          expiration: new BN(params.expiration ?? 0),\n        },\n      },\n      {\n        vrf: vrfLiteKeypair.publicKey,\n        authority: params.authority ?? payer,\n        mint: program.mint.address,\n        escrow: vrfPoolEscrow,\n        queueAuthority: queue.authority,\n        queue: params.queueAccount.publicKey,\n        permission: permissionAccount.publicKey,\n        programState: program.programState.publicKey,\n        payer: payer,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: SYSVAR_RENT_PUBKEY,\n      }\n    );\n\n    const vrfLiteInitTxn = new TransactionObject(\n      payer,\n      [vrfLiteInitIxn],\n      [vrfLiteKeypair]\n    );\n\n    return [vrfLiteAccount, vrfLiteInitTxn];\n  }\n\n  public static async create(\n    program: SwitchboardProgram,\n    params: VrfLiteInitParams & { queueAccount: QueueAccount }\n  ): Promise<[VrfLiteAccount, TransactionSignature]> {\n    const [account, transaction] = await VrfLiteAccount.createInstruction(\n      program,\n      program.walletPubkey,\n      params\n    );\n    const txnSignature = await program.signAndSend(transaction);\n    return [account, txnSignature];\n  }\n\n  public async depositInstructions(\n    payer: PublicKey,\n    params: VrfLiteDepositParams\n  ): Promise<TransactionObject> {\n    const userTokenAddress =\n      params.tokenWallet ??\n      this.program.mint.getAssociatedAddress(\n        params.tokenAuthority?.publicKey ?? payer\n      );\n    const transferTxn = new TransactionObject(\n      payer,\n      [\n        createTransferInstruction(\n          userTokenAddress,\n          this.program.mint.getAssociatedAddress(this.publicKey),\n          params.tokenAuthority?.publicKey ?? payer,\n          this.program.mint.toTokenAmount(params.amount)\n        ),\n      ],\n      params.tokenAuthority ? [params.tokenAuthority] : []\n    );\n    return transferTxn;\n  }\n\n  public async deposit(\n    params: VrfLiteDepositParams\n  ): Promise<TransactionSignature> {\n    const transaction = await this.depositInstructions(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(transaction);\n    return txnSignature;\n  }\n\n  public proveAndVerifyInstructions(\n    params: VrfLiteProveAndVerifyParams,\n    options?: TransactionObjectOptions,\n    numTxns = 40\n  ): Array<TransactionObject> {\n    const remainingAccounts = params.vrfLite.callback.accounts.slice(\n      0,\n      params.vrfLite.callback.accountsLen\n    );\n\n    const txns = Array.from(Array(numTxns).keys()).map(i => {\n      const proveIxn = types.vrfLiteProveAndVerify(\n        this.program,\n        {\n          params: {\n            nonce: i,\n            proof: new Uint8Array(),\n            proofEncoded: params.proof,\n            counter: params.counter ?? params.vrfLite.counter,\n          },\n        },\n        {\n          vrfLite: this.publicKey,\n          callbackPid: params.vrfLite.callback.programId,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          escrow: params.vrfLite.escrow,\n          programState: this.program.programState.publicKey,\n          oracle: params.oraclePubkey,\n          oracleAuthority: params.oracleAuthority,\n          oracleWallet: params.oracleTokenWallet,\n          instructionsSysvar: SYSVAR_INSTRUCTIONS_PUBKEY,\n        }\n      );\n      proveIxn.keys = proveIxn.keys.concat(remainingAccounts);\n\n      return new TransactionObject(this.program.walletPubkey, [proveIxn], [], {\n        computeUnitLimit: 1_400_000, // allow user to override\n        ...options,\n      });\n    });\n\n    return txns;\n  }\n\n  public async proveAndVerify(\n    params: Partial<VrfLiteProveAndVerifyParams> & { skipPreflight?: boolean },\n    options?: TransactionObjectOptions,\n    numTxns = 40\n  ): Promise<Array<TransactionSignature>> {\n    const vrfLite = params.vrfLite ?? (await this.loadData());\n    const oraclePubkey = params.oraclePubkey ?? vrfLite.builder.producer;\n\n    let oracleTokenWallet = params.oracleTokenWallet;\n    let oracleAuthority = params.oracleAuthority;\n    if (!oracleTokenWallet || !oracleAuthority) {\n      const oracleAccount = new OracleAccount(this.program, oraclePubkey);\n      const oracle = await oracleAccount.loadData();\n      oracleTokenWallet = oracle.tokenAccount;\n      oracleAuthority = oracle.oracleAuthority;\n    }\n\n    const txns = this.proveAndVerifyInstructions(\n      {\n        vrfLite,\n        proof: params.proof ?? '',\n        oraclePubkey,\n        oracleTokenWallet,\n        oracleAuthority,\n      },\n      options,\n      numTxns\n    );\n\n    const txnSignatures = await this.program.signAndSendAll(txns, {\n      skipPreflight: params.skipPreflight ?? true,\n    });\n\n    return txnSignatures;\n  }\n\n  public async awaitRandomness(\n    params: { requestSlot: BN },\n    timeout = 30000\n  ): Promise<types.VrfLiteAccountData> {\n    let ws: number | undefined = undefined;\n\n    const closeWebsocket = async () => {\n      if (ws !== undefined) {\n        await this.program.connection.removeAccountChangeListener(ws).catch();\n        ws = undefined;\n      }\n    };\n\n    // const vrfLite = await this.loadData();\n    // if (vrfLite.requestSlot.gt(params.requestSlot)) {\n    //   throw new Error(`VRF request expired`);\n    // }\n\n    const statePromise: Promise<types.VrfLiteAccountData> = promiseWithTimeout(\n      timeout,\n      new Promise(\n        (\n          resolve: (result: types.VrfLiteAccountData) => void,\n          reject: (reason: string) => void\n        ) => {\n          ws = this.onChange(vrfLite => {\n            if (vrfLite.requestSlot.gt(params.requestSlot)) {\n              reject(`VRF request expired`);\n            }\n\n            if (\n              vrfLite.status.kind ===\n                types.VrfStatus.StatusCallbackSuccess.kind ||\n              vrfLite.status.kind === types.VrfStatus.StatusVerified.kind\n            ) {\n              resolve(vrfLite);\n            }\n            if (\n              vrfLite.status.kind === types.VrfStatus.StatusVerifyFailure.kind\n            ) {\n              reject(\n                `Vrf failed to verify with status ${vrfLite.status.kind} (${vrfLite.status.discriminator})`\n              );\n            }\n          });\n        }\n      )\n    ).finally(async () => {\n      await closeWebsocket();\n    });\n\n    const state = await statePromise;\n    // .catch(async e => {\n    //   await closeWebsocket();\n    //   throw e;\n    // })\n    // .finally(async () => {\n    //   await closeWebsocket();\n    // });\n\n    await closeWebsocket();\n\n    return state;\n  }\n\n  async closeAccountInstruction(\n    payer: PublicKey,\n    params?: VrfLiteCloseParams\n  ): Promise<TransactionObject> {\n    const vrfLite = await this.loadData();\n    const queueAccount =\n      params?.queueAccount ?? new QueueAccount(this.program, vrfLite.queue);\n    const queueAuthority =\n      params?.queueAuthority ?? (await queueAccount.loadData()).authority;\n    const [permissionAccount] = this.getPermissionAccount(\n      queueAccount.publicKey,\n      queueAuthority\n    );\n    const [escrowDest, escrowInit] =\n      await this.program.mint.getOrCreateWrappedUserInstructions(payer, {\n        fundUpTo: 0,\n      });\n    const vrfLiteClose = new TransactionObject(\n      payer,\n      [\n        vrfLiteCloseAction(\n          this.program,\n          { params: {} },\n          {\n            vrfLite: this.publicKey,\n            permission: permissionAccount.publicKey,\n            authority: vrfLite.authority,\n            queue: queueAccount.publicKey,\n            queueAuthority,\n            programState: this.program.programState.publicKey,\n            escrow: vrfLite.escrow,\n            solDest: params?.destination ?? payer,\n            escrowDest: escrowDest,\n            tokenProgram: TOKEN_PROGRAM_ID,\n          }\n        ),\n      ],\n      params?.authority ? [params.authority] : []\n    );\n\n    if (escrowInit) {\n      return escrowInit.combine(vrfLiteClose);\n    }\n\n    return vrfLiteClose;\n  }\n\n  async closeAccount(\n    params?: VrfLiteCloseParams\n  ): Promise<TransactionSignature> {\n    const transaction = await this.closeAccountInstruction(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(transaction, {\n      skipPreflight: true,\n    });\n    return txnSignature;\n  }\n\n  public getPermissionAccount(\n    queuePubkey: PublicKey,\n    queueAuthority: PublicKey\n  ): [PermissionAccount, number] {\n    return PermissionAccount.fromSeed(\n      this.program,\n      queueAuthority,\n      queuePubkey,\n      this.publicKey\n    );\n  }\n\n  public getEscrow(): PublicKey {\n    return this.program.mint.getAssociatedAddress(this.publicKey);\n  }\n}\n"]}
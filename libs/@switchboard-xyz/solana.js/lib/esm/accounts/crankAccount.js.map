{"version":3,"file":"crankAccount.js","sourceRoot":"","sources":["../../../src/accounts/crankAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import * as errors from '../errors';\nimport * as types from '../generated';\nimport { SwitchboardProgram } from '../SwitchboardProgram';\nimport {\n  TransactionObject,\n  TransactionObjectOptions,\n} from '../TransactionObject';\n\nimport { Account, OnAccountChangeCallback } from './account';\nimport { AggregatorAccount, AggregatorPdaAccounts } from './aggregatorAccount';\nimport { CrankDataBuffer } from './crankDataBuffer';\nimport { QueueAccount } from './queueAccount';\n\nimport * as anchor from '@coral-xyz/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token-v2';\nimport {\n  AccountMeta,\n  Commitment,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  TransactionSignature,\n} from '@solana/web3.js';\n\n/**\n * Account holding a priority queue of aggregators and their next available update time. This is a scheduling mechanism to ensure {@linkcode AggregatorAccount}'s are updated as close as possible to their specified update interval.\n *\n * Data: {@linkcode types.CrankAccountData}\n *\n * Buffer: {@linkcode CrankDataBuffer}\n */\nexport class CrankAccount extends Account<types.CrankAccountData> {\n  static accountName = 'CrankAccountData';\n\n  /** The public key of the crank's data buffer storing a priority queue of {@linkcode AggregatorAccount}'s and their next available update timestamp */\n  dataBuffer?: CrankDataBuffer;\n\n  /**\n   * Get the size of an {@linkcode CrankAccount} on-chain.\n   */\n  public size = this.program.account.crankAccountData.size;\n\n  /**\n   * Return a crank account initialized to the default values.\n   */\n  public static default(): types.CrankAccountData {\n    const buffer = Buffer.alloc(432, 0);\n    types.CrankAccountData.discriminator.copy(buffer, 0);\n    return types.CrankAccountData.decode(buffer);\n  }\n\n  /**\n   * Invoke a callback each time a CrankAccount's data has changed on-chain.\n   * @param callback - the callback invoked when the cranks state changes\n   * @param commitment - optional, the desired transaction finality. defaults to 'confirmed'\n   * @returns the websocket subscription id\n   */\n  onChange(\n    callback: OnAccountChangeCallback<types.CrankAccountData>,\n    commitment: Commitment = 'confirmed'\n  ): number {\n    return this.program.connection.onAccountChange(\n      this.publicKey,\n      accountInfo => callback(types.CrankAccountData.decode(accountInfo.data)),\n      commitment\n    );\n  }\n\n  /** Load an existing CrankAccount with its current on-chain state */\n  public static async load(\n    program: SwitchboardProgram,\n    publicKey: PublicKey | string\n  ): Promise<[CrankAccount, types.CrankAccountData]> {\n    const account = new CrankAccount(\n      program,\n      typeof publicKey === 'string' ? new PublicKey(publicKey) : publicKey\n    );\n    const state = await account.loadData();\n    return [account, state];\n  }\n\n  /**\n   * Retrieve and decode the {@linkcode types.CrankAccountData} stored in this account.\n   */\n  public async loadData(): Promise<types.CrankAccountData> {\n    const data = await types.CrankAccountData.fetch(\n      this.program,\n      this.publicKey\n    );\n    if (data === null)\n      throw new errors.AccountNotFoundError('Crank', this.publicKey);\n    if (!this.dataBuffer) {\n      this.dataBuffer = CrankDataBuffer.fromCrank(this.program, data);\n    }\n\n    return data;\n  }\n\n  public static async createInstructions(\n    program: SwitchboardProgram,\n    payer: PublicKey,\n    params: CrankInitParams\n  ): Promise<[CrankAccount, TransactionObject]> {\n    const keypair = params.keypair ?? Keypair.generate();\n    program.verifyNewKeypair(keypair);\n\n    const buffer = params.dataBufferKeypair ?? anchor.web3.Keypair.generate();\n    program.verifyNewKeypair(buffer);\n\n    const maxRows = params.maxRows ?? 500;\n    const crankSize = CrankDataBuffer.getAccountSize(maxRows);\n\n    const crankInit = new TransactionObject(\n      payer,\n      [\n        SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: buffer.publicKey,\n          space: crankSize,\n          lamports: await program.connection.getMinimumBalanceForRentExemption(\n            crankSize\n          ),\n          programId: program.programId,\n        }),\n        types.crankInit(\n          program,\n          {\n            params: {\n              name: Buffer.from(params.name ?? '').slice(0, 32),\n              metadata: Buffer.from(params.metadata ?? '').slice(0, 64),\n              crankSize: maxRows,\n            },\n          },\n          {\n            crank: keypair.publicKey,\n            queue: params.queueAccount.publicKey,\n            buffer: buffer.publicKey,\n            systemProgram: SystemProgram.programId,\n            payer: payer,\n          }\n        ),\n      ],\n      [keypair, buffer]\n    );\n\n    const crankAccount = new CrankAccount(program, keypair.publicKey);\n    crankAccount.dataBuffer = new CrankDataBuffer(program, buffer.publicKey);\n\n    return [crankAccount, crankInit];\n  }\n\n  public static async create(\n    program: SwitchboardProgram,\n    params: CrankInitParams\n  ): Promise<[CrankAccount, TransactionSignature]> {\n    const [crankAccount, crankInit] = await CrankAccount.createInstructions(\n      program,\n      program.walletPubkey,\n      params\n    );\n    const txnSignature = await program.signAndSend(crankInit);\n    return [crankAccount, txnSignature];\n  }\n\n  /**\n   * Pushes a new aggregator onto the crank.\n   * @param params The crank push parameters.\n   * @return TransactionSignature\n   */\n  async pushInstruction(\n    payer: PublicKey,\n    params: CrankPushParams\n  ): Promise<TransactionObject> {\n    const crankData = await this.loadData();\n    const queueAccount = new QueueAccount(this.program, crankData.queuePubkey);\n    const queue = await queueAccount.loadData();\n\n    const { permissionAccount, permissionBump, leaseAccount, leaseEscrow } =\n      params.aggregatorAccount.getAccounts(queueAccount, queue.authority);\n\n    return new TransactionObject(\n      payer,\n      [\n        types.crankPush(\n          this.program,\n          {\n            params: {\n              stateBump: this.program.programState.bump,\n              permissionBump: permissionBump,\n              notifiRef: null,\n            },\n          },\n          {\n            crank: this.publicKey,\n            aggregator: params.aggregatorAccount.publicKey,\n            oracleQueue: queueAccount.publicKey,\n            queueAuthority: queue.authority,\n            permission: permissionAccount.publicKey,\n            lease: leaseAccount.publicKey,\n            escrow: leaseEscrow,\n            programState: this.program.programState.publicKey,\n            dataBuffer:\n              this.dataBuffer?.publicKey ?? (await this.loadData()).dataBuffer,\n          }\n        ),\n      ],\n      []\n    );\n  }\n\n  pushInstructionSync(\n    payer: PublicKey,\n    params: CrankPushSyncParams\n  ): TransactionObject {\n    const queueAccount = new QueueAccount(\n      this.program,\n      params.crank.queuePubkey\n    );\n    const { permissionAccount, permissionBump, leaseAccount, leaseEscrow } =\n      params.aggregatorAccount.getAccounts(\n        queueAccount,\n        params.queue.authority\n      );\n\n    return new TransactionObject(\n      payer,\n      [\n        types.crankPush(\n          this.program,\n          {\n            params: {\n              stateBump: this.program.programState.bump,\n              permissionBump: permissionBump,\n              notifiRef: null,\n            },\n          },\n          {\n            crank: this.publicKey,\n            aggregator: params.aggregatorAccount.publicKey,\n            oracleQueue: queueAccount.publicKey,\n            queueAuthority: params.queue.authority,\n            permission: permissionAccount.publicKey,\n            lease: leaseAccount.publicKey,\n            escrow: leaseEscrow,\n            programState: this.program.programState.publicKey,\n            dataBuffer: this.dataBuffer?.publicKey ?? params.crank.dataBuffer,\n          }\n        ),\n      ],\n      []\n    );\n  }\n\n  /**\n   * Pushes a new aggregator onto the crank.\n   * @param params The crank push parameters.\n   * @return TransactionSignature\n   */\n  async push(params: CrankPushParams): Promise<TransactionSignature> {\n    const pushTxn = await this.pushInstruction(\n      this.program.walletPubkey,\n      params\n    );\n    const txnSignature = await this.program.signAndSend(pushTxn);\n    return txnSignature;\n  }\n\n  public async popInstruction(\n    payer: PublicKey,\n    params: CrankPopParams\n  ): Promise<TransactionObject> {\n    const next =\n      params.readyPubkeys ??\n      (await this.peakNextReady(5, params.unixTimestamp));\n    if (next.length === 0) throw new Error('Crank is not ready to be turned.');\n\n    const remainingAccounts: PublicKey[] = [];\n    const leaseBumpsMap: Map<string, number> = new Map();\n    const permissionBumpsMap: Map<string, number> = new Map();\n    const crankData = await this.loadData();\n    const queueAccount = new QueueAccount(this.program, crankData.queuePubkey);\n    const queueData = await queueAccount.loadData();\n\n    const toBumps = (bumpMap: Map<string, number>) =>\n      new Uint8Array(Array.from(bumpMap.values()));\n\n    for (const row of next) {\n      const aggregatorAccount = new AggregatorAccount(this.program, row);\n\n      const {\n        leaseAccount,\n        leaseBump,\n        permissionAccount,\n        permissionBump,\n        leaseEscrow,\n      } = aggregatorAccount.getAccounts(queueAccount, queueData.authority);\n\n      remainingAccounts.push(aggregatorAccount.publicKey);\n      remainingAccounts.push(leaseAccount.publicKey);\n      remainingAccounts.push(leaseEscrow);\n      remainingAccounts.push(permissionAccount.publicKey);\n\n      leaseBumpsMap.set(row.toBase58(), leaseBump);\n      permissionBumpsMap.set(row.toBase58(), permissionBump);\n    }\n\n    remainingAccounts.sort((a: PublicKey, b: PublicKey) =>\n      a.toBuffer().compare(b.toBuffer())\n    );\n\n    const payoutWallet =\n      params?.payoutWallet ?? this.program.mint.getAssociatedAddress(payer);\n\n    const crankPopIxn = types.crankPop(\n      this.program,\n      {\n        params: {\n          stateBump: this.program.programState.bump,\n          leaseBumps: toBumps(leaseBumpsMap),\n          permissionBumps: toBumps(permissionBumpsMap),\n          nonce: params.nonce ?? null,\n          failOpenOnAccountMismatch: false,\n        },\n      },\n      {\n        crank: this.publicKey,\n        oracleQueue: queueAccount.publicKey,\n        queueAuthority: queueData.authority,\n        programState: this.program.programState.publicKey,\n        payoutWallet: payoutWallet,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        crankDataBuffer: crankData.dataBuffer,\n        queueDataBuffer: queueData.dataBuffer,\n        mint: this.program.mint.address,\n      }\n    );\n    crankPopIxn.keys.push(\n      ...remainingAccounts.map((pubkey): AccountMeta => {\n        return { isSigner: false, isWritable: true, pubkey };\n      })\n    );\n\n    const txnObject: TransactionObject = new TransactionObject(\n      payer,\n      [crankPopIxn],\n      []\n    );\n    return txnObject;\n  }\n\n  public async pop(params: CrankPopParams): Promise<TransactionSignature> {\n    const popTxn = await this.popInstruction(this.program.walletPubkey, params);\n    const txnSignature = await this.program.signAndSend(popTxn);\n    return txnSignature;\n  }\n\n  private getPopTxn(\n    payer: PublicKey,\n    params: {\n      payoutTokenWallet: PublicKey;\n\n      queuePubkey: PublicKey;\n      queueAuthority: PublicKey;\n      queueDataBuffer: PublicKey;\n      crankDataBuffer: PublicKey;\n\n      remainingAccounts: Array<PublicKey>;\n      leaseBumps: Map<string, number>;\n      permissionBumps: Map<string, number>;\n\n      nonce?: number;\n      failOpenOnMismatch?: boolean;\n    },\n    options?: TransactionObjectOptions\n  ) {\n    const remainingAccounts = params.remainingAccounts.sort(\n      (a: PublicKey, b: PublicKey) => a.toBuffer().compare(b.toBuffer())\n    );\n\n    const leaseBumps: Array<number> = [];\n    const permissionBumps: Array<number> = [];\n    for (const remainingAccount of remainingAccounts) {\n      leaseBumps.push(params.leaseBumps.get(remainingAccount.toBase58()) ?? 0);\n      permissionBumps.push(\n        params.permissionBumps.get(remainingAccount.toBase58()) ?? 0\n      );\n    }\n\n    const crankPopIxn = types.crankPop(\n      this.program,\n      {\n        params: {\n          stateBump: this.program.programState.bump,\n          leaseBumps: new Uint8Array(leaseBumps),\n          permissionBumps: new Uint8Array(permissionBumps),\n          nonce: params.nonce ?? null,\n          failOpenOnAccountMismatch: params.failOpenOnMismatch ?? false,\n        },\n      },\n      {\n        crank: this.publicKey,\n        oracleQueue: params.queuePubkey,\n        queueAuthority: params.queueAuthority,\n        programState: this.program.programState.publicKey,\n        payoutWallet: params.payoutTokenWallet,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        crankDataBuffer: params.crankDataBuffer,\n        queueDataBuffer: params.queueDataBuffer,\n        mint: this.program.mint.address,\n      }\n    );\n\n    crankPopIxn.keys.push(\n      ...remainingAccounts.map((pubkey): AccountMeta => {\n        return { isSigner: false, isWritable: true, pubkey };\n      })\n    );\n\n    return new TransactionObject(payer, [crankPopIxn], [], options);\n  }\n\n  public popSync(\n    payer: PublicKey,\n    params: {\n      payoutTokenWallet: PublicKey;\n\n      queuePubkey: PublicKey;\n      queueAuthority: PublicKey;\n      queueDataBuffer: PublicKey;\n      crankDataBuffer: PublicKey;\n\n      readyAggregators: Array<[AggregatorAccount, AggregatorPdaAccounts]>;\n\n      nonce?: number;\n      failOpenOnMismatch?: boolean;\n      popIdx?: number;\n    },\n    options?: TransactionObjectOptions\n  ): TransactionObject {\n    if (params.readyAggregators.length < 1) {\n      throw new Error(`No aggregators ready`);\n    }\n\n    let remainingAccounts: PublicKey[] = [];\n    let txn: TransactionObject | undefined = undefined;\n\n    const allLeaseBumps = params.readyAggregators.reduce(\n      (map, [aggregatorAccount, pdaAccounts]) => {\n        map.set(aggregatorAccount.publicKey.toBase58(), pdaAccounts.leaseBump);\n        return map;\n      },\n      new Map<string, number>()\n    );\n    const allPermissionBumps = params.readyAggregators.reduce(\n      (map, [aggregatorAccount, pdaAccounts]) => {\n        map.set(\n          aggregatorAccount.publicKey.toBase58(),\n          pdaAccounts.permissionBump\n        );\n        return map;\n      },\n      new Map<string, number>()\n    );\n\n    // add as many readyAggregators until the txn overflows\n    for (const [\n      readyAggregator,\n      aggregatorPdaAccounts,\n    ] of params.readyAggregators) {\n      const { leaseAccount, leaseEscrow, permissionAccount } =\n        aggregatorPdaAccounts;\n\n      const newRemainingAccounts = [\n        ...remainingAccounts,\n        readyAggregator.publicKey,\n        leaseAccount.publicKey,\n        leaseEscrow,\n        permissionAccount.publicKey,\n      ];\n\n      try {\n        const newTxn = this.getPopTxn(\n          payer,\n          {\n            ...params,\n            remainingAccounts: newRemainingAccounts,\n            leaseBumps: allLeaseBumps,\n            permissionBumps: allPermissionBumps,\n          },\n          options\n        );\n        // succeeded, so set running txn and remaining accounts and try again\n        txn = newTxn;\n        remainingAccounts = newRemainingAccounts;\n      } catch (error) {\n        if (error instanceof errors.TransactionOverflowError) {\n          if (txn === undefined) {\n            throw new Error(`Failed to create crank pop transaction, ${error}`);\n          }\n          return txn;\n        }\n        throw error;\n      }\n    }\n\n    if (txn === undefined) {\n      throw new Error(`Failed to create crank pop transaction`);\n    }\n\n    return txn;\n  }\n\n  public packAndPopInstructions(\n    payer: PublicKey,\n    params: {\n      payoutTokenWallet: PublicKey;\n\n      queuePubkey: PublicKey;\n      queueAuthority: PublicKey;\n      queueDataBuffer: PublicKey;\n      crankDataBuffer: PublicKey;\n\n      readyAggregators: Array<[AggregatorAccount, AggregatorPdaAccounts]>;\n\n      nonce?: number;\n      failOpenOnMismatch?: boolean;\n\n      priorityFeeMultiplier?: number;\n    },\n    options?: TransactionObjectOptions\n  ): Array<TransactionObject> {\n    const numReady = params.readyAggregators.length;\n\n    // stagger priority fees so feeds are procssed in order of staleness\n    const getTxnOptions = (\n      index: number\n    ): TransactionObjectOptions | undefined => {\n      return params.priorityFeeMultiplier && params.priorityFeeMultiplier > 0\n        ? {\n            ...options,\n            computeUnitPrice:\n              (options?.computeUnitPrice ?? 1) +\n              (numReady - index) * params.priorityFeeMultiplier,\n          }\n        : options;\n    };\n\n    if (numReady < 6) {\n      // send as-is\n      return Array.from(Array(numReady).keys()).map(n => {\n        return this.popSync(\n          payer,\n          {\n            ...params,\n            readyAggregators: params.readyAggregators,\n            nonce: Math.random(),\n          },\n          getTxnOptions(n)\n        );\n      });\n    } else {\n      // stagger the ready accounts\n      return Array.from(Array(numReady).keys()).map(n => {\n        return this.popSync(\n          payer,\n          {\n            ...params,\n            readyAggregators: params.readyAggregators.slice(Math.max(0, n - 4)),\n            nonce: Math.random(),\n          },\n          getTxnOptions(n)\n        );\n      });\n    }\n  }\n\n  public async packAndPop(\n    params: {\n      payoutTokenWallet: PublicKey;\n\n      queuePubkey: PublicKey;\n      queueAuthority: PublicKey;\n      queueDataBuffer: PublicKey;\n      crankDataBuffer: PublicKey;\n\n      readyAggregators: Array<[AggregatorAccount, AggregatorPdaAccounts]>;\n\n      nonce?: number;\n      failOpenOnMismatch?: boolean;\n    },\n    options?: TransactionObjectOptions\n  ): Promise<Array<TransactionSignature>> {\n    const popTxns = this.packAndPopInstructions(\n      this.program.walletPubkey,\n      params,\n      options\n    );\n    const txnSignatures = await this.program.signAndSendAll(\n      popTxns,\n      {\n        skipPreflight: true,\n        skipConfrimation: true,\n      },\n      undefined,\n      10 // 10ms delay between txns to help ordering\n    );\n    return txnSignatures;\n  }\n\n  private getPopTxnV2(\n    payer: PublicKey,\n    params: {\n      payoutTokenWallet: PublicKey;\n\n      queuePubkey: PublicKey;\n      queueAuthority: PublicKey;\n      queueDataBuffer: PublicKey;\n      crankDataBuffer: PublicKey;\n\n      remainingAccounts: Array<PublicKey>;\n      leaseBumps: Map<string, number>;\n      permissionBumps: Map<string, number>;\n\n      idx: number;\n      nonce?: number;\n      failOpenOnMismatch?: boolean;\n    },\n    options?: TransactionObjectOptions\n  ) {\n    const remainingAccounts = params.remainingAccounts.sort(\n      (a: PublicKey, b: PublicKey) => a.toBuffer().compare(b.toBuffer())\n    );\n\n    const leaseBumps: Array<number> = [];\n    const permissionBumps: Array<number> = [];\n    for (const remainingAccount of remainingAccounts) {\n      leaseBumps.push(params.leaseBumps.get(remainingAccount.toBase58()) ?? 0);\n      permissionBumps.push(\n        params.permissionBumps.get(remainingAccount.toBase58()) ?? 0\n      );\n    }\n\n    const crankPopIxn = types.crankPopV2(\n      this.program,\n      {\n        params: {\n          stateBump: this.program.programState.bump,\n          leaseBumps: new Uint8Array(leaseBumps),\n          permissionBumps: new Uint8Array(permissionBumps),\n          nonce: params.nonce ?? null,\n          failOpenOnAccountMismatch: params.failOpenOnMismatch ?? false,\n          popIdx: params.idx,\n        },\n      },\n      {\n        crank: this.publicKey,\n        oracleQueue: params.queuePubkey,\n        queueAuthority: params.queueAuthority,\n        programState: this.program.programState.publicKey,\n        payoutWallet: params.payoutTokenWallet,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        crankDataBuffer: params.crankDataBuffer,\n        queueDataBuffer: params.queueDataBuffer,\n        mint: this.program.mint.address,\n      }\n    );\n\n    crankPopIxn.keys.push(\n      ...remainingAccounts.map((pubkey): AccountMeta => {\n        return { isSigner: false, isWritable: true, pubkey };\n      })\n    );\n\n    return new TransactionObject(payer, [crankPopIxn], [], options);\n  }\n\n  public popSyncV2(\n    payer: PublicKey,\n    params: {\n      payoutTokenWallet: PublicKey;\n\n      queuePubkey: PublicKey;\n      queueAuthority: PublicKey;\n      queueDataBuffer: PublicKey;\n      crankDataBuffer: PublicKey;\n\n      readyAggregators: Array<\n        [number, AggregatorAccount, AggregatorPdaAccounts]\n      >;\n\n      nonce?: number;\n      failOpenOnMismatch?: boolean;\n      popIdx?: number;\n    },\n    options?: TransactionObjectOptions\n  ): TransactionObject {\n    if (params.readyAggregators.length < 1) {\n      throw new Error(`No aggregators ready`);\n    }\n\n    let remainingAccounts: PublicKey[] = [];\n    let txn: TransactionObject | undefined = undefined;\n\n    const allLeaseBumps = params.readyAggregators.reduce(\n      (map, [idx, aggregatorAccount, pdaAccounts]) => {\n        map.set(aggregatorAccount.publicKey.toBase58(), pdaAccounts.leaseBump);\n        return map;\n      },\n      new Map<string, number>()\n    );\n    const allPermissionBumps = params.readyAggregators.reduce(\n      (map, [idx, aggregatorAccount, pdaAccounts]) => {\n        map.set(\n          aggregatorAccount.publicKey.toBase58(),\n          pdaAccounts.permissionBump\n        );\n        return map;\n      },\n      new Map<string, number>()\n    );\n\n    // add as many readyAggregators until the txn overflows\n    for (const [\n      idx,\n      readyAggregator,\n      aggregatorPdaAccounts,\n    ] of params.readyAggregators) {\n      const { leaseAccount, leaseEscrow, permissionAccount } =\n        aggregatorPdaAccounts;\n\n      const newRemainingAccounts = [\n        ...remainingAccounts,\n        readyAggregator.publicKey,\n        leaseAccount.publicKey,\n        leaseEscrow,\n        permissionAccount.publicKey,\n      ];\n\n      try {\n        const newTxn = this.getPopTxnV2(\n          payer,\n          {\n            ...params,\n            remainingAccounts: newRemainingAccounts,\n            leaseBumps: allLeaseBumps,\n            permissionBumps: allPermissionBumps,\n            idx,\n          },\n          options\n        );\n        // succeeded, so set running txn and remaining accounts and try again\n        txn = newTxn;\n        remainingAccounts = newRemainingAccounts;\n      } catch (error) {\n        if (error instanceof errors.TransactionOverflowError) {\n          if (txn === undefined) {\n            throw new Error(`Failed to create crank pop transaction, ${error}`);\n          }\n          return txn;\n        }\n        throw error;\n      }\n    }\n\n    if (txn === undefined) {\n      throw new Error(`Failed to create crank pop transaction`);\n    }\n\n    return txn;\n  }\n\n  public packAndPopInstructionsV2(\n    payer: PublicKey,\n    params: {\n      payoutTokenWallet: PublicKey;\n\n      queuePubkey: PublicKey;\n      queueAuthority: PublicKey;\n      queueDataBuffer: PublicKey;\n      crankDataBuffer: PublicKey;\n\n      readyAggregators: Array<\n        [number, AggregatorAccount, AggregatorPdaAccounts]\n      >;\n\n      nonce?: number;\n      failOpenOnMismatch?: boolean;\n    },\n    options?: TransactionObjectOptions\n  ): Array<TransactionObject> {\n    if (params.readyAggregators.length < 6) {\n      // send as-is\n      return Array.from(Array(params.readyAggregators.length).keys()).map(\n        () => {\n          return this.popSyncV2(\n            payer,\n            {\n              ...params,\n              readyAggregators: params.readyAggregators,\n              nonce: Math.random(),\n            },\n            options\n          );\n        }\n      );\n    } else {\n      // stagger the ready accounts\n      return Array.from(Array(params.readyAggregators.length).keys()).map(n => {\n        return this.popSyncV2(\n          payer,\n          {\n            ...params,\n            readyAggregators: params.readyAggregators.slice(Math.max(0, n - 4)),\n            nonce: Math.random(),\n          },\n          options\n        );\n      });\n    }\n  }\n\n  /**\n   * Get an array of the next aggregator pubkeys to be popped from the crank, limited by n\n   * @param num The limit of pubkeys to return.\n   * @return List of {@linkcode types.CrankRow}, ordered by timestamp.\n   */\n  async peakNextWithTime(num?: number): Promise<types.CrankRow[]> {\n    const crankRows = await this.loadCrank();\n    return crankRows.slice(0, num ?? crankRows.length);\n  }\n\n  /**\n   * Get an array of the next readily updateable aggregator pubkeys to be popped\n   * from the crank, limited by n\n   * @param num The limit of pubkeys to return.\n   * @return Pubkey list of Aggregator pubkeys.\n   */\n  async peakNextReady(\n    num?: number,\n    unixTimestamp?: number\n  ): Promise<PublicKey[]> {\n    const now = unixTimestamp ?? Math.floor(Date.now() / 1000);\n    const crankRows = await this.peakNextWithTime(num);\n    return crankRows\n      .filter(row => now >= row.nextTimestamp.toNumber())\n      .map(row => row.pubkey);\n  }\n\n  /**\n   * Get an array of the next aggregator pubkeys to be popped from the crank, limited by n\n   * @param num The limit of pubkeys to return.\n   * @return Pubkey list of Aggregators next up to be popped.\n   */\n  async peakNext(num?: number): Promise<PublicKey[]> {\n    const crankRows = await this.peakNextWithTime(num);\n    return crankRows.map(row => row.pubkey);\n  }\n\n  /**\n   * Load a cranks {@linkcode CrankDataBuffer}.\n   * @return the list of aggregtors and their next available update time.\n   */\n  async loadCrank(sorted = true): Promise<Array<types.CrankRow>> {\n    if (!this.dataBuffer) {\n      this.dataBuffer = new CrankDataBuffer(\n        this.program,\n        (await this.loadData()).dataBuffer\n      );\n    }\n\n    const crankRows = await this.dataBuffer.loadData();\n    if (sorted) {\n      return CrankDataBuffer.sort(crankRows);\n    }\n\n    return crankRows;\n  }\n\n  getCrankAccounts(\n    crankRows: Array<types.CrankRow>,\n    queueAccount: QueueAccount,\n    queueAuthority: PublicKey\n  ): Map<string, AggregatorPdaAccounts> {\n    const crankAccounts: Map<string, AggregatorPdaAccounts> = new Map();\n    for (const row of crankRows) {\n      const aggregatorAccount = new AggregatorAccount(this.program, row.pubkey);\n      const accounts = aggregatorAccount.getAccounts(\n        queueAccount,\n        queueAuthority\n      );\n      crankAccounts.set(aggregatorAccount.publicKey.toBase58(), accounts);\n    }\n    return crankAccounts;\n  }\n\n  /** Whether an aggregator pubkey is active on a Crank */\n  async isOnCrank(\n    pubkey: PublicKey,\n    crankRows?: Array<types.CrankRow>\n  ): Promise<boolean> {\n    const rows = crankRows ?? (await this.loadCrank());\n\n    const idx = rows.findIndex(r => r.pubkey.equals(pubkey));\n    if (idx === -1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  public async fetchAccounts(\n    _crank?: types.CrankAccountData,\n    _queueAccount?: QueueAccount,\n    _queue?: types.OracleQueueAccountData\n  ): Promise<CrankAccounts> {\n    const crank = _crank ?? (await this.loadData());\n    const queueAccount =\n      _queueAccount ?? new QueueAccount(this.program, crank.queuePubkey);\n    const queue = _queue ?? (await queueAccount.loadData());\n\n    const crankRows = await this.loadCrank();\n\n    const aggregatorPubkeys = crankRows.map(r => r.pubkey);\n    const aggregators = await AggregatorAccount.fetchMultiple(\n      this.program,\n      aggregatorPubkeys\n    );\n\n    return {\n      crank: {\n        publicKey: this.publicKey,\n        data: crank,\n      },\n      queue: {\n        publicKey: queueAccount.publicKey,\n        data: queue,\n      },\n      dataBuffer: {\n        publicKey: crank.dataBuffer,\n        data: crankRows,\n      },\n      aggregators: aggregators.map(a => {\n        return {\n          publicKey: a.account.publicKey,\n          data: a.data,\n        };\n      }),\n    };\n  }\n\n  public async toAccountsJSON(\n    _crank?: types.CrankAccountData,\n    _crankRows?: Array<types.CrankRow>\n  ): Promise<CrankAccountsJSON> {\n    const crank = _crank ?? (await this.loadData());\n    const crankRows = _crankRows ?? (await this.loadCrank());\n\n    return {\n      publicKey: this.publicKey,\n      ...crank.toJSON(),\n      dataBuffer: {\n        publicKey: crank.dataBuffer,\n        data: crankRows,\n      },\n    };\n  }\n}\n\n/**\n * Parameters for initializing a CrankAccount\n */\nexport interface CrankInitParams {\n  /**\n   *  OracleQueueAccount for which this crank is associated\n   */\n  queueAccount: QueueAccount;\n  /**\n   *  String specifying crank name\n   */\n  name?: string;\n  /**\n   *  String specifying crank metadata\n   */\n  metadata?: String;\n  /**\n   * Optional max number of rows\n   */\n  maxRows?: number;\n  /**\n   * Optional\n   */\n  keypair?: Keypair;\n  /**\n   * Optional\n   */\n  dataBufferKeypair?: Keypair;\n}\n\n/**\n * Parameters for pushing an element into a CrankAccount.\n */\nexport interface CrankPushParams {\n  /**\n   * Specifies the aggregator to push onto the crank.\n   */\n  aggregatorAccount: AggregatorAccount;\n\n  crank?: types.CrankAccountData;\n\n  queue?: types.OracleQueueAccountData;\n\n  queueAuthority?: PublicKey;\n}\n\n/**\n * Parameters for pushing an element into a CrankAccount.\n */\nexport interface CrankPushSyncParams {\n  /**\n   * Specifies the aggregator to push onto the crank.\n   */\n  aggregatorAccount: AggregatorAccount;\n  crank: types.CrankAccountData;\n  queue: types.OracleQueueAccountData;\n}\n\n/**\n * Parameters for popping an element from a CrankAccount.\n */\nexport interface CrankPopParams {\n  /**\n   * Specifies the wallet to reward for turning the crank.\n   *\n   * Defaults to the payer.\n   */\n  payoutWallet?: PublicKey;\n  /**\n   * Array of pubkeys to attempt to pop. If discluded, this will be loaded\n   * from the crank upon calling.\n   */\n  readyPubkeys?: PublicKey[];\n  /**\n   * Nonce to allow consecutive crank pops with the same blockhash.\n   */\n  nonce?: number;\n  failOpenOnMismatch?: boolean;\n  popIdx?: number;\n  /**\n   * Unix timestamp to use to determine readyPubkeys (if not provided)\n   */\n  unixTimestamp?: number;\n}\n\nexport type CrankAccountsJSON = Omit<\n  types.CrankAccountDataJSON,\n  'dataBuffer'\n> & {\n  publicKey: PublicKey;\n  dataBuffer: { publicKey: PublicKey; data: Array<types.CrankRow> };\n};\n\nexport type CrankAccounts = {\n  crank: {\n    publicKey: PublicKey;\n    data: types.CrankAccountData;\n  };\n  queue: {\n    publicKey: PublicKey;\n    data: types.OracleQueueAccountData;\n  };\n  dataBuffer: {\n    publicKey: PublicKey;\n    data: Array<types.CrankRow>;\n  };\n  aggregators: Array<{\n    publicKey: PublicKey;\n    data: types.AggregatorAccountData;\n  }>;\n};\n"]}
{"version":3,"file":"jobSetData.js","sourceRoot":"","sources":["../../../../src/generated/instructions/jobSetData.ts"],"names":[],"mappings":"AACA,OAAO,EACL,sBAAsB,GAGvB,MAAM,iBAAiB,CAAC,CAAC,wDAAwD;AAElF,OAAO,KAAK,KAAK,MAAM,kBAAkB,CAAC,CAAC,wDAAwD;AACnG,OAAO,KAAK,KAAK,MAAM,UAAU,CAAC,CAAC,wDAAwD;AAW3F,MAAM,CAAC,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAE9E,MAAM,UAAU,UAAU,CACxB,OAA2B,EAC3B,IAAoB,EACpB,QAA4B;IAE5B,MAAM,IAAI,GAAuB;QAC/B,EAAE,MAAM,EAAE,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE;QAC3D,EAAE,MAAM,EAAE,QAAQ,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE;KAClE,CAAC;IACF,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IACvE,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAClC,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CACvB;QACE,MAAM,EAAE,KAAK,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC;KACxD,EACD,MAAM,CACP,CAAC;IACF,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC;IACnE,MAAM,EAAE,GAAG,IAAI,sBAAsB,CAAC;QACpC,IAAI;QACJ,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,IAAI;KACL,CAAC,CAAC;IACH,OAAO,EAAE,CAAC;AACZ,CAAC","sourcesContent":["import { SwitchboardProgram } from '../../SwitchboardProgram';\nimport {\n  TransactionInstruction,\n  PublicKey,\n  AccountMeta,\n} from '@solana/web3.js'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport { BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as borsh from '@coral-xyz/borsh'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface JobSetDataArgs {\n  params: types.JobSetDataParamsFields;\n}\n\nexport interface JobSetDataAccounts {\n  job: PublicKey;\n  authority: PublicKey;\n}\n\nexport const layout = borsh.struct([types.JobSetDataParams.layout('params')]);\n\nexport function jobSetData(\n  program: SwitchboardProgram,\n  args: JobSetDataArgs,\n  accounts: JobSetDataAccounts\n) {\n  const keys: Array<AccountMeta> = [\n    { pubkey: accounts.job, isSigner: false, isWritable: true },\n    { pubkey: accounts.authority, isSigner: true, isWritable: false },\n  ];\n  const identifier = Buffer.from([225, 207, 69, 27, 161, 171, 223, 104]);\n  const buffer = Buffer.alloc(1000);\n  const len = layout.encode(\n    {\n      params: types.JobSetDataParams.toEncodable(args.params),\n    },\n    buffer\n  );\n  const data = Buffer.concat([identifier, buffer]).slice(0, 8 + len);\n  const ix = new TransactionInstruction({\n    keys,\n    programId: program.programId,\n    data,\n  });\n  return ix;\n}\n"]}
{"version":3,"file":"SbState.js","sourceRoot":"","sources":["../../../../src/generated/accounts/SbState.ts"],"names":[],"mappings":"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","sourcesContent":["import { SwitchboardProgram } from '../../SwitchboardProgram';\nimport { PublicKey, Connection } from '@solana/web3.js';\nimport { BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as borsh from '@coral-xyz/borsh'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface SbStateFields {\n  /** The account authority permitted to make account changes. */\n  authority: PublicKey;\n  /** The token mint used for oracle rewards, aggregator leases, and other reward incentives. */\n  tokenMint: PublicKey;\n  /** Token vault used by the program to receive kickbacks. */\n  tokenVault: PublicKey;\n  /** The token mint used by the DAO. */\n  daoMint: PublicKey;\n  /** The PDA bump to derive the pubkey. */\n  bump: number;\n  /** Reserved for future info. */\n  ebuf: Array<number>;\n}\n\nexport interface SbStateJSON {\n  /** The account authority permitted to make account changes. */\n  authority: string;\n  /** The token mint used for oracle rewards, aggregator leases, and other reward incentives. */\n  tokenMint: string;\n  /** Token vault used by the program to receive kickbacks. */\n  tokenVault: string;\n  /** The token mint used by the DAO. */\n  daoMint: string;\n  /** The PDA bump to derive the pubkey. */\n  bump: number;\n  /** Reserved for future info. */\n  ebuf: Array<number>;\n}\n\nexport class SbState {\n  /** The account authority permitted to make account changes. */\n  readonly authority: PublicKey;\n  /** The token mint used for oracle rewards, aggregator leases, and other reward incentives. */\n  readonly tokenMint: PublicKey;\n  /** Token vault used by the program to receive kickbacks. */\n  readonly tokenVault: PublicKey;\n  /** The token mint used by the DAO. */\n  readonly daoMint: PublicKey;\n  /** The PDA bump to derive the pubkey. */\n  readonly bump: number;\n  /** Reserved for future info. */\n  readonly ebuf: Array<number>;\n\n  static readonly discriminator = Buffer.from([\n    159, 42, 192, 191, 139, 62, 168, 28,\n  ]);\n\n  static readonly layout = borsh.struct([\n    borsh.publicKey('authority'),\n    borsh.publicKey('tokenMint'),\n    borsh.publicKey('tokenVault'),\n    borsh.publicKey('daoMint'),\n    borsh.u8('bump'),\n    borsh.array(borsh.u8(), 991, 'ebuf'),\n  ]);\n\n  constructor(fields: SbStateFields) {\n    this.authority = fields.authority;\n    this.tokenMint = fields.tokenMint;\n    this.tokenVault = fields.tokenVault;\n    this.daoMint = fields.daoMint;\n    this.bump = fields.bump;\n    this.ebuf = fields.ebuf;\n  }\n\n  static async fetch(\n    program: SwitchboardProgram,\n    address: PublicKey\n  ): Promise<SbState | null> {\n    const info = await program.connection.getAccountInfo(address);\n\n    if (info === null) {\n      return null;\n    }\n    if (!info.owner.equals(program.programId)) {\n      throw new Error(\"account doesn't belong to this program\");\n    }\n\n    return this.decode(info.data);\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    addresses: PublicKey[]\n  ): Promise<Array<SbState | null>> {\n    const infos = await program.connection.getMultipleAccountsInfo(addresses);\n\n    return infos.map(info => {\n      if (info === null) {\n        return null;\n      }\n      if (!info.owner.equals(program.programId)) {\n        throw new Error(\"account doesn't belong to this program\");\n      }\n\n      return this.decode(info.data);\n    });\n  }\n\n  static decode(data: Buffer): SbState {\n    if (!data.slice(0, 8).equals(SbState.discriminator)) {\n      throw new Error('invalid account discriminator');\n    }\n\n    const dec = SbState.layout.decode(data.slice(8));\n\n    return new SbState({\n      authority: dec.authority,\n      tokenMint: dec.tokenMint,\n      tokenVault: dec.tokenVault,\n      daoMint: dec.daoMint,\n      bump: dec.bump,\n      ebuf: dec.ebuf,\n    });\n  }\n\n  toJSON(): SbStateJSON {\n    return {\n      authority: this.authority.toString(),\n      tokenMint: this.tokenMint.toString(),\n      tokenVault: this.tokenVault.toString(),\n      daoMint: this.daoMint.toString(),\n      bump: this.bump,\n      ebuf: this.ebuf,\n    };\n  }\n\n  static fromJSON(obj: SbStateJSON): SbState {\n    return new SbState({\n      authority: new PublicKey(obj.authority),\n      tokenMint: new PublicKey(obj.tokenMint),\n      tokenVault: new PublicKey(obj.tokenVault),\n      daoMint: new PublicKey(obj.daoMint),\n      bump: obj.bump,\n      ebuf: obj.ebuf,\n    });\n  }\n}\n"]}
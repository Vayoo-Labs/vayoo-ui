{"version":3,"file":"VrfLiteAccountData.js","sourceRoot":"","sources":["../../../../src/generated/accounts/VrfLiteAccountData.ts"],"names":[],"mappings":"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","sourcesContent":["import { SwitchboardProgram } from '../../SwitchboardProgram';\nimport { PublicKey, Connection } from '@solana/web3.js';\nimport { BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as borsh from '@coral-xyz/borsh'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface VrfLiteAccountDataFields {\n  /** The bump used to derive the SbState account. */\n  stateBump: number;\n  /** The bump used to derive the permission account. */\n  permissionBump: number;\n  /** The VrfPool the account belongs to. */\n  vrfPool: PublicKey;\n  /** The current status of the VRF account. */\n  status: types.VrfStatusKind;\n  /** The VRF round result. Will be zeroized if still awaiting fulfillment. */\n  result: Array<number>;\n  /** Incremental counter for tracking VRF rounds. */\n  counter: BN;\n  /** The alpha bytes used to calculate the VRF proof. */\n  alpha: Array<number>;\n  /** The number of bytes in the alpha buffer. */\n  alphaLen: number;\n  /** The Slot when the VRF round was opened. */\n  requestSlot: BN;\n  /** The unix timestamp when the VRF round was opened. */\n  requestTimestamp: BN;\n  /** On-chain account delegated for making account changes. */\n  authority: PublicKey;\n  /** The OracleQueueAccountData that is assigned to fulfill VRF update request. */\n  queue: PublicKey;\n  /** The token account used to hold funds for VRF update request. */\n  escrow: PublicKey;\n  /** The callback that is invoked when an update request is successfully verified. */\n  callback: types.CallbackZCFields;\n  /** The incremental VRF proof calculation. */\n  builder: types.VrfBuilderFields;\n  expiration: BN;\n  ebuf: Array<number>;\n}\n\nexport interface VrfLiteAccountDataJSON {\n  /** The bump used to derive the SbState account. */\n  stateBump: number;\n  /** The bump used to derive the permission account. */\n  permissionBump: number;\n  /** The VrfPool the account belongs to. */\n  vrfPool: string;\n  /** The current status of the VRF account. */\n  status: types.VrfStatusJSON;\n  /** The VRF round result. Will be zeroized if still awaiting fulfillment. */\n  result: Array<number>;\n  /** Incremental counter for tracking VRF rounds. */\n  counter: string;\n  /** The alpha bytes used to calculate the VRF proof. */\n  alpha: Array<number>;\n  /** The number of bytes in the alpha buffer. */\n  alphaLen: number;\n  /** The Slot when the VRF round was opened. */\n  requestSlot: string;\n  /** The unix timestamp when the VRF round was opened. */\n  requestTimestamp: string;\n  /** On-chain account delegated for making account changes. */\n  authority: string;\n  /** The OracleQueueAccountData that is assigned to fulfill VRF update request. */\n  queue: string;\n  /** The token account used to hold funds for VRF update request. */\n  escrow: string;\n  /** The callback that is invoked when an update request is successfully verified. */\n  callback: types.CallbackZCJSON;\n  /** The incremental VRF proof calculation. */\n  builder: types.VrfBuilderJSON;\n  expiration: string;\n  ebuf: Array<number>;\n}\n\nexport class VrfLiteAccountData {\n  /** The bump used to derive the SbState account. */\n  readonly stateBump: number;\n  /** The bump used to derive the permission account. */\n  readonly permissionBump: number;\n  /** The VrfPool the account belongs to. */\n  readonly vrfPool: PublicKey;\n  /** The current status of the VRF account. */\n  readonly status: types.VrfStatusKind;\n  /** The VRF round result. Will be zeroized if still awaiting fulfillment. */\n  readonly result: Array<number>;\n  /** Incremental counter for tracking VRF rounds. */\n  readonly counter: BN;\n  /** The alpha bytes used to calculate the VRF proof. */\n  readonly alpha: Array<number>;\n  /** The number of bytes in the alpha buffer. */\n  readonly alphaLen: number;\n  /** The Slot when the VRF round was opened. */\n  readonly requestSlot: BN;\n  /** The unix timestamp when the VRF round was opened. */\n  readonly requestTimestamp: BN;\n  /** On-chain account delegated for making account changes. */\n  readonly authority: PublicKey;\n  /** The OracleQueueAccountData that is assigned to fulfill VRF update request. */\n  readonly queue: PublicKey;\n  /** The token account used to hold funds for VRF update request. */\n  readonly escrow: PublicKey;\n  /** The callback that is invoked when an update request is successfully verified. */\n  readonly callback: types.CallbackZC;\n  /** The incremental VRF proof calculation. */\n  readonly builder: types.VrfBuilder;\n  readonly expiration: BN;\n  readonly ebuf: Array<number>;\n\n  static readonly discriminator = Buffer.from([\n    98, 127, 126, 124, 166, 81, 97, 100,\n  ]);\n\n  static readonly layout = borsh.struct([\n    borsh.u8('stateBump'),\n    borsh.u8('permissionBump'),\n    borsh.publicKey('vrfPool'),\n    types.VrfStatus.layout('status'),\n    borsh.array(borsh.u8(), 32, 'result'),\n    borsh.u128('counter'),\n    borsh.array(borsh.u8(), 256, 'alpha'),\n    borsh.u32('alphaLen'),\n    borsh.u64('requestSlot'),\n    borsh.i64('requestTimestamp'),\n    borsh.publicKey('authority'),\n    borsh.publicKey('queue'),\n    borsh.publicKey('escrow'),\n    types.CallbackZC.layout('callback'),\n    types.VrfBuilder.layout('builder'),\n    borsh.i64('expiration'),\n    borsh.array(borsh.u8(), 1024, 'ebuf'),\n  ]);\n\n  constructor(fields: VrfLiteAccountDataFields) {\n    this.stateBump = fields.stateBump;\n    this.permissionBump = fields.permissionBump;\n    this.vrfPool = fields.vrfPool;\n    this.status = fields.status;\n    this.result = fields.result;\n    this.counter = fields.counter;\n    this.alpha = fields.alpha;\n    this.alphaLen = fields.alphaLen;\n    this.requestSlot = fields.requestSlot;\n    this.requestTimestamp = fields.requestTimestamp;\n    this.authority = fields.authority;\n    this.queue = fields.queue;\n    this.escrow = fields.escrow;\n    this.callback = new types.CallbackZC({ ...fields.callback });\n    this.builder = new types.VrfBuilder({ ...fields.builder });\n    this.expiration = fields.expiration;\n    this.ebuf = fields.ebuf;\n  }\n\n  static async fetch(\n    program: SwitchboardProgram,\n    address: PublicKey\n  ): Promise<VrfLiteAccountData | null> {\n    const info = await program.connection.getAccountInfo(address);\n\n    if (info === null) {\n      return null;\n    }\n    if (!info.owner.equals(program.programId)) {\n      throw new Error(\"account doesn't belong to this program\");\n    }\n\n    return this.decode(info.data);\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    addresses: PublicKey[]\n  ): Promise<Array<VrfLiteAccountData | null>> {\n    const infos = await program.connection.getMultipleAccountsInfo(addresses);\n\n    return infos.map(info => {\n      if (info === null) {\n        return null;\n      }\n      if (!info.owner.equals(program.programId)) {\n        throw new Error(\"account doesn't belong to this program\");\n      }\n\n      return this.decode(info.data);\n    });\n  }\n\n  static decode(data: Buffer): VrfLiteAccountData {\n    if (!data.slice(0, 8).equals(VrfLiteAccountData.discriminator)) {\n      throw new Error('invalid account discriminator');\n    }\n\n    const dec = VrfLiteAccountData.layout.decode(data.slice(8));\n\n    return new VrfLiteAccountData({\n      stateBump: dec.stateBump,\n      permissionBump: dec.permissionBump,\n      vrfPool: dec.vrfPool,\n      status: types.VrfStatus.fromDecoded(dec.status),\n      result: dec.result,\n      counter: dec.counter,\n      alpha: dec.alpha,\n      alphaLen: dec.alphaLen,\n      requestSlot: dec.requestSlot,\n      requestTimestamp: dec.requestTimestamp,\n      authority: dec.authority,\n      queue: dec.queue,\n      escrow: dec.escrow,\n      callback: types.CallbackZC.fromDecoded(dec.callback),\n      builder: types.VrfBuilder.fromDecoded(dec.builder),\n      expiration: dec.expiration,\n      ebuf: dec.ebuf,\n    });\n  }\n\n  toJSON(): VrfLiteAccountDataJSON {\n    return {\n      stateBump: this.stateBump,\n      permissionBump: this.permissionBump,\n      vrfPool: this.vrfPool.toString(),\n      status: this.status.toJSON(),\n      result: this.result,\n      counter: this.counter.toString(),\n      alpha: this.alpha,\n      alphaLen: this.alphaLen,\n      requestSlot: this.requestSlot.toString(),\n      requestTimestamp: this.requestTimestamp.toString(),\n      authority: this.authority.toString(),\n      queue: this.queue.toString(),\n      escrow: this.escrow.toString(),\n      callback: this.callback.toJSON(),\n      builder: this.builder.toJSON(),\n      expiration: this.expiration.toString(),\n      ebuf: this.ebuf,\n    };\n  }\n\n  static fromJSON(obj: VrfLiteAccountDataJSON): VrfLiteAccountData {\n    return new VrfLiteAccountData({\n      stateBump: obj.stateBump,\n      permissionBump: obj.permissionBump,\n      vrfPool: new PublicKey(obj.vrfPool),\n      status: types.VrfStatus.fromJSON(obj.status),\n      result: obj.result,\n      counter: new BN(obj.counter),\n      alpha: obj.alpha,\n      alphaLen: obj.alphaLen,\n      requestSlot: new BN(obj.requestSlot),\n      requestTimestamp: new BN(obj.requestTimestamp),\n      authority: new PublicKey(obj.authority),\n      queue: new PublicKey(obj.queue),\n      escrow: new PublicKey(obj.escrow),\n      callback: types.CallbackZC.fromJSON(obj.callback),\n      builder: types.VrfBuilder.fromJSON(obj.builder),\n      expiration: new BN(obj.expiration),\n      ebuf: obj.ebuf,\n    });\n  }\n}\n"]}
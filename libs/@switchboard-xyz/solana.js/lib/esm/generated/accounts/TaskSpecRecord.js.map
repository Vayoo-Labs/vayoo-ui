{"version":3,"file":"TaskSpecRecord.js","sourceRoot":"","sources":["../../../../src/generated/accounts/TaskSpecRecord.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,KAAK,MAAM,kBAAkB,CAAC,CAAC,wDAAwD;AACnG,OAAO,KAAK,KAAK,MAAM,UAAU,CAAC,CAAC,wDAAwD;AAU3F,MAAM,OAAO,cAAc;IASzB,YAAY,MAA4B;QACtC,IAAI,CAAC,IAAI,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;IACjD,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAChB,OAA2B,EAC3B,OAAkB;QAElB,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAE9D,IAAI,IAAI,KAAK,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC;SACb;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YACzC,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;SAC3D;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,aAAa,CACxB,OAA2B,EAC3B,SAAsB;QAEtB,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;QAE1E,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACtB,IAAI,IAAI,KAAK,IAAI,EAAE;gBACjB,OAAO,IAAI,CAAC;aACb;YACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBACzC,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;aAC3D;YAED,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,IAAY;QACxB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE;YAC1D,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAClD;QAED,MAAM,GAAG,GAAG,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAExD,OAAO,IAAI,cAAc,CAAC;YACxB,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC;SACvC,CAAC,CAAC;IACL,CAAC;IAED,MAAM;QACJ,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;SACzB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,GAAuB;QACrC,OAAO,IAAI,cAAc,CAAC;YACxB,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC;SACpC,CAAC,CAAC;IACL,CAAC;;AAlEe,4BAAa,GAAG,MAAM,CAAC,IAAI,CAAC;IAC1C,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE;CACpC,CAAC,CAAC;AAEa,qBAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC","sourcesContent":["import { SwitchboardProgram } from '../../SwitchboardProgram';\nimport { PublicKey, Connection } from '@solana/web3.js';\nimport { BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as borsh from '@coral-xyz/borsh'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface TaskSpecRecordFields {\n  hash: types.HashFields;\n}\n\nexport interface TaskSpecRecordJSON {\n  hash: types.HashJSON;\n}\n\nexport class TaskSpecRecord {\n  readonly hash: types.Hash;\n\n  static readonly discriminator = Buffer.from([\n    202, 10, 194, 236, 111, 47, 234, 48,\n  ]);\n\n  static readonly layout = borsh.struct([types.Hash.layout('hash')]);\n\n  constructor(fields: TaskSpecRecordFields) {\n    this.hash = new types.Hash({ ...fields.hash });\n  }\n\n  static async fetch(\n    program: SwitchboardProgram,\n    address: PublicKey\n  ): Promise<TaskSpecRecord | null> {\n    const info = await program.connection.getAccountInfo(address);\n\n    if (info === null) {\n      return null;\n    }\n    if (!info.owner.equals(program.programId)) {\n      throw new Error(\"account doesn't belong to this program\");\n    }\n\n    return this.decode(info.data);\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    addresses: PublicKey[]\n  ): Promise<Array<TaskSpecRecord | null>> {\n    const infos = await program.connection.getMultipleAccountsInfo(addresses);\n\n    return infos.map(info => {\n      if (info === null) {\n        return null;\n      }\n      if (!info.owner.equals(program.programId)) {\n        throw new Error(\"account doesn't belong to this program\");\n      }\n\n      return this.decode(info.data);\n    });\n  }\n\n  static decode(data: Buffer): TaskSpecRecord {\n    if (!data.slice(0, 8).equals(TaskSpecRecord.discriminator)) {\n      throw new Error('invalid account discriminator');\n    }\n\n    const dec = TaskSpecRecord.layout.decode(data.slice(8));\n\n    return new TaskSpecRecord({\n      hash: types.Hash.fromDecoded(dec.hash),\n    });\n  }\n\n  toJSON(): TaskSpecRecordJSON {\n    return {\n      hash: this.hash.toJSON(),\n    };\n  }\n\n  static fromJSON(obj: TaskSpecRecordJSON): TaskSpecRecord {\n    return new TaskSpecRecord({\n      hash: types.Hash.fromJSON(obj.hash),\n    });\n  }\n}\n"]}
{"version":3,"file":"OracleQueueAccountData.js","sourceRoot":"","sources":["../../../../src/generated/accounts/OracleQueueAccountData.ts"],"names":[],"mappings":"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","sourcesContent":["import { SwitchboardProgram } from '../../SwitchboardProgram';\nimport { PublicKey, Connection } from '@solana/web3.js';\nimport { BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as borsh from '@coral-xyz/borsh'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface OracleQueueAccountDataFields {\n  /** Name of the queue to store on-chain. */\n  name: Array<number>;\n  /** Metadata of the queue to store on-chain. */\n  metadata: Array<number>;\n  /** The account delegated as the authority for making account changes or assigning permissions targeted at the queue. */\n  authority: PublicKey;\n  /** Interval when stale oracles will be removed if they fail to heartbeat. */\n  oracleTimeout: number;\n  /** Rewards to provide oracles and round openers on this queue. */\n  reward: BN;\n  /** The minimum amount of stake oracles must present to remain on the queue. */\n  minStake: BN;\n  /** Whether slashing is enabled on this queue. */\n  slashingEnabled: boolean;\n  /**\n   * The tolerated variance amount oracle results can have from the accepted round result before being slashed.\n   * slashBound = varianceToleranceMultiplier * stdDeviation Default: 2\n   */\n  varianceToleranceMultiplier: types.SwitchboardDecimalFields;\n  /**\n   * Number of update rounds new feeds are on probation for.\n   * If a feed returns 429s within probation period, auto disable permissions.\n   */\n  feedProbationPeriod: number;\n  /** Current index of the oracle rotation. */\n  currIdx: number;\n  /** Current number of oracles on a queue. */\n  size: number;\n  /** Garbage collection index. */\n  gcIdx: number;\n  /** Consecutive failure limit for a feed before feed permission is revoked. */\n  consecutiveFeedFailureLimit: BN;\n  /** Consecutive failure limit for an oracle before oracle permission is revoked. */\n  consecutiveOracleFailureLimit: BN;\n  /** Enabling this setting means data feeds do not need explicit permission to join the queue and request new values from its oracles. */\n  unpermissionedFeedsEnabled: boolean;\n  /** Enabling this setting means VRF accounts do not need explicit permission to join the queue and request new values from its oracles. */\n  unpermissionedVrfEnabled: boolean;\n  /** TODO: Revenue percentage rewarded to job curators overall. */\n  curatorRewardCut: types.SwitchboardDecimalFields;\n  /**\n   * Prevent new leases from being funded n this queue.\n   * Useful to turn down a queue for migrations, since authority is always immutable.\n   */\n  lockLeaseFunding: boolean;\n  /** Token mint used for the oracle queue rewards and slashing. */\n  mint: PublicKey;\n  /** Whether oracles are permitted to fulfill buffer relayer update request. */\n  enableBufferRelayers: boolean;\n  /** Reserved for future info. */\n  ebuf: Array<number>;\n  /** Maximum number of oracles a queue can support. */\n  maxSize: number;\n  /** The public key of the OracleQueueBuffer account holding a collection of Oracle pubkeys that haver successfully heartbeated before the queues `oracleTimeout`. */\n  dataBuffer: PublicKey;\n}\n\nexport interface OracleQueueAccountDataJSON {\n  /** Name of the queue to store on-chain. */\n  name: Array<number>;\n  /** Metadata of the queue to store on-chain. */\n  metadata: Array<number>;\n  /** The account delegated as the authority for making account changes or assigning permissions targeted at the queue. */\n  authority: string;\n  /** Interval when stale oracles will be removed if they fail to heartbeat. */\n  oracleTimeout: number;\n  /** Rewards to provide oracles and round openers on this queue. */\n  reward: string;\n  /** The minimum amount of stake oracles must present to remain on the queue. */\n  minStake: string;\n  /** Whether slashing is enabled on this queue. */\n  slashingEnabled: boolean;\n  /**\n   * The tolerated variance amount oracle results can have from the accepted round result before being slashed.\n   * slashBound = varianceToleranceMultiplier * stdDeviation Default: 2\n   */\n  varianceToleranceMultiplier: types.SwitchboardDecimalJSON;\n  /**\n   * Number of update rounds new feeds are on probation for.\n   * If a feed returns 429s within probation period, auto disable permissions.\n   */\n  feedProbationPeriod: number;\n  /** Current index of the oracle rotation. */\n  currIdx: number;\n  /** Current number of oracles on a queue. */\n  size: number;\n  /** Garbage collection index. */\n  gcIdx: number;\n  /** Consecutive failure limit for a feed before feed permission is revoked. */\n  consecutiveFeedFailureLimit: string;\n  /** Consecutive failure limit for an oracle before oracle permission is revoked. */\n  consecutiveOracleFailureLimit: string;\n  /** Enabling this setting means data feeds do not need explicit permission to join the queue and request new values from its oracles. */\n  unpermissionedFeedsEnabled: boolean;\n  /** Enabling this setting means VRF accounts do not need explicit permission to join the queue and request new values from its oracles. */\n  unpermissionedVrfEnabled: boolean;\n  /** TODO: Revenue percentage rewarded to job curators overall. */\n  curatorRewardCut: types.SwitchboardDecimalJSON;\n  /**\n   * Prevent new leases from being funded n this queue.\n   * Useful to turn down a queue for migrations, since authority is always immutable.\n   */\n  lockLeaseFunding: boolean;\n  /** Token mint used for the oracle queue rewards and slashing. */\n  mint: string;\n  /** Whether oracles are permitted to fulfill buffer relayer update request. */\n  enableBufferRelayers: boolean;\n  /** Reserved for future info. */\n  ebuf: Array<number>;\n  /** Maximum number of oracles a queue can support. */\n  maxSize: number;\n  /** The public key of the OracleQueueBuffer account holding a collection of Oracle pubkeys that haver successfully heartbeated before the queues `oracleTimeout`. */\n  dataBuffer: string;\n}\n\nexport class OracleQueueAccountData {\n  /** Name of the queue to store on-chain. */\n  readonly name: Array<number>;\n  /** Metadata of the queue to store on-chain. */\n  readonly metadata: Array<number>;\n  /** The account delegated as the authority for making account changes or assigning permissions targeted at the queue. */\n  readonly authority: PublicKey;\n  /** Interval when stale oracles will be removed if they fail to heartbeat. */\n  readonly oracleTimeout: number;\n  /** Rewards to provide oracles and round openers on this queue. */\n  readonly reward: BN;\n  /** The minimum amount of stake oracles must present to remain on the queue. */\n  readonly minStake: BN;\n  /** Whether slashing is enabled on this queue. */\n  readonly slashingEnabled: boolean;\n  /**\n   * The tolerated variance amount oracle results can have from the accepted round result before being slashed.\n   * slashBound = varianceToleranceMultiplier * stdDeviation Default: 2\n   */\n  readonly varianceToleranceMultiplier: types.SwitchboardDecimal;\n  /**\n   * Number of update rounds new feeds are on probation for.\n   * If a feed returns 429s within probation period, auto disable permissions.\n   */\n  readonly feedProbationPeriod: number;\n  /** Current index of the oracle rotation. */\n  readonly currIdx: number;\n  /** Current number of oracles on a queue. */\n  readonly size: number;\n  /** Garbage collection index. */\n  readonly gcIdx: number;\n  /** Consecutive failure limit for a feed before feed permission is revoked. */\n  readonly consecutiveFeedFailureLimit: BN;\n  /** Consecutive failure limit for an oracle before oracle permission is revoked. */\n  readonly consecutiveOracleFailureLimit: BN;\n  /** Enabling this setting means data feeds do not need explicit permission to join the queue and request new values from its oracles. */\n  readonly unpermissionedFeedsEnabled: boolean;\n  /** Enabling this setting means VRF accounts do not need explicit permission to join the queue and request new values from its oracles. */\n  readonly unpermissionedVrfEnabled: boolean;\n  /** TODO: Revenue percentage rewarded to job curators overall. */\n  readonly curatorRewardCut: types.SwitchboardDecimal;\n  /**\n   * Prevent new leases from being funded n this queue.\n   * Useful to turn down a queue for migrations, since authority is always immutable.\n   */\n  readonly lockLeaseFunding: boolean;\n  /** Token mint used for the oracle queue rewards and slashing. */\n  readonly mint: PublicKey;\n  /** Whether oracles are permitted to fulfill buffer relayer update request. */\n  readonly enableBufferRelayers: boolean;\n  /** Reserved for future info. */\n  readonly ebuf: Array<number>;\n  /** Maximum number of oracles a queue can support. */\n  readonly maxSize: number;\n  /** The public key of the OracleQueueBuffer account holding a collection of Oracle pubkeys that haver successfully heartbeated before the queues `oracleTimeout`. */\n  readonly dataBuffer: PublicKey;\n\n  static readonly discriminator = Buffer.from([\n    164, 207, 200, 51, 199, 113, 35, 109,\n  ]);\n\n  static readonly layout = borsh.struct([\n    borsh.array(borsh.u8(), 32, 'name'),\n    borsh.array(borsh.u8(), 64, 'metadata'),\n    borsh.publicKey('authority'),\n    borsh.u32('oracleTimeout'),\n    borsh.u64('reward'),\n    borsh.u64('minStake'),\n    borsh.bool('slashingEnabled'),\n    types.SwitchboardDecimal.layout('varianceToleranceMultiplier'),\n    borsh.u32('feedProbationPeriod'),\n    borsh.u32('currIdx'),\n    borsh.u32('size'),\n    borsh.u32('gcIdx'),\n    borsh.u64('consecutiveFeedFailureLimit'),\n    borsh.u64('consecutiveOracleFailureLimit'),\n    borsh.bool('unpermissionedFeedsEnabled'),\n    borsh.bool('unpermissionedVrfEnabled'),\n    types.SwitchboardDecimal.layout('curatorRewardCut'),\n    borsh.bool('lockLeaseFunding'),\n    borsh.publicKey('mint'),\n    borsh.bool('enableBufferRelayers'),\n    borsh.array(borsh.u8(), 968, 'ebuf'),\n    borsh.u32('maxSize'),\n    borsh.publicKey('dataBuffer'),\n  ]);\n\n  constructor(fields: OracleQueueAccountDataFields) {\n    this.name = fields.name;\n    this.metadata = fields.metadata;\n    this.authority = fields.authority;\n    this.oracleTimeout = fields.oracleTimeout;\n    this.reward = fields.reward;\n    this.minStake = fields.minStake;\n    this.slashingEnabled = fields.slashingEnabled;\n    this.varianceToleranceMultiplier = new types.SwitchboardDecimal({\n      ...fields.varianceToleranceMultiplier,\n    });\n    this.feedProbationPeriod = fields.feedProbationPeriod;\n    this.currIdx = fields.currIdx;\n    this.size = fields.size;\n    this.gcIdx = fields.gcIdx;\n    this.consecutiveFeedFailureLimit = fields.consecutiveFeedFailureLimit;\n    this.consecutiveOracleFailureLimit = fields.consecutiveOracleFailureLimit;\n    this.unpermissionedFeedsEnabled = fields.unpermissionedFeedsEnabled;\n    this.unpermissionedVrfEnabled = fields.unpermissionedVrfEnabled;\n    this.curatorRewardCut = new types.SwitchboardDecimal({\n      ...fields.curatorRewardCut,\n    });\n    this.lockLeaseFunding = fields.lockLeaseFunding;\n    this.mint = fields.mint;\n    this.enableBufferRelayers = fields.enableBufferRelayers;\n    this.ebuf = fields.ebuf;\n    this.maxSize = fields.maxSize;\n    this.dataBuffer = fields.dataBuffer;\n  }\n\n  static async fetch(\n    program: SwitchboardProgram,\n    address: PublicKey\n  ): Promise<OracleQueueAccountData | null> {\n    const info = await program.connection.getAccountInfo(address);\n\n    if (info === null) {\n      return null;\n    }\n    if (!info.owner.equals(program.programId)) {\n      throw new Error(\"account doesn't belong to this program\");\n    }\n\n    return this.decode(info.data);\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    addresses: PublicKey[]\n  ): Promise<Array<OracleQueueAccountData | null>> {\n    const infos = await program.connection.getMultipleAccountsInfo(addresses);\n\n    return infos.map(info => {\n      if (info === null) {\n        return null;\n      }\n      if (!info.owner.equals(program.programId)) {\n        throw new Error(\"account doesn't belong to this program\");\n      }\n\n      return this.decode(info.data);\n    });\n  }\n\n  static decode(data: Buffer): OracleQueueAccountData {\n    if (!data.slice(0, 8).equals(OracleQueueAccountData.discriminator)) {\n      throw new Error('invalid account discriminator');\n    }\n\n    const dec = OracleQueueAccountData.layout.decode(data.slice(8));\n\n    return new OracleQueueAccountData({\n      name: dec.name,\n      metadata: dec.metadata,\n      authority: dec.authority,\n      oracleTimeout: dec.oracleTimeout,\n      reward: dec.reward,\n      minStake: dec.minStake,\n      slashingEnabled: dec.slashingEnabled,\n      varianceToleranceMultiplier: types.SwitchboardDecimal.fromDecoded(\n        dec.varianceToleranceMultiplier\n      ),\n      feedProbationPeriod: dec.feedProbationPeriod,\n      currIdx: dec.currIdx,\n      size: dec.size,\n      gcIdx: dec.gcIdx,\n      consecutiveFeedFailureLimit: dec.consecutiveFeedFailureLimit,\n      consecutiveOracleFailureLimit: dec.consecutiveOracleFailureLimit,\n      unpermissionedFeedsEnabled: dec.unpermissionedFeedsEnabled,\n      unpermissionedVrfEnabled: dec.unpermissionedVrfEnabled,\n      curatorRewardCut: types.SwitchboardDecimal.fromDecoded(\n        dec.curatorRewardCut\n      ),\n      lockLeaseFunding: dec.lockLeaseFunding,\n      mint: dec.mint,\n      enableBufferRelayers: dec.enableBufferRelayers,\n      ebuf: dec.ebuf,\n      maxSize: dec.maxSize,\n      dataBuffer: dec.dataBuffer,\n    });\n  }\n\n  toJSON(): OracleQueueAccountDataJSON {\n    return {\n      name: this.name,\n      metadata: this.metadata,\n      authority: this.authority.toString(),\n      oracleTimeout: this.oracleTimeout,\n      reward: this.reward.toString(),\n      minStake: this.minStake.toString(),\n      slashingEnabled: this.slashingEnabled,\n      varianceToleranceMultiplier: this.varianceToleranceMultiplier.toJSON(),\n      feedProbationPeriod: this.feedProbationPeriod,\n      currIdx: this.currIdx,\n      size: this.size,\n      gcIdx: this.gcIdx,\n      consecutiveFeedFailureLimit: this.consecutiveFeedFailureLimit.toString(),\n      consecutiveOracleFailureLimit:\n        this.consecutiveOracleFailureLimit.toString(),\n      unpermissionedFeedsEnabled: this.unpermissionedFeedsEnabled,\n      unpermissionedVrfEnabled: this.unpermissionedVrfEnabled,\n      curatorRewardCut: this.curatorRewardCut.toJSON(),\n      lockLeaseFunding: this.lockLeaseFunding,\n      mint: this.mint.toString(),\n      enableBufferRelayers: this.enableBufferRelayers,\n      ebuf: this.ebuf,\n      maxSize: this.maxSize,\n      dataBuffer: this.dataBuffer.toString(),\n    };\n  }\n\n  static fromJSON(obj: OracleQueueAccountDataJSON): OracleQueueAccountData {\n    return new OracleQueueAccountData({\n      name: obj.name,\n      metadata: obj.metadata,\n      authority: new PublicKey(obj.authority),\n      oracleTimeout: obj.oracleTimeout,\n      reward: new BN(obj.reward),\n      minStake: new BN(obj.minStake),\n      slashingEnabled: obj.slashingEnabled,\n      varianceToleranceMultiplier: types.SwitchboardDecimal.fromJSON(\n        obj.varianceToleranceMultiplier\n      ),\n      feedProbationPeriod: obj.feedProbationPeriod,\n      currIdx: obj.currIdx,\n      size: obj.size,\n      gcIdx: obj.gcIdx,\n      consecutiveFeedFailureLimit: new BN(obj.consecutiveFeedFailureLimit),\n      consecutiveOracleFailureLimit: new BN(obj.consecutiveOracleFailureLimit),\n      unpermissionedFeedsEnabled: obj.unpermissionedFeedsEnabled,\n      unpermissionedVrfEnabled: obj.unpermissionedVrfEnabled,\n      curatorRewardCut: types.SwitchboardDecimal.fromJSON(obj.curatorRewardCut),\n      lockLeaseFunding: obj.lockLeaseFunding,\n      mint: new PublicKey(obj.mint),\n      enableBufferRelayers: obj.enableBufferRelayers,\n      ebuf: obj.ebuf,\n      maxSize: obj.maxSize,\n      dataBuffer: new PublicKey(obj.dataBuffer),\n    });\n  }\n}\n"]}
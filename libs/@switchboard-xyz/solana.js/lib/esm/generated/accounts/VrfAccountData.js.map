{"version":3,"file":"VrfAccountData.js","sourceRoot":"","sources":["../../../../src/generated/accounts/VrfAccountData.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAc,MAAM,iBAAiB,CAAC;AACxD,OAAO,EAAE,EAAE,EAAE,MAAM,yBAAyB,CAAC,CAAC,wDAAwD;AACtG,OAAO,KAAK,KAAK,MAAM,kBAAkB,CAAC,CAAC,wDAAwD;AACnG,OAAO,KAAK,KAAK,MAAM,UAAU,CAAC,CAAC,wDAAwD;AAsD3F,MAAM,OAAO,cAAc;IA4CzB,YAAY,MAA4B;QACtC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAClC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC7D,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAClC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CACjC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,IAAI,EAAE,CAAC,CAC1C,CAAC;QACF,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,YAAY,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;QACnE,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAChB,OAA2B,EAC3B,OAAkB;QAElB,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAE9D,IAAI,IAAI,KAAK,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC;SACb;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YACzC,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;SAC3D;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,aAAa,CACxB,OAA2B,EAC3B,SAAsB;QAEtB,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;QAE1E,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACtB,IAAI,IAAI,KAAK,IAAI,EAAE;gBACjB,OAAO,IAAI,CAAC;aACb;YACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBACzC,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;aAC3D;YAED,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,IAAY;QACxB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE;YAC1D,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAClD;QAED,MAAM,GAAG,GAAG,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAExD,OAAO,IAAI,cAAc,CAAC;YACxB,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC;YAC/C,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,SAAS,EAAE,GAAG,CAAC,SAAS;YACxB,WAAW,EAAE,GAAG,CAAC,WAAW;YAC5B,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,QAAQ,EAAE,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC;YACpD,SAAS,EAAE,GAAG,CAAC,SAAS;YACxB,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAG,CACxB,CACE,IAAS,CAAC,4DAA4D,EACtE,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CACxC;YACD,WAAW,EAAE,GAAG,CAAC,WAAW;YAC5B,QAAQ,EAAE,GAAG,CAAC,QAAQ;YACtB,YAAY,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC;YAC1D,IAAI,EAAE,GAAG,CAAC,IAAI;SACf,CAAC,CAAC;IACL,CAAC;IAED,MAAM;QACJ,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YAC5B,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;YAChC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;YACpC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;YACxC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC9B,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YAChC,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YAClD,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;YACxC,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,GAAuB;QACrC,OAAO,IAAI,cAAc,CAAC;YACxB,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC;YAC5C,OAAO,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC;YAC5B,SAAS,EAAE,IAAI,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;YACvC,WAAW,EAAE,IAAI,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;YAC3C,MAAM,EAAE,IAAI,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC;YACjC,QAAQ,EAAE,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC;YACjD,SAAS,EAAE,GAAG,CAAC,SAAS;YACxB,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACnE,WAAW,EAAE,GAAG,CAAC,WAAW;YAC5B,QAAQ,EAAE,GAAG,CAAC,QAAQ;YACtB,YAAY,EAAE,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC;YACvD,IAAI,EAAE,GAAG,CAAC,IAAI;SACf,CAAC,CAAC;IACL,CAAC;;AAjIe,4BAAa,GAAG,MAAM,CAAC,IAAI,CAAC;IAC1C,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE;CAClC,CAAC,CAAC;AAEa,qBAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IACpC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC;IAChC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;IACrB,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC;IAC5B,KAAK,CAAC,SAAS,CAAC,aAAa,CAAC;IAC9B,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC;IACzB,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC;IACnC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC;IACtB,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,UAAU,CAAC;IACrD,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC;IACxB,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC;IACtB,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC;IACrC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC;CACtC,CAAC,CAAC","sourcesContent":["import { SwitchboardProgram } from '../../SwitchboardProgram';\nimport { PublicKey, Connection } from '@solana/web3.js';\nimport { BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as borsh from '@coral-xyz/borsh'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface VrfAccountDataFields {\n  /** The current status of the VRF account. */\n  status: types.VrfStatusKind;\n  /** Incremental counter for tracking VRF rounds. */\n  counter: BN;\n  /** On-chain account delegated for making account changes. */\n  authority: PublicKey;\n  /** The OracleQueueAccountData that is assigned to fulfill VRF update request. */\n  oracleQueue: PublicKey;\n  /** The token account used to hold funds for VRF update request. */\n  escrow: PublicKey;\n  /** The callback that is invoked when an update request is successfully verified. */\n  callback: types.CallbackZCFields;\n  /** The number of oracles assigned to a VRF update request. */\n  batchSize: number;\n  /** Struct containing the intermediate state between VRF crank actions. */\n  builders: Array<types.VrfBuilderFields>;\n  /** The number of builders. */\n  buildersLen: number;\n  testMode: boolean;\n  /** Oracle results from the current round of update request that has not been accepted as valid yet */\n  currentRound: types.VrfRoundFields;\n  /** Reserved for future info. */\n  ebuf: Array<number>;\n}\n\nexport interface VrfAccountDataJSON {\n  /** The current status of the VRF account. */\n  status: types.VrfStatusJSON;\n  /** Incremental counter for tracking VRF rounds. */\n  counter: string;\n  /** On-chain account delegated for making account changes. */\n  authority: string;\n  /** The OracleQueueAccountData that is assigned to fulfill VRF update request. */\n  oracleQueue: string;\n  /** The token account used to hold funds for VRF update request. */\n  escrow: string;\n  /** The callback that is invoked when an update request is successfully verified. */\n  callback: types.CallbackZCJSON;\n  /** The number of oracles assigned to a VRF update request. */\n  batchSize: number;\n  /** Struct containing the intermediate state between VRF crank actions. */\n  builders: Array<types.VrfBuilderJSON>;\n  /** The number of builders. */\n  buildersLen: number;\n  testMode: boolean;\n  /** Oracle results from the current round of update request that has not been accepted as valid yet */\n  currentRound: types.VrfRoundJSON;\n  /** Reserved for future info. */\n  ebuf: Array<number>;\n}\n\nexport class VrfAccountData {\n  /** The current status of the VRF account. */\n  readonly status: types.VrfStatusKind;\n  /** Incremental counter for tracking VRF rounds. */\n  readonly counter: BN;\n  /** On-chain account delegated for making account changes. */\n  readonly authority: PublicKey;\n  /** The OracleQueueAccountData that is assigned to fulfill VRF update request. */\n  readonly oracleQueue: PublicKey;\n  /** The token account used to hold funds for VRF update request. */\n  readonly escrow: PublicKey;\n  /** The callback that is invoked when an update request is successfully verified. */\n  readonly callback: types.CallbackZC;\n  /** The number of oracles assigned to a VRF update request. */\n  readonly batchSize: number;\n  /** Struct containing the intermediate state between VRF crank actions. */\n  readonly builders: Array<types.VrfBuilder>;\n  /** The number of builders. */\n  readonly buildersLen: number;\n  readonly testMode: boolean;\n  /** Oracle results from the current round of update request that has not been accepted as valid yet */\n  readonly currentRound: types.VrfRound;\n  /** Reserved for future info. */\n  readonly ebuf: Array<number>;\n\n  static readonly discriminator = Buffer.from([\n    101, 35, 62, 239, 103, 151, 6, 18,\n  ]);\n\n  static readonly layout = borsh.struct([\n    types.VrfStatus.layout('status'),\n    borsh.u128('counter'),\n    borsh.publicKey('authority'),\n    borsh.publicKey('oracleQueue'),\n    borsh.publicKey('escrow'),\n    types.CallbackZC.layout('callback'),\n    borsh.u32('batchSize'),\n    borsh.array(types.VrfBuilder.layout(), 8, 'builders'),\n    borsh.u32('buildersLen'),\n    borsh.bool('testMode'),\n    types.VrfRound.layout('currentRound'),\n    borsh.array(borsh.u8(), 1024, 'ebuf'),\n  ]);\n\n  constructor(fields: VrfAccountDataFields) {\n    this.status = fields.status;\n    this.counter = fields.counter;\n    this.authority = fields.authority;\n    this.oracleQueue = fields.oracleQueue;\n    this.escrow = fields.escrow;\n    this.callback = new types.CallbackZC({ ...fields.callback });\n    this.batchSize = fields.batchSize;\n    this.builders = fields.builders.map(\n      item => new types.VrfBuilder({ ...item })\n    );\n    this.buildersLen = fields.buildersLen;\n    this.testMode = fields.testMode;\n    this.currentRound = new types.VrfRound({ ...fields.currentRound });\n    this.ebuf = fields.ebuf;\n  }\n\n  static async fetch(\n    program: SwitchboardProgram,\n    address: PublicKey\n  ): Promise<VrfAccountData | null> {\n    const info = await program.connection.getAccountInfo(address);\n\n    if (info === null) {\n      return null;\n    }\n    if (!info.owner.equals(program.programId)) {\n      throw new Error(\"account doesn't belong to this program\");\n    }\n\n    return this.decode(info.data);\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    addresses: PublicKey[]\n  ): Promise<Array<VrfAccountData | null>> {\n    const infos = await program.connection.getMultipleAccountsInfo(addresses);\n\n    return infos.map(info => {\n      if (info === null) {\n        return null;\n      }\n      if (!info.owner.equals(program.programId)) {\n        throw new Error(\"account doesn't belong to this program\");\n      }\n\n      return this.decode(info.data);\n    });\n  }\n\n  static decode(data: Buffer): VrfAccountData {\n    if (!data.slice(0, 8).equals(VrfAccountData.discriminator)) {\n      throw new Error('invalid account discriminator');\n    }\n\n    const dec = VrfAccountData.layout.decode(data.slice(8));\n\n    return new VrfAccountData({\n      status: types.VrfStatus.fromDecoded(dec.status),\n      counter: dec.counter,\n      authority: dec.authority,\n      oracleQueue: dec.oracleQueue,\n      escrow: dec.escrow,\n      callback: types.CallbackZC.fromDecoded(dec.callback),\n      batchSize: dec.batchSize,\n      builders: dec.builders.map(\n        (\n          item: any /* eslint-disable-line @typescript-eslint/no-explicit-any */\n        ) => types.VrfBuilder.fromDecoded(item)\n      ),\n      buildersLen: dec.buildersLen,\n      testMode: dec.testMode,\n      currentRound: types.VrfRound.fromDecoded(dec.currentRound),\n      ebuf: dec.ebuf,\n    });\n  }\n\n  toJSON(): VrfAccountDataJSON {\n    return {\n      status: this.status.toJSON(),\n      counter: this.counter.toString(),\n      authority: this.authority.toString(),\n      oracleQueue: this.oracleQueue.toString(),\n      escrow: this.escrow.toString(),\n      callback: this.callback.toJSON(),\n      batchSize: this.batchSize,\n      builders: this.builders.map(item => item.toJSON()),\n      buildersLen: this.buildersLen,\n      testMode: this.testMode,\n      currentRound: this.currentRound.toJSON(),\n      ebuf: this.ebuf,\n    };\n  }\n\n  static fromJSON(obj: VrfAccountDataJSON): VrfAccountData {\n    return new VrfAccountData({\n      status: types.VrfStatus.fromJSON(obj.status),\n      counter: new BN(obj.counter),\n      authority: new PublicKey(obj.authority),\n      oracleQueue: new PublicKey(obj.oracleQueue),\n      escrow: new PublicKey(obj.escrow),\n      callback: types.CallbackZC.fromJSON(obj.callback),\n      batchSize: obj.batchSize,\n      builders: obj.builders.map(item => types.VrfBuilder.fromJSON(item)),\n      buildersLen: obj.buildersLen,\n      testMode: obj.testMode,\n      currentRound: types.VrfRound.fromJSON(obj.currentRound),\n      ebuf: obj.ebuf,\n    });\n  }\n}\n"]}
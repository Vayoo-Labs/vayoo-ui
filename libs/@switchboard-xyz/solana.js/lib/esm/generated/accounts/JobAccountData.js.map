{"version":3,"file":"JobAccountData.js","sourceRoot":"","sources":["../../../../src/generated/accounts/JobAccountData.ts"],"names":[],"mappings":"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","sourcesContent":["import { SwitchboardProgram } from '../../SwitchboardProgram';\nimport { PublicKey, Connection } from '@solana/web3.js';\nimport { BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as borsh from '@coral-xyz/borsh'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface JobAccountDataFields {\n  /** Name of the job to store on-chain. */\n  name: Array<number>;\n  /** Metadata of the job to store on-chain. */\n  metadata: Array<number>;\n  /** The account delegated as the authority for making account changes. */\n  authority: PublicKey;\n  /** Unix timestamp when the job is considered invalid */\n  expiration: BN;\n  /** Hash of the serialized data to prevent tampering. */\n  hash: Array<number>;\n  /** Serialized protobuf containing the collection of task to retrieve data off-chain. */\n  data: Uint8Array;\n  /** The number of data feeds referencing the job account.. */\n  referenceCount: number;\n  /** The token amount funded into a feed that contains this job account. */\n  totalSpent: BN;\n  /** Unix timestamp when the job was created on-chain. */\n  createdAt: BN;\n  isInitializing: number;\n}\n\nexport interface JobAccountDataJSON {\n  /** Name of the job to store on-chain. */\n  name: Array<number>;\n  /** Metadata of the job to store on-chain. */\n  metadata: Array<number>;\n  /** The account delegated as the authority for making account changes. */\n  authority: string;\n  /** Unix timestamp when the job is considered invalid */\n  expiration: string;\n  /** Hash of the serialized data to prevent tampering. */\n  hash: Array<number>;\n  /** Serialized protobuf containing the collection of task to retrieve data off-chain. */\n  data: Array<number>;\n  /** The number of data feeds referencing the job account.. */\n  referenceCount: number;\n  /** The token amount funded into a feed that contains this job account. */\n  totalSpent: string;\n  /** Unix timestamp when the job was created on-chain. */\n  createdAt: string;\n  isInitializing: number;\n}\n\nexport class JobAccountData {\n  /** Name of the job to store on-chain. */\n  readonly name: Array<number>;\n  /** Metadata of the job to store on-chain. */\n  readonly metadata: Array<number>;\n  /** The account delegated as the authority for making account changes. */\n  readonly authority: PublicKey;\n  /** Unix timestamp when the job is considered invalid */\n  readonly expiration: BN;\n  /** Hash of the serialized data to prevent tampering. */\n  readonly hash: Array<number>;\n  /** Serialized protobuf containing the collection of task to retrieve data off-chain. */\n  readonly data: Uint8Array;\n  /** The number of data feeds referencing the job account.. */\n  readonly referenceCount: number;\n  /** The token amount funded into a feed that contains this job account. */\n  readonly totalSpent: BN;\n  /** Unix timestamp when the job was created on-chain. */\n  readonly createdAt: BN;\n  readonly isInitializing: number;\n\n  static readonly discriminator = Buffer.from([\n    124, 69, 101, 195, 229, 218, 144, 63,\n  ]);\n\n  static readonly layout = borsh.struct([\n    borsh.array(borsh.u8(), 32, 'name'),\n    borsh.array(borsh.u8(), 64, 'metadata'),\n    borsh.publicKey('authority'),\n    borsh.i64('expiration'),\n    borsh.array(borsh.u8(), 32, 'hash'),\n    borsh.vecU8('data'),\n    borsh.u32('referenceCount'),\n    borsh.u64('totalSpent'),\n    borsh.i64('createdAt'),\n    borsh.u8('isInitializing'),\n  ]);\n\n  constructor(fields: JobAccountDataFields) {\n    this.name = fields.name;\n    this.metadata = fields.metadata;\n    this.authority = fields.authority;\n    this.expiration = fields.expiration;\n    this.hash = fields.hash;\n    this.data = fields.data;\n    this.referenceCount = fields.referenceCount;\n    this.totalSpent = fields.totalSpent;\n    this.createdAt = fields.createdAt;\n    this.isInitializing = fields.isInitializing;\n  }\n\n  static async fetch(\n    program: SwitchboardProgram,\n    address: PublicKey\n  ): Promise<JobAccountData | null> {\n    const info = await program.connection.getAccountInfo(address);\n\n    if (info === null) {\n      return null;\n    }\n    if (!info.owner.equals(program.programId)) {\n      throw new Error(\"account doesn't belong to this program\");\n    }\n\n    return this.decode(info.data);\n  }\n\n  static async fetchMultiple(\n    program: SwitchboardProgram,\n    addresses: PublicKey[]\n  ): Promise<Array<JobAccountData | null>> {\n    const infos = await program.connection.getMultipleAccountsInfo(addresses);\n\n    return infos.map(info => {\n      if (info === null) {\n        return null;\n      }\n      if (!info.owner.equals(program.programId)) {\n        throw new Error(\"account doesn't belong to this program\");\n      }\n\n      return this.decode(info.data);\n    });\n  }\n\n  static decode(data: Buffer): JobAccountData {\n    if (!data.slice(0, 8).equals(JobAccountData.discriminator)) {\n      throw new Error('invalid account discriminator');\n    }\n\n    const dec = JobAccountData.layout.decode(data.slice(8));\n\n    return new JobAccountData({\n      name: dec.name,\n      metadata: dec.metadata,\n      authority: dec.authority,\n      expiration: dec.expiration,\n      hash: dec.hash,\n      data: new Uint8Array(\n        dec.data.buffer,\n        dec.data.byteOffset,\n        dec.data.length\n      ),\n      referenceCount: dec.referenceCount,\n      totalSpent: dec.totalSpent,\n      createdAt: dec.createdAt,\n      isInitializing: dec.isInitializing,\n    });\n  }\n\n  toJSON(): JobAccountDataJSON {\n    return {\n      name: this.name,\n      metadata: this.metadata,\n      authority: this.authority.toString(),\n      expiration: this.expiration.toString(),\n      hash: this.hash,\n      data: Array.from(this.data.values()),\n      referenceCount: this.referenceCount,\n      totalSpent: this.totalSpent.toString(),\n      createdAt: this.createdAt.toString(),\n      isInitializing: this.isInitializing,\n    };\n  }\n\n  static fromJSON(obj: JobAccountDataJSON): JobAccountData {\n    return new JobAccountData({\n      name: obj.name,\n      metadata: obj.metadata,\n      authority: new PublicKey(obj.authority),\n      expiration: new BN(obj.expiration),\n      hash: obj.hash,\n      data: Uint8Array.from(obj.data),\n      referenceCount: obj.referenceCount,\n      totalSpent: new BN(obj.totalSpent),\n      createdAt: new BN(obj.createdAt),\n      isInitializing: obj.isInitializing,\n    });\n  }\n}\n"]}
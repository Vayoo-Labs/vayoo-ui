{"version":3,"file":"AggregatorRound.js","sourceRoot":"","sources":["../../../../src/generated/types/AggregatorRound.ts"],"names":[],"mappings":"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","sourcesContent":["import { SwitchboardProgram } from '../../SwitchboardProgram';\nimport { PublicKey } from '@solana/web3.js'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport { BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as borsh from '@coral-xyz/borsh';\n\nexport interface AggregatorRoundFields {\n  /**\n   * Maintains the number of successful responses received from nodes.\n   * Nodes can submit one successful response per round.\n   */\n  numSuccess: number;\n  /** Number of error responses. */\n  numError: number;\n  /** Whether an update request round has ended. */\n  isClosed: boolean;\n  /** Maintains the `solana_program::clock::Slot` that the round was opened at. */\n  roundOpenSlot: BN;\n  /** Maintains the `solana_program::clock::UnixTimestamp;` the round was opened at. */\n  roundOpenTimestamp: BN;\n  /** Maintains the current median of all successful round responses. */\n  result: types.SwitchboardDecimalFields;\n  /** Standard deviation of the accepted results in the round. */\n  stdDeviation: types.SwitchboardDecimalFields;\n  /** Maintains the minimum node response this round. */\n  minResponse: types.SwitchboardDecimalFields;\n  /** Maintains the maximum node response this round. */\n  maxResponse: types.SwitchboardDecimalFields;\n  /** Pubkeys of the oracles fulfilling this round. */\n  oraclePubkeysData: Array<PublicKey>;\n  /** Represents all successful node responses this round. `NaN` if empty. */\n  mediansData: Array<types.SwitchboardDecimalFields>;\n  /** Current rewards/slashes oracles have received this round. */\n  currentPayout: Array<BN>;\n  /** Keep track of which responses are fulfilled here. */\n  mediansFulfilled: Array<boolean>;\n  /** Keeps track of which errors are fulfilled here. */\n  errorsFulfilled: Array<boolean>;\n}\n\nexport interface AggregatorRoundJSON {\n  /**\n   * Maintains the number of successful responses received from nodes.\n   * Nodes can submit one successful response per round.\n   */\n  numSuccess: number;\n  /** Number of error responses. */\n  numError: number;\n  /** Whether an update request round has ended. */\n  isClosed: boolean;\n  /** Maintains the `solana_program::clock::Slot` that the round was opened at. */\n  roundOpenSlot: string;\n  /** Maintains the `solana_program::clock::UnixTimestamp;` the round was opened at. */\n  roundOpenTimestamp: string;\n  /** Maintains the current median of all successful round responses. */\n  result: types.SwitchboardDecimalJSON;\n  /** Standard deviation of the accepted results in the round. */\n  stdDeviation: types.SwitchboardDecimalJSON;\n  /** Maintains the minimum node response this round. */\n  minResponse: types.SwitchboardDecimalJSON;\n  /** Maintains the maximum node response this round. */\n  maxResponse: types.SwitchboardDecimalJSON;\n  /** Pubkeys of the oracles fulfilling this round. */\n  oraclePubkeysData: Array<string>;\n  /** Represents all successful node responses this round. `NaN` if empty. */\n  mediansData: Array<types.SwitchboardDecimalJSON>;\n  /** Current rewards/slashes oracles have received this round. */\n  currentPayout: Array<string>;\n  /** Keep track of which responses are fulfilled here. */\n  mediansFulfilled: Array<boolean>;\n  /** Keeps track of which errors are fulfilled here. */\n  errorsFulfilled: Array<boolean>;\n}\n\nexport class AggregatorRound {\n  /**\n   * Maintains the number of successful responses received from nodes.\n   * Nodes can submit one successful response per round.\n   */\n  readonly numSuccess: number;\n  /** Number of error responses. */\n  readonly numError: number;\n  /** Whether an update request round has ended. */\n  readonly isClosed: boolean;\n  /** Maintains the `solana_program::clock::Slot` that the round was opened at. */\n  readonly roundOpenSlot: BN;\n  /** Maintains the `solana_program::clock::UnixTimestamp;` the round was opened at. */\n  readonly roundOpenTimestamp: BN;\n  /** Maintains the current median of all successful round responses. */\n  readonly result: types.SwitchboardDecimal;\n  /** Standard deviation of the accepted results in the round. */\n  readonly stdDeviation: types.SwitchboardDecimal;\n  /** Maintains the minimum node response this round. */\n  readonly minResponse: types.SwitchboardDecimal;\n  /** Maintains the maximum node response this round. */\n  readonly maxResponse: types.SwitchboardDecimal;\n  /** Pubkeys of the oracles fulfilling this round. */\n  readonly oraclePubkeysData: Array<PublicKey>;\n  /** Represents all successful node responses this round. `NaN` if empty. */\n  readonly mediansData: Array<types.SwitchboardDecimal>;\n  /** Current rewards/slashes oracles have received this round. */\n  readonly currentPayout: Array<BN>;\n  /** Keep track of which responses are fulfilled here. */\n  readonly mediansFulfilled: Array<boolean>;\n  /** Keeps track of which errors are fulfilled here. */\n  readonly errorsFulfilled: Array<boolean>;\n\n  constructor(fields: AggregatorRoundFields) {\n    this.numSuccess = fields.numSuccess;\n    this.numError = fields.numError;\n    this.isClosed = fields.isClosed;\n    this.roundOpenSlot = fields.roundOpenSlot;\n    this.roundOpenTimestamp = fields.roundOpenTimestamp;\n    this.result = new types.SwitchboardDecimal({ ...fields.result });\n    this.stdDeviation = new types.SwitchboardDecimal({\n      ...fields.stdDeviation,\n    });\n    this.minResponse = new types.SwitchboardDecimal({ ...fields.minResponse });\n    this.maxResponse = new types.SwitchboardDecimal({ ...fields.maxResponse });\n    this.oraclePubkeysData = fields.oraclePubkeysData;\n    this.mediansData = fields.mediansData.map(\n      item => new types.SwitchboardDecimal({ ...item })\n    );\n    this.currentPayout = fields.currentPayout;\n    this.mediansFulfilled = fields.mediansFulfilled;\n    this.errorsFulfilled = fields.errorsFulfilled;\n  }\n\n  static layout(property?: string) {\n    return borsh.struct(\n      [\n        borsh.u32('numSuccess'),\n        borsh.u32('numError'),\n        borsh.bool('isClosed'),\n        borsh.u64('roundOpenSlot'),\n        borsh.i64('roundOpenTimestamp'),\n        types.SwitchboardDecimal.layout('result'),\n        types.SwitchboardDecimal.layout('stdDeviation'),\n        types.SwitchboardDecimal.layout('minResponse'),\n        types.SwitchboardDecimal.layout('maxResponse'),\n        borsh.array(borsh.publicKey(), 16, 'oraclePubkeysData'),\n        borsh.array(types.SwitchboardDecimal.layout(), 16, 'mediansData'),\n        borsh.array(borsh.i64(), 16, 'currentPayout'),\n        borsh.array(borsh.bool(), 16, 'mediansFulfilled'),\n        borsh.array(borsh.bool(), 16, 'errorsFulfilled'),\n      ],\n      property\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static fromDecoded(obj: any) {\n    return new AggregatorRound({\n      numSuccess: obj.numSuccess,\n      numError: obj.numError,\n      isClosed: obj.isClosed,\n      roundOpenSlot: obj.roundOpenSlot,\n      roundOpenTimestamp: obj.roundOpenTimestamp,\n      result: types.SwitchboardDecimal.fromDecoded(obj.result),\n      stdDeviation: types.SwitchboardDecimal.fromDecoded(obj.stdDeviation),\n      minResponse: types.SwitchboardDecimal.fromDecoded(obj.minResponse),\n      maxResponse: types.SwitchboardDecimal.fromDecoded(obj.maxResponse),\n      oraclePubkeysData: obj.oraclePubkeysData,\n      mediansData: obj.mediansData.map(\n        (\n          item: any /* eslint-disable-line @typescript-eslint/no-explicit-any */\n        ) => types.SwitchboardDecimal.fromDecoded(item)\n      ),\n      currentPayout: obj.currentPayout,\n      mediansFulfilled: obj.mediansFulfilled,\n      errorsFulfilled: obj.errorsFulfilled,\n    });\n  }\n\n  static toEncodable(fields: AggregatorRoundFields) {\n    return {\n      numSuccess: fields.numSuccess,\n      numError: fields.numError,\n      isClosed: fields.isClosed,\n      roundOpenSlot: fields.roundOpenSlot,\n      roundOpenTimestamp: fields.roundOpenTimestamp,\n      result: types.SwitchboardDecimal.toEncodable(fields.result),\n      stdDeviation: types.SwitchboardDecimal.toEncodable(fields.stdDeviation),\n      minResponse: types.SwitchboardDecimal.toEncodable(fields.minResponse),\n      maxResponse: types.SwitchboardDecimal.toEncodable(fields.maxResponse),\n      oraclePubkeysData: fields.oraclePubkeysData,\n      mediansData: fields.mediansData.map(item =>\n        types.SwitchboardDecimal.toEncodable(item)\n      ),\n      currentPayout: fields.currentPayout,\n      mediansFulfilled: fields.mediansFulfilled,\n      errorsFulfilled: fields.errorsFulfilled,\n    };\n  }\n\n  toJSON(): AggregatorRoundJSON {\n    return {\n      numSuccess: this.numSuccess,\n      numError: this.numError,\n      isClosed: this.isClosed,\n      roundOpenSlot: this.roundOpenSlot.toString(),\n      roundOpenTimestamp: this.roundOpenTimestamp.toString(),\n      result: this.result.toJSON(),\n      stdDeviation: this.stdDeviation.toJSON(),\n      minResponse: this.minResponse.toJSON(),\n      maxResponse: this.maxResponse.toJSON(),\n      oraclePubkeysData: this.oraclePubkeysData.map(item => item.toString()),\n      mediansData: this.mediansData.map(item => item.toJSON()),\n      currentPayout: this.currentPayout.map(item => item.toString()),\n      mediansFulfilled: this.mediansFulfilled,\n      errorsFulfilled: this.errorsFulfilled,\n    };\n  }\n\n  static fromJSON(obj: AggregatorRoundJSON): AggregatorRound {\n    return new AggregatorRound({\n      numSuccess: obj.numSuccess,\n      numError: obj.numError,\n      isClosed: obj.isClosed,\n      roundOpenSlot: new BN(obj.roundOpenSlot),\n      roundOpenTimestamp: new BN(obj.roundOpenTimestamp),\n      result: types.SwitchboardDecimal.fromJSON(obj.result),\n      stdDeviation: types.SwitchboardDecimal.fromJSON(obj.stdDeviation),\n      minResponse: types.SwitchboardDecimal.fromJSON(obj.minResponse),\n      maxResponse: types.SwitchboardDecimal.fromJSON(obj.maxResponse),\n      oraclePubkeysData: obj.oraclePubkeysData.map(item => new PublicKey(item)),\n      mediansData: obj.mediansData.map(item =>\n        types.SwitchboardDecimal.fromJSON(item)\n      ),\n      currentPayout: obj.currentPayout.map(item => new BN(item)),\n      mediansFulfilled: obj.mediansFulfilled,\n      errorsFulfilled: obj.errorsFulfilled,\n    });\n  }\n\n  toEncodable() {\n    return AggregatorRound.toEncodable(this);\n  }\n}\n"]}
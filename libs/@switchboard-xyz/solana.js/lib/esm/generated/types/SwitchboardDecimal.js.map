{"version":3,"file":"SwitchboardDecimal.js","sourceRoot":"","sources":["../../../../src/generated/types/SwitchboardDecimal.ts"],"names":[],"mappings":"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","sourcesContent":["import * as borsh from '@coral-xyz/borsh';\nimport { Big, BN } from '@switchboard-xyz/common'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as types from '../types'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport interface SwitchboardDecimalFields {\n  /**\n   * The part of a floating-point number that represents the significant digits of that number,\n   * and that is multiplied by the base, 10, raised to the power of scale to give the actual value of the number.\n   */\n  mantissa: BN;\n  /** The number of decimal places to move to the left to yield the actual value. */\n  scale: number;\n}\n\nexport interface SwitchboardDecimalJSON {\n  /**\n   * The part of a floating-point number that represents the significant digits of that number,\n   * and that is multiplied by the base, 10, raised to the power of scale to give the actual value of the number.\n   */\n  mantissa: string;\n  /** The number of decimal places to move to the left to yield the actual value. */\n  scale: number;\n}\n\nexport class SwitchboardDecimal {\n  /**\n   * The part of a floating-point number that represents the significant digits of that number,\n   * and that is multiplied by the base, 10, raised to the power of scale to give the actual value of the number.\n   */\n  readonly mantissa: BN;\n  /** The number of decimal places to move to the left to yield the actual value. */\n  readonly scale: number;\n\n  constructor(fields: SwitchboardDecimalFields) {\n    this.mantissa = fields.mantissa;\n    this.scale = fields.scale;\n  }\n\n  static layout(property?: string) {\n    return borsh.struct([borsh.i128('mantissa'), borsh.u32('scale')], property);\n  }\n\n  get borsh(): types.BorshDecimal {\n    return new types.BorshDecimal({\n      mantissa: this.mantissa,\n      scale: this.scale,\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static fromDecoded(obj: any) {\n    return new SwitchboardDecimal({\n      mantissa: obj.mantissa,\n      scale: obj.scale,\n    });\n  }\n\n  static toEncodable(fields: SwitchboardDecimalFields) {\n    return {\n      mantissa: fields.mantissa,\n      scale: fields.scale,\n    };\n  }\n\n  toJSON(): SwitchboardDecimalJSON {\n    return {\n      mantissa: this.mantissa.toString(),\n      scale: this.scale,\n    };\n  }\n\n  static fromJSON(obj: SwitchboardDecimalJSON): SwitchboardDecimal {\n    return new SwitchboardDecimal({\n      mantissa: new BN(obj.mantissa),\n      scale: obj.scale,\n    });\n  }\n\n  toEncodable() {\n    return SwitchboardDecimal.toEncodable(this);\n  }\n\n  /**\n   * Convert untyped object to a Switchboard decimal, if possible.\n   * @param obj raw object to convert from\n   * @return SwitchboardDecimal\n   */\n  public static from(obj: {\n    mantissa: string | number | BN;\n    scale: number;\n  }): SwitchboardDecimal {\n    return new SwitchboardDecimal({\n      mantissa: new BN(obj.mantissa),\n      scale: obj.scale,\n    });\n  }\n\n  /**\n   * Convert a Big.js decimal to a Switchboard decimal.\n   * @param big a Big.js decimal\n   * @return a SwitchboardDecimal\n   */\n  public static fromBig(big: Big): SwitchboardDecimal {\n    // Round to fit in Switchboard Decimal\n    // TODO: smarter logic.\n    big = big.round(20);\n    let mantissa: BN = new BN(big.c.join(''), 10);\n    // Set the scale. Big.exponenet sets scale from the opposite side\n    // SwitchboardDecimal does.\n    let scale = big.c.slice(1).length - big.e;\n\n    if (scale < 0) {\n      mantissa = mantissa.mul(new BN(10, 10).pow(new BN(Math.abs(scale), 10)));\n      scale = 0;\n    }\n    if (scale < 0) {\n      throw new Error('SwitchboardDecimal: Unexpected negative scale.');\n    }\n    if (scale >= 28) {\n      throw new Error('SwitchboardDecimalExcessiveScaleError');\n    }\n\n    // Set sign for the coefficient (mantissa)\n    mantissa = mantissa.mul(new BN(big.s, 10));\n\n    const result = new SwitchboardDecimal({ mantissa, scale });\n    if (big.sub(result.toBig()).abs().gt(new Big(0.00005))) {\n      throw new Error(\n        'SwitchboardDecimal: Converted decimal does not match original:\\n' +\n          `out: ${result.toBig().toNumber()} vs in: ${big.toNumber()}\\n` +\n          `-- result mantissa and scale: ${result.mantissa.toString()} ${result.scale.toString()}\\n` +\n          `${result} ${result.toBig()}`\n      );\n    }\n    return result;\n  }\n\n  /**\n   * SwitchboardDecimal equality comparator.\n   * @param other object to compare to.\n   * @return true iff equal\n   */\n  public eq(other: SwitchboardDecimal): boolean {\n    return this.mantissa.eq(other.mantissa) && this.scale === other.scale;\n  }\n\n  /**\n   * Convert SwitchboardDecimal to big.js Big type.\n   * @return Big representation\n   */\n  public toBig(): Big {\n    let mantissa: BN = new BN(this.mantissa, 10);\n    let s = 1;\n    const c: Array<number> = [];\n    const ZERO = new BN(0, 10);\n    const TEN = new BN(10, 10);\n    if (mantissa.lt(ZERO)) {\n      s = -1;\n      mantissa = mantissa.abs();\n    }\n    while (mantissa.gt(ZERO)) {\n      c.unshift(mantissa.mod(TEN).toNumber());\n      mantissa = mantissa.div(TEN);\n    }\n    const e = c.length - this.scale - 1;\n    const result = new Big(0);\n    if (c.length === 0) {\n      return result;\n    }\n    result.s = s;\n    result.c = c;\n    result.e = e;\n    return result;\n  }\n\n  toString() {\n    return this.toBig().toString();\n  }\n}\n"]}
{"version":3,"file":"SwitchboardNetwork.js","sourceRoot":"","sources":["../../src/SwitchboardNetwork.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AggregatorAccount,\n  BufferRelayerAccount,\n  CrankAccount,\n  CreateQueueBufferRelayerParams,\n  CreateQueueCrankParams,\n  CreateQueueFeedParams,\n  CreateQueueOracleParams,\n  CreateQueueVrfParams,\n  JobAccount,\n  LeaseAccount,\n  OracleAccount,\n  PermissionAccount,\n  ProgramStateAccount,\n  QueueAccount,\n  QueueInitParams,\n  VrfAccount,\n} from './accounts';\nimport {\n  AggregatorAccountData,\n  BufferRelayerAccountData,\n  CrankAccountData,\n  JobAccountData,\n  LeaseAccountData,\n  OracleAccountData,\n  OracleQueueAccountData,\n  PermissionAccountData,\n  SbState,\n  VrfAccountData,\n} from './generated';\nimport {\n  SendTransactionOptions,\n  SwitchboardProgram,\n} from './SwitchboardProgram';\nimport { TransactionObject } from './TransactionObject';\nimport {\n  AggregatorDefinition,\n  BufferRelayerDefinition,\n  CrankDefinition,\n  LoadedAccountDefinition,\n  LoadedAggregatorDefinition,\n  LoadedBufferRelayerDefinition,\n  LoadedCrankDefinition,\n  LoadedJobDefinition,\n  LoadedOracleDefinition,\n  LoadedProgramStateDefinition,\n  LoadedQueueDefinition,\n  LoadedVrfDefinition,\n  OracleDefinition,\n  ProgramStateDefinition,\n  QueueDefinition,\n  VrfDefinition,\n} from './types';\n\nimport * as anchor from '@coral-xyz/anchor';\nimport {\n  AccountInfo,\n  Keypair,\n  PublicKey,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport { OracleJob } from '@switchboard-xyz/common';\nimport fs from 'fs';\nimport path from 'path';\n\nexport const isKeypairString = (value: string): boolean =>\n  /^\\[(\\s)?[0-9]+((\\s)?,(\\s)?[0-9]+){31,}\\]/.test(value);\n\n/** Parameters to create a new queue with a set of associated accounts */\nexport type NetworkInitParams = Omit<QueueInitParams, 'authority'> & {\n  authority?: Keypair;\n} & {\n  /** The {@linkcode CrankAccount}s to add to the queue */\n  cranks?: Array<CreateQueueCrankParams>;\n  /** The {@linkcode OracleAccount}s to add to the queue */\n  oracles?: Array<CreateQueueOracleParams>;\n  /** The {@linkcode AggregatorAccount}s to add to the queue */\n  aggregators?: Array<\n    CreateQueueFeedParams & {\n      /** The index of the crank to add the feed to */\n      crankIndex?: number;\n    }\n  >;\n  /** The {@linkcode VrfAccount}s to add to the queue */\n  vrfs?: Array<CreateQueueVrfParams>;\n  /** The {@linkcode BufferRelayerAccount}s to add to the queue */\n  bufferRelayers?: Array<CreateQueueBufferRelayerParams>;\n};\n\n/** The queue and associated accounts for the newly created Switchboard network. */\nexport interface ISwitchboardNetwork {\n  /** The {@linkcode ProgramStateAccount} and PDA bump. */\n  programState: ProgramStateDefinition;\n  /** The {@linkcode QueueAccount} for the newly created Switchboard network. */\n  queue: QueueDefinition;\n  /** The {@linkcode CrankAccount}s for the newly created Switchboard network. */\n  cranks: Array<CrankDefinition>;\n  oracles: Array<OracleDefinition>;\n  aggregators: Array<AggregatorDefinition>;\n  vrfs: Array<VrfDefinition>;\n  bufferRelayers: Array<BufferRelayerDefinition>;\n}\n\n/** Wrapper to quickly create a Switchboard network including:\n *  - an oracle queue\n *  - a set of cranks\n *  - a set of oracles\n *  - a set of aggregators with job configs\n *  - a set of vrf accounts\n *  - a set of buffer relayers\n *\n */\nexport class SwitchboardNetwork implements ISwitchboardNetwork {\n  programState: ProgramStateDefinition;\n  queue: QueueDefinition;\n  cranks: Array<CrankDefinition>;\n  oracles: Array<OracleDefinition>;\n  aggregators: Array<AggregatorDefinition>;\n  vrfs: Array<VrfDefinition>;\n  bufferRelayers: Array<BufferRelayerDefinition>;\n\n  crankMap: Map<string, CrankDefinition>;\n  oracleMap: Map<string, OracleDefinition>;\n  aggregatorMap: Map<string, AggregatorDefinition>;\n  vrfMap: Map<string, VrfDefinition>;\n  bufferRelayerMap: Map<string, BufferRelayerDefinition>;\n\n  constructor(\n    // readonly program: SwitchboardProgram,\n    fields: ISwitchboardNetwork\n  ) {\n    this.programState = fields.programState;\n    this.queue = fields.queue;\n\n    this.cranks = fields.cranks;\n    this.crankMap = this.cranks.reduce((map, crank) => {\n      map.set(crank.account.publicKey.toBase58(), crank);\n      return map;\n    }, new Map<string, CrankDefinition>());\n\n    this.oracles = fields.oracles;\n    this.oracleMap = this.oracles.reduce((map, oracle) => {\n      map.set(oracle.account.publicKey.toBase58(), oracle);\n      return map;\n    }, new Map<string, OracleDefinition>());\n\n    this.aggregators = fields.aggregators;\n    this.aggregatorMap = this.aggregators.reduce((map, aggregator) => {\n      map.set(aggregator.account.publicKey.toBase58(), aggregator);\n      return map;\n    }, new Map<string, AggregatorDefinition>());\n\n    this.vrfs = fields.vrfs;\n    this.vrfMap = this.vrfs.reduce((map, vrf) => {\n      map.set(vrf.account.publicKey.toBase58(), vrf);\n      return map;\n    }, new Map<string, VrfDefinition>());\n\n    this.bufferRelayers = fields.bufferRelayers;\n    this.bufferRelayerMap = this.bufferRelayers.reduce((map, bufferRelayer) => {\n      map.set(bufferRelayer.account.publicKey.toBase58(), bufferRelayer);\n      return map;\n    }, new Map<string, BufferRelayerDefinition>());\n  }\n\n  get program(): SwitchboardProgram {\n    return this.queue.account.program;\n  }\n\n  getCrank(crankPubkey: PublicKey | string): CrankDefinition | undefined {\n    return this.crankMap.get(\n      typeof crankPubkey === 'string' ? crankPubkey : crankPubkey.toBase58()\n    );\n  }\n\n  getOracle(oraclePubkey: PublicKey | string): OracleDefinition | undefined {\n    return this.oracleMap.get(\n      typeof oraclePubkey === 'string' ? oraclePubkey : oraclePubkey.toBase58()\n    );\n  }\n\n  getAggregator(\n    aggregatorPubkey: PublicKey | string\n  ): AggregatorDefinition | undefined {\n    return this.aggregatorMap.get(\n      typeof aggregatorPubkey === 'string'\n        ? aggregatorPubkey\n        : aggregatorPubkey.toBase58()\n    );\n  }\n\n  getVrf(vrfPubkey: PublicKey | string): VrfDefinition | undefined {\n    return this.vrfMap.get(\n      typeof vrfPubkey === 'string' ? vrfPubkey : vrfPubkey.toBase58()\n    );\n  }\n\n  getBufferRelayer(\n    bufferRelayerPubkey: PublicKey | string\n  ): BufferRelayerDefinition | undefined {\n    return this.bufferRelayerMap.get(\n      typeof bufferRelayerPubkey === 'string'\n        ? bufferRelayerPubkey\n        : bufferRelayerPubkey.toBase58()\n    );\n  }\n\n  public static find(\n    program: SwitchboardProgram,\n    networkName = 'default',\n    switchboardDir = path.join(process.cwd(), '.switchboard')\n  ): SwitchboardNetwork {\n    if (\n      !fs.existsSync(switchboardDir) ||\n      !fs.statSync(switchboardDir).isDirectory\n    ) {\n      throw new Error(\n        `Failed to find switchboard directory: ${switchboardDir}`\n      );\n    }\n    const networkDir = path.join(switchboardDir, 'networks');\n    if (!fs.existsSync(networkDir) || !fs.statSync(networkDir).isDirectory) {\n      throw new Error(\n        `Failed to find switchboard network directory: ${networkDir}`\n      );\n    }\n    const networkFile = path.join(networkDir, `${networkName}.json`);\n    if (!fs.existsSync(networkFile) || !fs.statSync(networkFile).isFile) {\n      throw new Error(\n        `Failed to find switchboard network ${networkName}: ${networkFile}`\n      );\n    }\n    const obj: Record<string, any> = JSON.parse(\n      fs.readFileSync(networkFile, 'utf-8')\n    );\n\n    return SwitchboardNetwork.from(program, obj);\n  }\n\n  /**\n *\n * Creates a transaction object to initialize a SwitchboardNetwork.\n *\n * Basic usage example:\n *\n * ```ts\n *     const [accounts, signatures] = await SwitchboardNetwork.createInstructions(\n      program,\n      progam.walletPubkey,\n      {\n        name: 'Queue-1',\n        reward: 0,\n        minStake: 1,\n        unpermissionedFeeds: false,\n        unpermissionedVrf: false,\n        authority: origQueueAuthority,\n        oracles: [\n          {\n            name: 'Oracle-1',\n            enable: true,\n            stakeAmount: 1,\n          },\n        ],\n        cranks: [{ name: 'Crank-1', maxRows: 100 }],\n        aggregators: [{\n          name: \"Aggregator-1\",\n          crankIndex: 0,\n          enable: true,\n          fundAmount: 2.5,\n          \"minUpdateDelaySeconds\": 15,\n          \"batchSize\": 3,\n          \"minRequiredOracleResults\": 2,\n          \"jobs\": [\n            {\n              \"weight\": 1,\n              \"name\": \"Job #1\",\n              \"tasks\": [\n                {\n                  \"valueTask\": {\n                    \"value\": \"1\"\n                  }\n                }\n              ]\n            }\n          ]\n        }]\n      }\n    );\n * ```\n */\n  public static async createInstructions(\n    program: SwitchboardProgram,\n    payer: PublicKey,\n    params: NetworkInitParams\n  ): Promise<[Array<TransactionObject>, SwitchboardNetwork]> {\n    const txns: Array<TransactionObject> = [];\n\n    // const userTokenAddress = this.mint.getAssociatedAddress(payer);\n\n    // calculate the total amount of funds we'll need to wrap\n    let neededWrappedFunds = 0;\n    (params.oracles ?? []).forEach(o => {\n      if (o.stakeAmount) {\n        neededWrappedFunds = neededWrappedFunds + o.stakeAmount;\n      }\n    });\n\n    (params.aggregators ?? []).forEach(a => {\n      if (a.fundAmount) {\n        neededWrappedFunds = neededWrappedFunds + a.fundAmount;\n      }\n    });\n\n    const [userTokenAddress, wrapFundsTxn] =\n      await program.mint.getOrCreateWrappedUserInstructions(payer, {\n        fundUpTo: neededWrappedFunds,\n      });\n\n    const queueAuthorityPubkey = params.authority\n      ? params.authority.publicKey\n      : payer;\n\n    // get or create the program state\n    const [programState, stateBump, programInit] =\n      await ProgramStateAccount.getOrCreateInstructions(program, payer);\n    if (programInit) {\n      txns.push(programInit);\n    }\n\n    // create a new queue\n    const [queueAccount, queueInit] = await QueueAccount.createInstructions(\n      program,\n      payer,\n      { ...params, authority: queueAuthorityPubkey }\n    );\n    txns.push(queueInit);\n\n    // create the cranks\n    const cranks: Array<[TransactionObject, CrankDefinition]> =\n      await Promise.all(\n        (params.cranks ?? []).map(async crankInitParams => {\n          const [crankAccount, crankInit] =\n            await queueAccount.createCrankInstructions(payer, crankInitParams);\n\n          return [\n            crankInit,\n            {\n              account: crankAccount,\n              dataBuffer: crankAccount.dataBuffer!.publicKey,\n            },\n          ];\n        })\n      );\n    txns.push(...cranks.map(crank => crank[0]));\n\n    // create the oracles\n    const oracles: Array<[Array<TransactionObject>, OracleDefinition]> =\n      await Promise.all(\n        (params.oracles ?? []).map(async oracleInitParams => {\n          const [oracleAccount, oracleInit] =\n            await queueAccount.createOracleInstructions(payer, {\n              ...oracleInitParams,\n              queueAuthority: params.authority,\n              queueAuthorityPubkey: queueAuthorityPubkey,\n              funderTokenWallet: userTokenAddress,\n              disableWrap: true,\n              enable: true,\n            });\n\n          const [oraclePermissionAccount, oraclePermissionBump] =\n            PermissionAccount.fromSeed(\n              program,\n              queueAuthorityPubkey,\n              queueAccount.publicKey,\n              oracleAccount.publicKey\n            );\n\n          return [\n            oracleInit,\n            {\n              account: oracleAccount,\n              permission: {\n                account: oraclePermissionAccount,\n                bump: oraclePermissionBump,\n              },\n            },\n          ];\n        })\n      );\n    txns.push(...oracles.map(oracle => oracle[0]).flat());\n\n    // create the feeds\n    const aggregators: Array<[Array<TransactionObject>, AggregatorDefinition]> =\n      await Promise.all(\n        (params.aggregators ?? []).map(async feedInitParams => {\n          const crank = feedInitParams.crankPubkey\n            ? new CrankAccount(program, feedInitParams.crankPubkey)\n            : feedInitParams.crankIndex !== undefined &&\n              feedInitParams.crankIndex >= 0 &&\n              cranks.length > feedInitParams.crankIndex\n            ? cranks[feedInitParams.crankIndex][1].account\n            : undefined;\n\n          const crankPubkey = crank?.publicKey ?? undefined;\n          const crankDataBuffer =\n            feedInitParams.crankDataBuffer ??\n            crank?.dataBuffer?.publicKey ??\n            (await crank?.loadData())?.dataBuffer;\n\n          const [aggregatorAccount, aggregatorInit] =\n            await queueAccount.createFeedInstructions(payer, {\n              ...feedInitParams,\n              queueAuthority: params.authority,\n              queueAuthorityPubkey,\n              funderTokenWallet: userTokenAddress,\n              disableWrap: true,\n              crankPubkey: crankPubkey,\n              crankDataBuffer: crankDataBuffer,\n            });\n\n          const [aggregatorPermissionAccount, aggregatorPermissionBump] =\n            PermissionAccount.fromSeed(\n              program,\n              queueAuthorityPubkey,\n              queueAccount.publicKey,\n              aggregatorAccount.publicKey\n            );\n\n          const [aggregatorLeaseAccount, aggregatorLeaseBump] =\n            LeaseAccount.fromSeed(\n              program,\n              queueAccount.publicKey,\n              aggregatorAccount.publicKey\n            );\n\n          return [\n            aggregatorInit,\n            {\n              account: aggregatorAccount,\n              permission: {\n                account: aggregatorPermissionAccount,\n                bump: aggregatorPermissionBump,\n              },\n              lease: {\n                account: aggregatorLeaseAccount,\n                bump: aggregatorLeaseBump,\n              },\n            },\n          ];\n        })\n      );\n    txns.push(...aggregators.map(aggregator => aggregator[0]).flat());\n\n    // create the vrfs\n    const vrfs: Array<[TransactionObject, VrfDefinition]> = await Promise.all(\n      (params.vrfs ?? []).map(async vrfInitParams => {\n        const [vrfAccount, vrfInit] = await queueAccount.createVrfInstructions(\n          payer,\n          {\n            ...vrfInitParams,\n            queueAuthority: params.authority,\n            queueAuthorityPubkey,\n          }\n        );\n\n        const [vrfPermissionAccount, vrfPermissionBump] =\n          PermissionAccount.fromSeed(\n            program,\n            queueAuthorityPubkey,\n            queueAccount.publicKey,\n            vrfAccount.publicKey\n          );\n\n        return [\n          vrfInit,\n          {\n            account: vrfAccount,\n            permission: {\n              account: vrfPermissionAccount,\n              bump: vrfPermissionBump,\n            },\n          },\n        ];\n      })\n    );\n    txns.push(...vrfs.map(vrf => vrf[0]));\n\n    // create the buffer relayers\n    const bufferRelayers: Array<[TransactionObject, BufferRelayerDefinition]> =\n      await Promise.all(\n        (params.bufferRelayers ?? []).map(async bufferRelayerInitParams => {\n          const [bufferRelayerAccount, bufferRelayerInit] =\n            await queueAccount.createBufferRelayerInstructions(payer, {\n              ...bufferRelayerInitParams,\n              queueAuthority: params.authority,\n              queueAuthorityPubkey,\n            });\n\n          const [bufferRelayerPermissionAccount, bufferRelayerPermissionBump] =\n            PermissionAccount.fromSeed(\n              program,\n              queueAuthorityPubkey,\n              queueAccount.publicKey,\n              bufferRelayerAccount.publicKey\n            );\n\n          return [\n            bufferRelayerInit,\n            {\n              account: bufferRelayerAccount,\n              permission: {\n                account: bufferRelayerPermissionAccount,\n                bump: bufferRelayerPermissionBump,\n              },\n            },\n          ];\n        })\n      );\n    txns.push(...bufferRelayers.map(bufferRelayer => bufferRelayer[0]));\n\n    const accounts: ISwitchboardNetwork = {\n      programState: {\n        account: programState,\n        bump: stateBump,\n      },\n      queue: {\n        account: queueAccount,\n      },\n      cranks: cranks.map(c => c[1]),\n      oracles: oracles.map(o => o[1]),\n      aggregators: aggregators.map(a => a[1]),\n      vrfs: vrfs.map(v => v[1]),\n      bufferRelayers: bufferRelayers.map(b => b[1]),\n    };\n\n    return [\n      TransactionObject.pack(wrapFundsTxn ? [wrapFundsTxn, ...txns] : txns),\n      new SwitchboardNetwork(accounts),\n    ];\n  }\n\n  /**\n *\n * Create a new SwitchboardNetwork.\n *\n * Basic usage example:\n *\n * ```ts\n *     const [accounts, signatures] = await SwitchboardNetwork.create(\n      program,\n      {\n        name: 'Queue-1',\n        reward: 0,\n        minStake: 1,\n        unpermissionedFeeds: false,\n        unpermissionedVrf: false,\n        authority: origQueueAuthority,\n        oracles: [\n          {\n            name: 'Oracle-1',\n            enable: true,\n            stakeAmount: 1,\n          },\n        ],\n        cranks: [{ name: 'Crank-1', maxRows: 100 }],\n        aggregators: [{\n          name: \"Aggregator-1\",\n          crankIndex: 0,\n          enable: true,\n          fundAmount: 2.5,\n          \"minUpdateDelaySeconds\": 15,\n          \"batchSize\": 3,\n          \"minRequiredOracleResults\": 2,\n          \"jobs\": [\n            {\n              \"weight\": 1,\n              \"name\": \"Job #1\",\n              \"tasks\": [\n                {\n                  \"valueTask\": {\n                    \"value\": \"1\"\n                  }\n                }\n              ]\n            }\n          ]\n        }]\n      }\n    );\n * ```\n */\n  public static async create(\n    program: SwitchboardProgram,\n    params: NetworkInitParams,\n    opts?: SendTransactionOptions\n  ): Promise<[SwitchboardNetwork, Array<TransactionSignature>]> {\n    const [networkInit, accounts] = await SwitchboardNetwork.createInstructions(\n      program,\n      program.walletPubkey,\n      params\n    );\n    const txnSignatures = await program.signAndSendAll(networkInit, {\n      skipPreflight: true,\n      ...opts,\n    });\n    return [accounts, txnSignatures];\n  }\n\n  /**\n   * Load the account states for a {@linkcode SwitchboardNetwork}.\n   *\n   * @returns LoadedSwitchboardNetwork\n   */\n  async load(): Promise<LoadedSwitchboardNetwork> {\n    const program = this.queue.account.program;\n\n    // load the accounts\n    const publicKeys: Array<PublicKey> = [\n      this.programState.account.publicKey,\n      this.queue.account.publicKey,\n      // cranks\n      ...this.cranks.map(c => c.account.publicKey),\n      // oracles\n      ...this.oracles\n        .map(o => [o.account.publicKey, o.permission.account.publicKey])\n        .flat(),\n      // aggregators\n      ...this.aggregators\n        .map(a => [\n          a.account.publicKey,\n          a.permission.account.publicKey,\n          a.lease.account.publicKey,\n        ])\n        .flat(),\n      // vrfs\n      ...this.vrfs\n        .map(v => [v.account.publicKey, v.permission.account.publicKey])\n        .flat(),\n      // buffer relayers\n      ...this.bufferRelayers\n        .map(b => [b.account.publicKey, b.permission.account.publicKey])\n        .flat(),\n    ];\n\n    const accountInfos: Map<\n      string,\n      AccountInfo<Buffer>\n    > = await anchor.utils.rpc\n      .getMultipleAccounts(program.connection, publicKeys)\n      .then(\n        (\n          values: ({\n            publicKey: anchor.web3.PublicKey;\n            account: anchor.web3.AccountInfo<Buffer>;\n          } | null)[]\n        ) => {\n          return values.reduce((map, account) => {\n            if (account && account.account.data) {\n              map.set(account.publicKey.toBase58(), account.account);\n            }\n\n            return map;\n          }, new Map<string, AccountInfo<Buffer>>());\n        }\n      );\n\n    // build tree\n    const programState: LoadedProgramStateDefinition = {\n      ...this.programState,\n      state: SbState.decode(\n        accountInfos.get(this.programState.account.publicKey.toBase58())\n          ?.data ?? Buffer.from('')\n      ),\n    };\n\n    const queue: LoadedQueueDefinition = {\n      ...this.queue,\n      state: OracleQueueAccountData.decode(\n        accountInfos.get(this.queue.account.publicKey.toBase58())?.data ??\n          Buffer.from('')\n      ),\n    };\n\n    const cranks: Array<LoadedCrankDefinition> = this.cranks.map(crank => {\n      return {\n        ...crank,\n        state: CrankAccountData.decode(\n          accountInfos.get(crank.account.publicKey.toBase58())?.data ??\n            Buffer.from('')\n        ),\n      };\n    });\n\n    const oracles: Array<LoadedOracleDefinition> = this.oracles.map(oracle => {\n      return {\n        ...oracle,\n        state: OracleAccountData.decode(\n          accountInfos.get(oracle.account.publicKey.toBase58())?.data ??\n            Buffer.from('')\n        ),\n        permission: {\n          ...oracle.permission,\n          state: PermissionAccountData.decode(\n            accountInfos.get(oracle.permission.account.publicKey.toBase58())\n              ?.data ?? Buffer.from('')\n          ),\n        },\n      };\n    });\n\n    const aggregators: Array<LoadedAggregatorDefinition> = this.aggregators.map(\n      aggregator => {\n        return {\n          ...aggregator,\n          state: AggregatorAccountData.decode(\n            accountInfos.get(aggregator.account.publicKey.toBase58())?.data ??\n              Buffer.from('')\n          ),\n          permission: {\n            ...aggregator.permission,\n            state: PermissionAccountData.decode(\n              accountInfos.get(\n                aggregator.permission.account.publicKey.toBase58()\n              )?.data ?? Buffer.from('')\n            ),\n          },\n          lease: {\n            ...aggregator.lease,\n            state: LeaseAccountData.decode(\n              accountInfos.get(aggregator.lease.account.publicKey.toBase58())\n                ?.data ?? Buffer.from('')\n            ),\n          },\n        };\n      }\n    );\n\n    const vrfs: Array<LoadedVrfDefinition> = this.vrfs.map(vrf => {\n      return {\n        ...vrf,\n        state: VrfAccountData.decode(\n          accountInfos.get(vrf.account.publicKey.toBase58())?.data ??\n            Buffer.from('')\n        ),\n        permission: {\n          ...vrf.permission,\n          state: PermissionAccountData.decode(\n            accountInfos.get(vrf.permission.account.publicKey.toBase58())\n              ?.data ?? Buffer.from('')\n          ),\n        },\n      };\n    });\n\n    const bufferRelayers: Array<LoadedBufferRelayerDefinition> =\n      this.bufferRelayers.map(bufferRelayer => {\n        return {\n          ...bufferRelayer,\n          state: BufferRelayerAccountData.decode(\n            accountInfos.get(bufferRelayer.account.publicKey.toBase58())\n              ?.data ?? Buffer.from('')\n          ),\n          permission: {\n            ...bufferRelayer.permission,\n            state: PermissionAccountData.decode(\n              accountInfos.get(\n                bufferRelayer.permission.account.publicKey.toBase58()\n              )?.data ?? Buffer.from('')\n            ),\n          },\n        };\n      });\n\n    const jobPublicKeys: Array<PublicKey> = [];\n    aggregators.forEach(aggregator => {\n      const jobs = aggregator.state.jobPubkeysData.slice(\n        0,\n        aggregator.state.jobPubkeysSize\n      );\n      jobPublicKeys.push(...jobs);\n    });\n    bufferRelayers.forEach(bufferRelayer => {\n      jobPublicKeys.push(bufferRelayer.state.jobPubkey);\n    });\n\n    const jobs: Array<LoadedJobDefinition> = (\n      await anchor.utils.rpc\n        .getMultipleAccounts(program.connection, jobPublicKeys)\n        .then(\n          (\n            values: ({\n              publicKey: anchor.web3.PublicKey;\n              account: anchor.web3.AccountInfo<Buffer>;\n            } | null)[]\n          ) => {\n            return values.map(account => {\n              if (account === null) {\n                return undefined;\n              }\n\n              const jobAccount = new JobAccount(program, account.publicKey);\n              const state = JobAccountData.decode(account.account.data);\n              let job: OracleJob;\n              try {\n                job = OracleJob.decodeDelimited(state.data);\n              } catch {\n                job = OracleJob.fromObject({ tasks: [] });\n              }\n\n              const loadedJob: LoadedJobDefinition = {\n                account: jobAccount,\n                state: state,\n                job,\n              };\n\n              return loadedJob;\n            });\n          }\n        )\n    ).filter(Boolean) as Array<\n      LoadedAccountDefinition<JobAccount, JobAccountData> & { job: OracleJob }\n    >;\n\n    return new LoadedSwitchboardNetwork({\n      programState,\n      queue,\n      cranks,\n      oracles,\n      aggregators,\n      vrfs,\n      bufferRelayers,\n      jobs,\n    });\n  }\n\n  /**\n   * Load a SwitchboardNetwork from an outputted JSON file\n   *\n   * @param program\n   * @param obj\n   * @returns\n   */\n  static from(\n    program: SwitchboardProgram,\n    obj: Record<string, any>\n  ): SwitchboardNetwork {\n    const programState: ProgramStateDefinition = {\n      account: new ProgramStateAccount(program, program.programState.publicKey),\n      bump: program.programState.bump,\n    };\n    if (!('queue' in obj) || typeof obj.queue !== 'object') {\n      throw new Error(`SwitchboardNetwork requires a queue object`);\n    }\n\n    let queueAccount: QueueAccount;\n    if ('publicKey' in obj.queue) {\n      queueAccount = new QueueAccount(program, obj.queue.publicKey);\n    } else if (\n      'keypair' in obj.queue &&\n      typeof obj.queue.keypair === 'string' &&\n      isKeypairString(obj.queue.keypair)\n    ) {\n      const queueKeypair = Keypair.fromSecretKey(\n        new Uint8Array(JSON.parse(obj.queue.keypair))\n      );\n      queueAccount = new QueueAccount(program, queueKeypair.publicKey);\n    } else {\n      throw new Error(`Failed to load queue`);\n    }\n    const queue: QueueDefinition = {\n      account: queueAccount,\n    };\n\n    let queueAuthority: PublicKey;\n    if ('authority' in obj.queue && typeof obj.queue.authority === 'string') {\n      queueAuthority = new PublicKey(obj.queue.authority);\n    } else if (\n      'queueAuthorityKeypair' in obj.queue &&\n      typeof obj.queue.queueAuthorityKeypair === 'string' &&\n      isKeypairString(obj.queue.queueAuthorityKeypair)\n    ) {\n      const queueAuthorityKeypair = Keypair.fromSecretKey(\n        new Uint8Array(JSON.parse(obj.queue.queueAuthorityKeypair))\n      );\n      queueAuthority = queueAuthorityKeypair.publicKey;\n    } else {\n      throw new Error(`Failed to load queue authority`);\n    }\n\n    const cranks: Array<CrankDefinition> = [];\n    if ('cranks' in obj && Array.isArray(obj.cranks)) {\n      for (const crank of obj.cranks ?? []) {\n        if ('publicKey' in crank) {\n          const account = new CrankAccount(program, crank.publicKey);\n          cranks.push({\n            account,\n          });\n        } else if (\n          'keypair' in crank &&\n          typeof crank.keypair === 'string' &&\n          isKeypairString(crank.keypair)\n        ) {\n          const keypair = Keypair.fromSecretKey(\n            new Uint8Array(JSON.parse(crank.keypair))\n          );\n          const account = new CrankAccount(program, keypair.publicKey);\n          cranks.push({\n            account,\n          });\n        }\n      }\n    }\n\n    const oracles: Array<OracleDefinition> = [];\n    if ('oracles' in obj && Array.isArray(obj.oracles)) {\n      for (const oracle of obj.oracles ?? []) {\n        let account: OracleAccount | undefined = undefined;\n        if ('publicKey' in oracle) {\n          account = new OracleAccount(program, oracle.publicKey);\n        } else if (\n          'stakingWalletKeypair' in oracle &&\n          typeof oracle.stakingWalletKeypair === 'string' &&\n          isKeypairString(oracle.stakingWalletKeypair)\n        ) {\n          const keypair = Keypair.fromSecretKey(\n            new Uint8Array(JSON.parse(oracle.stakingWalletKeypair))\n          );\n          [account] = OracleAccount.fromSeed(\n            program,\n            queueAccount.publicKey,\n            keypair.publicKey\n          );\n        }\n\n        if (account) {\n          const [permissionAccount, permissionBump] =\n            PermissionAccount.fromSeed(\n              program,\n              queueAuthority,\n              queueAccount.publicKey,\n              account.publicKey\n            );\n          oracles.push({\n            account,\n            permission: {\n              account: permissionAccount,\n              bump: permissionBump,\n            },\n          });\n        }\n      }\n    }\n\n    const aggregators: Array<AggregatorDefinition> = [];\n    if ('aggregators' in obj && Array.isArray(obj.aggregators)) {\n      for (const aggregator of obj.aggregators ?? []) {\n        let account: AggregatorAccount | undefined = undefined;\n        if ('publicKey' in aggregator) {\n          account = new AggregatorAccount(program, aggregator.publicKey);\n        } else if (\n          'keypair' in aggregator &&\n          typeof aggregator.keypair === 'string' &&\n          isKeypairString(aggregator.keypair)\n        ) {\n          const keypair = Keypair.fromSecretKey(\n            new Uint8Array(JSON.parse(aggregator.keypair))\n          );\n          account = new AggregatorAccount(program, keypair.publicKey);\n        }\n\n        if (account) {\n          const [permissionAccount, permissionBump] =\n            PermissionAccount.fromSeed(\n              program,\n              queueAuthority,\n              queueAccount.publicKey,\n              account.publicKey\n            );\n\n          const [leaseAccount, leaseBump] = LeaseAccount.fromSeed(\n            program,\n            queueAccount.publicKey,\n            account.publicKey\n          );\n\n          aggregators.push({\n            account,\n            permission: {\n              account: permissionAccount,\n              bump: permissionBump,\n            },\n            lease: {\n              account: leaseAccount,\n              bump: leaseBump,\n            },\n          });\n        }\n      }\n    }\n\n    const vrfs: Array<VrfDefinition> = [];\n    if ('vrfs' in obj && Array.isArray(obj.vrfs)) {\n      for (const vrf of obj.vrfs ?? []) {\n        let account: VrfAccount | undefined = undefined;\n        if ('publicKey' in vrf) {\n          account = new VrfAccount(program, vrf.publicKey);\n        } else if (\n          'keypair' in vrf &&\n          typeof vrf.keypair === 'string' &&\n          isKeypairString(vrf.keypair)\n        ) {\n          const keypair = Keypair.fromSecretKey(\n            new Uint8Array(JSON.parse(vrf.keypair))\n          );\n          account = new VrfAccount(program, keypair.publicKey);\n        }\n\n        if (account) {\n          const [permissionAccount, permissionBump] =\n            PermissionAccount.fromSeed(\n              program,\n              queueAuthority,\n              queueAccount.publicKey,\n              account.publicKey\n            );\n          vrfs.push({\n            account,\n            permission: {\n              account: permissionAccount,\n              bump: permissionBump,\n            },\n          });\n        }\n      }\n    }\n\n    const bufferRelayers: Array<BufferRelayerDefinition> = [];\n    if ('bufferRelayers' in obj && Array.isArray(obj.bufferRelayers)) {\n      for (const bufferRelayer of obj.bufferRelayers ?? []) {\n        let account: BufferRelayerAccount | undefined = undefined;\n        if ('publicKey' in bufferRelayer) {\n          account = new BufferRelayerAccount(program, bufferRelayer.publicKey);\n        } else if (\n          'keypair' in bufferRelayer &&\n          typeof bufferRelayer.keypair === 'string' &&\n          isKeypairString(bufferRelayer.keypair)\n        ) {\n          const keypair = Keypair.fromSecretKey(\n            new Uint8Array(JSON.parse(bufferRelayer.keypair))\n          );\n          account = new BufferRelayerAccount(program, keypair.publicKey);\n        }\n\n        if (account) {\n          const [permissionAccount, permissionBump] =\n            PermissionAccount.fromSeed(\n              program,\n              queueAuthority,\n              queueAccount.publicKey,\n              account.publicKey\n            );\n          bufferRelayers.push({\n            account,\n            permission: {\n              account: permissionAccount,\n              bump: permissionBump,\n            },\n          });\n        }\n      }\n    }\n\n    return new SwitchboardNetwork({\n      programState,\n      queue,\n      oracles,\n      cranks,\n      aggregators,\n      vrfs,\n      bufferRelayers,\n    });\n  }\n\n  /**\n   * Load the associated accounts and states for a given {@linkcode QueueAccount}.\n   *\n   * Basic usage example:\n   *\n   * ```ts\n   * const network = await SwitchboardNetwork.fromQueue(queueAccount);\n   * fs.writeFileSync(\"MyQueue.json\", JSON.stringify(network.toJSON(), undefined, 2));\n   * ```\n   */\n  static async fromQueue(\n    queueAccount: QueueAccount\n  ): Promise<LoadedSwitchboardNetwork> {\n    const program = queueAccount.program;\n\n    const accounts = await program.getProgramAccounts();\n\n    const programStateAccounts = Array.from(accounts.programState);\n    if (programStateAccounts.length < 1) {\n      throw new Error(`Failed to find programState account`);\n    }\n    const [programStateAccount, programStateBump] =\n      ProgramStateAccount.fromSeed(program);\n    const programStateAccountDefinition: LoadedProgramStateDefinition = {\n      account: programStateAccount,\n      bump: programStateBump,\n      state: programStateAccounts[0][1],\n    };\n\n    const queue = accounts.queues.get(queueAccount.publicKey.toBase58());\n    if (!queue) {\n      throw new Error(`Failed to find queue in program accounts`);\n    }\n\n    const queueDefinition: LoadedQueueDefinition = {\n      account: queueAccount,\n      state: queue,\n    };\n\n    const jobPublicKeys: Array<PublicKey> = [];\n\n    // filter cranks\n    const cranks: Array<LoadedCrankDefinition> = Array.from(accounts.cranks)\n      .filter(([crankKey, crank]) =>\n        crank.queuePubkey.equals(queueAccount.publicKey)\n      )\n      .map(([crankKey, crank]) => {\n        return {\n          account: new CrankAccount(program, crankKey),\n          state: crank,\n          dataBuffer: crank.dataBuffer,\n        };\n      });\n\n    // filter oracles\n    const oracles: Array<LoadedOracleDefinition> = Array.from(accounts.oracles)\n      .filter(([oracleKey, oracle]) =>\n        oracle.queuePubkey.equals(queueAccount.publicKey)\n      )\n      .map(([oracleKey, oracle]): LoadedOracleDefinition | undefined => {\n        const oracleAccount = new OracleAccount(program, oracleKey);\n        const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n          program,\n          queue.authority,\n          queueAccount.publicKey,\n          oracleAccount.publicKey\n        );\n        const permission = accounts.permissions.get(\n          permissionAccount.publicKey.toBase58()\n        );\n        if (!permission) {\n          return undefined;\n        }\n        return {\n          account: oracleAccount,\n          state: oracle,\n          permission: {\n            account: permissionAccount,\n            bump: permissionBump,\n            state: permission,\n          },\n        };\n      })\n      .filter(Boolean) as Array<LoadedOracleDefinition>;\n\n    const aggregators: Array<LoadedAggregatorDefinition> = Array.from(\n      accounts.aggregators\n    )\n      .filter(([aggregatorKey, aggregator]) =>\n        aggregator.queuePubkey.equals(queueAccount.publicKey)\n      )\n      .map(\n        ([aggregatorKey, aggregator]):\n          | LoadedAggregatorDefinition\n          | undefined => {\n          const aggregatorAccount = new AggregatorAccount(\n            program,\n            aggregatorKey\n          );\n          const [permissionAccount, permissionBump] =\n            PermissionAccount.fromSeed(\n              program,\n              queue.authority,\n              queueAccount.publicKey,\n              aggregatorAccount.publicKey\n            );\n          const permission = accounts.permissions.get(\n            permissionAccount.publicKey.toBase58()\n          );\n          if (!permission) {\n            return undefined;\n          }\n          const [leaseAccount, leaseBump] = LeaseAccount.fromSeed(\n            program,\n            queueAccount.publicKey,\n            aggregatorAccount.publicKey\n          );\n          const lease = accounts.leases.get(leaseAccount.publicKey.toBase58());\n          if (!lease) {\n            return undefined;\n          }\n          // push jobs to filter job definitions\n          jobPublicKeys.push(\n            ...aggregator.jobPubkeysData.slice(0, aggregator.jobPubkeysSize)\n          );\n          return {\n            account: aggregatorAccount,\n            state: aggregator,\n            permission: {\n              account: permissionAccount,\n              bump: permissionBump,\n              state: permission,\n            },\n            lease: {\n              account: leaseAccount,\n              bump: leaseBump,\n              state: lease,\n            },\n          };\n        }\n      )\n      .filter(Boolean) as Array<LoadedAggregatorDefinition>;\n\n    // filter vrfs\n    const vrfs: Array<LoadedVrfDefinition> = Array.from(accounts.vrfs)\n      .filter(([vrfKey, vrf]) => vrf.oracleQueue.equals(queueAccount.publicKey))\n      .map(([vrfKey, vrf]): LoadedVrfDefinition | undefined => {\n        const vrfAccount = new VrfAccount(program, vrfKey);\n        const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n          program,\n          queue.authority,\n          queueAccount.publicKey,\n          vrfAccount.publicKey\n        );\n        const permission = accounts.permissions.get(\n          permissionAccount.publicKey.toBase58()\n        );\n        if (!permission) {\n          return undefined;\n        }\n        return {\n          account: vrfAccount,\n          state: vrf,\n          permission: {\n            account: permissionAccount,\n            bump: permissionBump,\n            state: permission,\n          },\n        };\n      })\n      .filter(Boolean) as Array<LoadedVrfDefinition>;\n\n    // filter buffer relayers\n    const bufferRelayers: Array<LoadedBufferRelayerDefinition> = Array.from(\n      accounts.bufferRelayers\n    )\n      .filter(([bufferRelayerKey, bufferRelayer]) =>\n        bufferRelayer.queuePubkey.equals(queueAccount.publicKey)\n      )\n      .map(\n        ([bufferRelayerKey, bufferRelayer]):\n          | LoadedBufferRelayerDefinition\n          | undefined => {\n          const bufferRelayerAccount = new BufferRelayerAccount(\n            program,\n            bufferRelayerKey\n          );\n          const [permissionAccount, permissionBump] =\n            PermissionAccount.fromSeed(\n              program,\n              queue.authority,\n              queueAccount.publicKey,\n              bufferRelayerAccount.publicKey\n            );\n          const permission = accounts.permissions.get(\n            permissionAccount.publicKey.toBase58()\n          );\n          if (!permission) {\n            return undefined;\n          }\n          jobPublicKeys.push(bufferRelayer.jobPubkey);\n          return {\n            account: bufferRelayerAccount,\n            state: bufferRelayer,\n            permission: {\n              account: permissionAccount,\n              bump: permissionBump,\n              state: permission,\n            },\n          };\n        }\n      )\n      .filter(Boolean) as Array<LoadedBufferRelayerDefinition>;\n\n    const jobs: Array<LoadedJobDefinition> = Array.from(accounts.jobs)\n      .filter(\n        ([jobKey]) =>\n          jobPublicKeys.findIndex(j => j.equals(new PublicKey(jobKey))) !== -1\n      )\n      .map(([jobKey, job]): LoadedJobDefinition | undefined => {\n        const jobAccount = new JobAccount(program, jobKey);\n        let oracleJob: OracleJob;\n        try {\n          oracleJob = OracleJob.decodeDelimited(job.data);\n        } catch {\n          oracleJob = OracleJob.fromObject({ tasks: [] });\n        }\n\n        return {\n          account: jobAccount,\n          state: job,\n          job: oracleJob,\n        };\n      })\n      .filter(Boolean) as Array<LoadedJobDefinition>;\n\n    return new LoadedSwitchboardNetwork({\n      programState: programStateAccountDefinition,\n      queue: queueDefinition,\n      cranks,\n      oracles,\n      aggregators,\n      vrfs,\n      bufferRelayers,\n      jobs,\n    });\n  }\n}\n\n/** LOADED ACCOUNTS */\n\n/** The queue and associated accounts for the newly created Switchboard network. */\nexport interface ILoadedSwitchboardNetwork extends ISwitchboardNetwork {\n  /** The {@linkcode ProgramStateAccount} and PDA bump. */\n  programState: LoadedProgramStateDefinition;\n  /** The {@linkcode QueueAccount} for the newly created Switchboard network. */\n  queue: LoadedQueueDefinition;\n  /** The {@linkcode CrankAccount}s for the newly created Switchboard network. */\n  cranks: Array<LoadedCrankDefinition>;\n  oracles: Array<LoadedOracleDefinition>;\n  aggregators: Array<LoadedAggregatorDefinition>;\n  vrfs: Array<LoadedVrfDefinition>;\n  bufferRelayers: Array<LoadedBufferRelayerDefinition>;\n  jobs: Array<LoadedJobDefinition>;\n}\n\nexport class LoadedSwitchboardNetwork implements ILoadedSwitchboardNetwork {\n  programState: LoadedProgramStateDefinition;\n  queue: LoadedQueueDefinition;\n  /** The {@linkcode CrankAccount}s for the newly created Switchboard network. */\n  cranks: Array<LoadedCrankDefinition>;\n  oracles: Array<LoadedOracleDefinition>;\n  aggregators: Array<LoadedAggregatorDefinition>;\n  vrfs: Array<LoadedVrfDefinition>;\n  bufferRelayers: Array<LoadedBufferRelayerDefinition>;\n  jobs: Array<LoadedJobDefinition>;\n\n  get program(): SwitchboardProgram {\n    return this.queue.account.program;\n  }\n\n  constructor(fields: ILoadedSwitchboardNetwork) {\n    this.programState = fields.programState;\n    this.queue = fields.queue;\n    this.cranks = fields.cranks;\n    this.oracles = fields.oracles;\n    this.aggregators = fields.aggregators;\n    this.vrfs = fields.vrfs;\n    this.bufferRelayers = fields.bufferRelayers;\n    this.jobs = fields.jobs;\n  }\n\n  getJob(jobPubkey: PublicKey): LoadedJobDefinition | undefined {\n    return this.jobs.find(job => job.account.publicKey.equals(jobPubkey));\n  }\n\n  getJobs(jobPubkeys: Array<PublicKey>): Array<LoadedJobDefinition> {\n    return jobPubkeys\n      .map(jobPubkey => this.getJob(jobPubkey))\n      .filter(Boolean) as Array<LoadedJobDefinition>;\n  }\n\n  toJSON() {\n    return {\n      programState: {\n        publicKey: this.programState.account.publicKey.toBase58(),\n        authority: this.programState.state.authority.toBase58(),\n        state: this.programState.state.toJSON(),\n      },\n      queue: {\n        publicKey: this.queue.account.publicKey.toBase58(),\n        authority: this.queue.state.authority.toBase58(),\n        state: this.queue.state.toJSON(),\n      },\n      cranks: this.cranks.map(crank => {\n        return {\n          publicKey: crank.account.publicKey.toBase58(),\n          state: crank.state.toJSON(),\n        };\n      }),\n      oracles: this.oracles.map(oracle => {\n        return {\n          publicKey: oracle.account.publicKey.toBase58(),\n          authority: oracle.state.oracleAuthority.toBase58(),\n          state: oracle.state.toJSON(),\n          permission: {\n            publicKey: oracle.permission.account.publicKey.toBase58(),\n            bump: oracle.permission.bump,\n            state: oracle.permission.state.toJSON(),\n          },\n        };\n      }),\n      aggregators: this.aggregators.map(aggregator => {\n        return {\n          publicKey: aggregator.account.publicKey.toBase58(),\n          authority: aggregator.state.authority.toBase58(),\n          state: {\n            ...aggregator.state.toJSON(),\n            reserved1: undefined,\n            previousConfirmedRoundResult:\n              aggregator.state.previousConfirmedRoundResult.toBig(),\n            jobPubkeysData: aggregator.state.jobPubkeysData.slice(\n              0,\n              aggregator.state.jobPubkeysSize\n            ),\n            jobHashes: aggregator.state.jobHashes.slice(\n              0,\n              aggregator.state.jobPubkeysSize\n            ),\n            currentRound: undefined,\n            latestConfirmedRound: undefined,\n            ebuf: undefined,\n          },\n          permission: {\n            publicKey: aggregator.permission.account.publicKey.toBase58(),\n            bump: aggregator.permission.bump,\n            state: aggregator.permission.state.toJSON(),\n          },\n          lease: {\n            publicKey: aggregator.lease.account.publicKey.toBase58(),\n            bump: aggregator.lease.bump,\n            state: aggregator.lease.state.toJSON(),\n          },\n          jobs: this.getJobs(\n            aggregator.state.jobPubkeysData.slice(\n              0,\n              aggregator.state.jobPubkeysSize\n            )\n          ).map(job => {\n            return {\n              publicKey: job.account.publicKey.toBase58(),\n              authority: job.state.authority.toBase58(),\n              state: job.state,\n              data: job.job.toJSON(),\n            };\n          }),\n        };\n      }),\n      vrfs: this.vrfs.map(vrf => {\n        return {\n          publicKey: vrf.account.publicKey.toBase58(),\n          authority: vrf.state.authority.toBase58(),\n          state: {\n            ...vrf.state.toJSON(),\n            callback: {\n              ...vrf.state.callback.toJSON(),\n              accounts: vrf.state.callback.accounts\n                .slice(0, vrf.state.callback.accountsLen)\n                .map(a => a.toJSON()),\n              ixData: `[${new Uint8Array(\n                vrf.state.callback.ixData.slice(0, vrf.state.callback.ixDataLen)\n              )}]`,\n            },\n            ebuf: undefined,\n            builders: undefined,\n          },\n          permission: {\n            publicKey: vrf.permission.account.publicKey.toBase58(),\n            bump: vrf.permission.bump,\n            state: vrf.permission.state.toJSON(),\n          },\n        };\n      }),\n      bufferRelayers: this.bufferRelayers.map(bufferRelayer => {\n        const job = this.getJob(bufferRelayer.state.jobPubkey);\n        return {\n          publicKey: bufferRelayer.account.publicKey.toBase58(),\n          authority: bufferRelayer.state.authority.toBase58(),\n          state: {\n            ...bufferRelayer.state.toJSON(),\n            currentRound: undefined,\n            latestConfirmedRound: undefined,\n          },\n          permission: {\n            publicKey: bufferRelayer.permission.account.publicKey.toBase58(),\n            bump: bufferRelayer.permission.bump,\n            state: bufferRelayer.permission.state.toJSON(),\n          },\n          job: {\n            publicKey: job?.account.publicKey.toBase58(),\n            authority: job?.state.authority.toBase58(),\n            state: job?.state,\n            data: job?.job.toJSON(),\n          },\n        };\n      }),\n    };\n  }\n}\n"]}
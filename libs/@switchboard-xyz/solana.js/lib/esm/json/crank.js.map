{"version":3,"file":"crank.js","sourceRoot":"","sources":["../../../src/json/crank.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AAEvC,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,SAAS,CAAC;AAEpE,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAE1C,MAAM,OAAO,SAAS;IAUpB,YAAY,MAA2B;QACrC,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;QAC5C,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;QACpD,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,MAAM,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;QAEnD,WAAW;QACX,MAAM,WAAW,GAAG,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QACnD,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QAE3E,MAAM,cAAc,GAAG,WAAW,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC;QAChE,IAAI,CAAC,iBAAiB,GAAG,cAAc;YACrC,CAAC,CAAC,WAAW,CAAC,cAAc,CAAC;YAC7B,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,MAA2B;QAC7C,MAAM,UAAU,GAAqB,EAAE,CAAC;QACxC,IAAI,QAAQ,IAAI,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;YACtD,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,MAAM,EAAE;gBACjC,IAAI,SAAS,IAAI,KAAK,EAAE;oBACtB,UAAU,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;iBACvC;aACF;SACF;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,MAAM;QACJ,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,OAAO,EAAE,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC;YACtC,iBAAiB,EAAE,eAAe,CAAC,IAAI,CAAC,iBAAiB,CAAC;SAC3D,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { CreateQueueCrankParams } from '../accounts';\nimport { loadKeypair } from '../utils';\n\nimport { keypairToString, parseNumber, parseString } from './utils';\n\nimport { Keypair } from '@solana/web3.js';\n\nexport class CrankJson implements CreateQueueCrankParams {\n  // crank params\n  name: string;\n  metadata: string;\n  maxRows: number;\n\n  // accounts\n  keypair: Keypair;\n  dataBufferKeypair: Keypair;\n\n  constructor(object: Record<string, any>) {\n    this.name = parseString(object, 'name', '');\n    this.metadata = parseString(object, 'metadata', '');\n    this.maxRows = parseNumber(object, 'maxRows', 100);\n\n    // accounts\n    const keypairPath = parseString(object, 'keypair');\n    this.keypair = keypairPath ? loadKeypair(keypairPath) : Keypair.generate();\n\n    const dataBufferPath = parseString(object, 'dataBufferKeypair');\n    this.dataBufferKeypair = dataBufferPath\n      ? loadKeypair(dataBufferPath)\n      : Keypair.generate();\n  }\n\n  static loadMultiple(object: Record<string, any>): Array<CrankJson> {\n    const crankJsons: Array<CrankJson> = [];\n    if ('cranks' in object && Array.isArray(object.cranks)) {\n      for (const crank of object.cranks) {\n        if ('maxRows' in crank) {\n          crankJsons.push(new CrankJson(crank));\n        }\n      }\n    }\n\n    return crankJsons;\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      metadata: this.metadata,\n      maxRows: this.maxRows,\n      keypair: keypairToString(this.keypair),\n      dataBufferKeypair: keypairToString(this.dataBufferKeypair),\n    };\n  }\n}\n"]}
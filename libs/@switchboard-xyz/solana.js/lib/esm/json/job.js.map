{"version":3,"file":"job.js","sourceRoot":"","sources":["../../../src/json/job.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AAEvC,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,SAAS,CAAC;AAEpE,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAC1C,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AAEpD,MAAM,OAAO,OAAO;IAYlB,YAAY,MAA2B;QACrC,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;QAC/C,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,MAAM,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;QAEvD,IAAI,CAAC,CAAC,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACxD,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;SAC5D;QAED,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;QAEzD,MAAM,WAAW,GAAG,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QACnD,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QAE3E,MAAM,aAAa,GAAG,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QACvD,IAAI,CAAC,SAAS,GAAG,aAAa,CAAC,CAAC,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC1E,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,MAA2B;QAC7C,MAAM,QAAQ,GAAmB,EAAE,CAAC;QACpC,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YAClD,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,EAAE;gBAC7B,QAAQ,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;aACjC;SACF;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,MAAM;QACJ,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,OAAO,EAAE,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC;YACtC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS;YACvE,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;SACzB,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { loadKeypair } from '../utils';\n\nimport { keypairToString, parseNumber, parseString } from './utils';\n\nimport { Keypair } from '@solana/web3.js';\nimport { OracleJob } from '@switchboard-xyz/common';\n\nexport class JobJson {\n  // params\n  name: string;\n  weight: number;\n  expiration: number;\n  job: OracleJob;\n  data: Uint8Array;\n\n  // accounts\n  keypair: Keypair;\n  authority?: Keypair;\n\n  constructor(object: Record<string, any>) {\n    this.name = parseString(object, 'name', '');\n    this.weight = parseNumber(object, 'weight', 1);\n    this.expiration = parseNumber(object, 'expiration', 0);\n\n    if (!('tasks' in object) || !Array.isArray(object.tasks)) {\n      throw new Error(`Job definitions require a 'tasks' array`);\n    }\n\n    this.job = OracleJob.fromObject(object);\n    this.data = OracleJob.encodeDelimited(this.job).finish();\n\n    const keypairPath = parseString(object, 'keypair');\n    this.keypair = keypairPath ? loadKeypair(keypairPath) : Keypair.generate();\n\n    const authorityPath = parseString(object, 'authority');\n    this.authority = authorityPath ? loadKeypair(authorityPath) : undefined;\n  }\n\n  static loadMultiple(object: Record<string, any>): Array<JobJson> {\n    const jobJsons: Array<JobJson> = [];\n    if ('jobs' in object && Array.isArray(object.jobs)) {\n      for (const job of object.jobs) {\n        jobJsons.push(new JobJson(job));\n      }\n    }\n\n    return jobJsons;\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      weight: this.weight,\n      expiration: this.expiration,\n      keypair: keypairToString(this.keypair),\n      authority: this.authority ? keypairToString(this.authority) : undefined,\n      tasks: this.job.toJSON(),\n    };\n  }\n}\n"]}
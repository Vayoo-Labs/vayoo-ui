{"version":3,"file":"vrf.js","sourceRoot":"","sources":["../../../src/json/vrf.ts"],"names":[],"mappings":"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","sourcesContent":["import { Callback, CreateQueueVrfParams } from '../accounts';\nimport { Callback as CallbackJson } from '../generated';\nimport { loadKeypair } from '../utils';\n\nimport { keypairToString, parseBoolean, parseString } from './utils';\n\nimport { AccountMeta, Keypair, PublicKey } from '@solana/web3.js';\n\nexport type IVrfJson = Omit<CreateQueueVrfParams, 'callback'> & {\n  callback: Callback;\n};\n\nexport class VrfJson implements IVrfJson {\n  // vrf params\n  callback: Callback;\n\n  // permission params\n  enable: boolean;\n\n  // accounts\n  vrfKeypair: Keypair;\n  authorityKeypair?: Keypair;\n  authority?: PublicKey;\n\n  constructor(object: Record<string, any>) {\n    if (!('callback' in object)) {\n      throw new Error(`VRF has no callback defined`);\n    }\n    const callbackJson = CallbackJson.fromJSON(object.callback);\n    this.callback = {\n      programId: callbackJson.programId,\n      accounts: callbackJson.accounts.map((a): AccountMeta => {\n        return {\n          pubkey: a.pubkey,\n          isSigner: a.isSigner,\n          isWritable: a.isWritable,\n        };\n      }),\n      ixData: Buffer.from(callbackJson.ixData),\n    };\n\n    // permissions\n    this.enable = parseBoolean(object, 'enable', false);\n\n    // accounts\n    const keypairPath = parseString(object, 'keypair');\n    this.vrfKeypair = keypairPath\n      ? loadKeypair(keypairPath)\n      : Keypair.generate();\n\n    if ('authorityKeypair' in object) {\n      const authorityPath = parseString(object, 'authorityKeypair');\n      this.authorityKeypair = authorityPath\n        ? loadKeypair(authorityPath)\n        : undefined;\n      this.authority = this.authorityKeypair\n        ? this.authorityKeypair.publicKey\n        : undefined;\n    } else if ('authority' in object) {\n      if (typeof object.authority !== 'string') {\n        throw new Error(`Vrf authority field should be a string`);\n      }\n      this.authority = new PublicKey(object.authority);\n    }\n  }\n\n  static loadMultiple(object: Record<string, any>): Array<VrfJson> {\n    const vrfJsons: Array<VrfJson> = [];\n    if ('vrfs' in object && Array.isArray(object.vrfs)) {\n      for (const vrf of object.vrfs) {\n        vrfJsons.push(new VrfJson(vrf));\n      }\n    }\n\n    return vrfJsons;\n  }\n\n  toJSON() {\n    return {\n      callback: {\n        programId: this.callback.programId.toBase58(),\n        accounts: this.callback.accounts\n          .filter(a => !a.pubkey.equals(PublicKey.default))\n          .map(a => {\n            return {\n              pubkey: a.pubkey.toBase58(),\n              isSigner: a.isSigner,\n              isWritable: a.isWritable,\n            };\n          }),\n        isData: `[${new Uint8Array(this.callback.ixData)}]`,\n      },\n      keypair: keypairToString(this.vrfKeypair),\n      authority: this.authority?.toBase58() ?? undefined,\n      authorityKeypair: this.authorityKeypair\n        ? keypairToString(this.authorityKeypair)\n        : undefined,\n    };\n  }\n}\n"]}
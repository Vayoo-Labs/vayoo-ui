{"version":3,"file":"mint.js","sourceRoot":"","sources":["../../src/mint.ts"],"names":[],"mappings":"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","sourcesContent":["import { InsufficientFundsError, NativeMintOnlyError } from './errors';\nimport { SwitchboardDecimal } from './generated';\nimport { TransactionObject } from './TransactionObject';\n\nimport * as anchor from '@coral-xyz/anchor';\nimport * as spl from '@solana/spl-token';\nimport {\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport { Big, BN } from '@switchboard-xyz/common';\n\nexport class Mint {\n  public static native = new PublicKey(\n    'So11111111111111111111111111111111111111112'\n  );\n\n  constructor(\n    readonly provider: anchor.AnchorProvider,\n    readonly mint: spl.Mint\n  ) {}\n\n  get address() {\n    return this.mint.address;\n  }\n\n  get connection() {\n    return this.provider.connection;\n  }\n\n  public static async load(\n    provider: anchor.AnchorProvider,\n    mint = Mint.native\n  ): Promise<Mint> {\n    const splMint = await spl.getMint(provider.connection, mint);\n    return new Mint(provider, splMint);\n  }\n\n  toTokenAmount(amount: number): bigint {\n    const big = new Big(amount);\n    const tokenAmount = big.mul(new Big(10).pow(this.mint.decimals));\n    // We need to fix tokenAmount to 0 decimal places because the amount in base units must be an integer.\n    return BigInt(tokenAmount.toFixed(0));\n  }\n\n  toTokenAmountBN(amount: number): BN {\n    const big = new Big(amount);\n    const tokenAmount = big.mul(new Big(10).pow(this.mint.decimals));\n    return new BN(tokenAmount.toFixed(0));\n  }\n\n  fromTokenAmount(amount: bigint): number {\n    const swbDecimal = new SwitchboardDecimal({\n      mantissa: new BN(amount.toString()),\n      scale: this.mint.decimals,\n    });\n    return swbDecimal.toBig().toNumber();\n  }\n\n  fromTokenAmountBN(amount: BN): number {\n    const swbDecimal = new SwitchboardDecimal({\n      mantissa: amount,\n      scale: this.mint.decimals,\n    });\n    return swbDecimal.toBig().toNumber();\n  }\n\n  public async getAssociatedAccount(\n    owner: PublicKey\n  ): Promise<spl.Account | null> {\n    const ownerTokenAddress = this.getAssociatedAddress(owner);\n    const ownerTokenAccountInfo = await this.provider.connection.getAccountInfo(\n      ownerTokenAddress\n    );\n    if (ownerTokenAccountInfo === null) return null;\n    const account = spl.unpackAccount(ownerTokenAddress, ownerTokenAccountInfo);\n    return account;\n  }\n\n  public async getAssociatedBalance(owner: PublicKey): Promise<number | null> {\n    const ownerAccount = await this.getAssociatedAccount(owner);\n    if (ownerAccount === null) return null;\n    return this.fromTokenAmount(ownerAccount.amount);\n  }\n\n  public async getAccount(\n    tokenAddress: PublicKey\n  ): Promise<spl.Account | null> {\n    const tokenAccountInfo = await this.provider.connection.getAccountInfo(\n      tokenAddress\n    );\n    if (!tokenAccountInfo) return null;\n    const account = spl.unpackAccount(tokenAddress, tokenAccountInfo);\n    return account;\n  }\n\n  public async fetchBalance(tokenAddress: PublicKey): Promise<number | null> {\n    const tokenAccount = await this.getAccount(tokenAddress);\n    if (tokenAccount === null) return null;\n    return this.fromTokenAmount(tokenAccount.amount);\n  }\n\n  public async fetchBalanceBN(tokenAddress: PublicKey): Promise<BN | null> {\n    const tokenAccount = await this.getAccount(tokenAddress);\n    if (tokenAccount === null) return null;\n    return new BN(tokenAccount.amount.toString(10));\n  }\n\n  public getAssociatedAddress(user: PublicKey): PublicKey {\n    return Mint.getAssociatedAddress(user, this.mint.address);\n  }\n\n  public static getAssociatedAddress(\n    owner: PublicKey,\n    mint: PublicKey\n  ): PublicKey {\n    const [associatedToken] = PublicKey.findProgramAddressSync(\n      [owner.toBuffer(), spl.TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      spl.ASSOCIATED_TOKEN_PROGRAM_ID\n    );\n    return associatedToken;\n  }\n\n  public async getOrCreateAssociatedUser(\n    payer: PublicKey,\n    user?: PublicKey\n  ): Promise<PublicKey> {\n    const owner = user ?? payer;\n    const associatedToken = this.getAssociatedAddress(owner);\n    const accountInfo = await this.connection.getAccountInfo(associatedToken);\n    if (accountInfo === null) {\n      await this.createAssocatedUser(payer, user);\n      return associatedToken;\n    } else {\n      return associatedToken;\n    }\n  }\n\n  public async createAssocatedUser(\n    payer: PublicKey,\n    user?: PublicKey\n  ): Promise<[PublicKey, string]> {\n    const [txn, associatedToken] = this.createAssocatedUserInstruction(\n      payer,\n      user\n    );\n    const sig = await this.signAndSend(txn);\n\n    return [associatedToken, sig];\n  }\n\n  public static createAssocatedUserInstruction(\n    payer: PublicKey,\n    mint: PublicKey,\n    user?: PublicKey\n  ): [TransactionObject, PublicKey] {\n    const owner = user ?? payer;\n    const associatedToken = Mint.getAssociatedAddress(owner, mint);\n    const ixn = spl.createAssociatedTokenAccountInstruction(\n      payer,\n      associatedToken,\n      owner,\n      Mint.native\n    );\n    return [new TransactionObject(payer, [ixn], []), associatedToken];\n  }\n\n  public createAssocatedUserInstruction(\n    payer: PublicKey,\n    user?: PublicKey\n  ): [TransactionObject, PublicKey] {\n    return Mint.createAssocatedUserInstruction(payer, this.mint.address, user);\n  }\n\n  public static createUserInstruction(\n    payer: PublicKey,\n    mint: PublicKey,\n    user?: Keypair\n  ): [PublicKey, TransactionObject] {\n    const owner = user ? user.publicKey : payer;\n    const account = Mint.getAssociatedAddress(owner, mint);\n    const ixn = spl.createInitializeAccountInstruction(\n      account,\n      Mint.native,\n      owner\n    );\n    return [account, new TransactionObject(payer, [ixn], [])];\n  }\n\n  public createUserInstruction(\n    payer: PublicKey,\n    user?: Keypair\n  ): [PublicKey, TransactionObject] {\n    return Mint.createUserInstruction(payer, this.mint.address, user);\n  }\n\n  public async createUser(\n    payer: PublicKey,\n    user?: Keypair\n  ): Promise<[PublicKey, string]> {\n    const [account, txn] = this.createUserInstruction(payer, user);\n    const sig = await this.signAndSend(txn);\n    return [account, sig];\n  }\n\n  public async signAndSend(\n    txn: TransactionObject,\n    opts: anchor.web3.ConfirmOptions = {\n      skipPreflight: false,\n      maxRetries: 10,\n    }\n  ): Promise<TransactionSignature> {\n    const blockhash = await this.connection.getLatestBlockhash();\n    const txnSignature = await this.provider.sendAndConfirm(\n      await this.provider.wallet.signTransaction(txn.toTxn(blockhash)),\n      txn.signers,\n      opts\n    );\n    return txnSignature;\n  }\n}\n\nexport class NativeMint extends Mint {\n  public static address = Mint.native;\n\n  public static async load(\n    provider: anchor.AnchorProvider\n  ): Promise<NativeMint> {\n    const splMint = await spl.getMint(provider.connection, Mint.native);\n    return new NativeMint(provider, splMint);\n  }\n\n  public async getOrCreateWrappedUser(\n    payer: PublicKey,\n    params:\n      | {\n          amount: number;\n        }\n      | { fundUpTo: number },\n    user?: Keypair\n  ): Promise<[PublicKey, TransactionSignature | undefined]> {\n    const [userAddress, userInit] =\n      await this.getOrCreateWrappedUserInstructions(payer, params, user);\n    if (userInit && userInit.ixns.length > 0) {\n      const signature = await this.signAndSend(userInit);\n      return [userAddress, signature];\n    }\n\n    return [userAddress, undefined];\n  }\n\n  public async getOrCreateWrappedUserInstructions(\n    payer: PublicKey,\n    params:\n      | {\n          amount: number;\n        }\n      | { fundUpTo: number },\n    user?: Keypair\n  ): Promise<[PublicKey, TransactionObject | undefined]> {\n    const owner = user ? user.publicKey : payer;\n    const associatedToken = Mint.getAssociatedAddress(\n      owner,\n      NativeMint.address\n    );\n    const accountInfo = await this.connection.getAccountInfo(associatedToken);\n\n    if (accountInfo === null) {\n      const amount =\n        'fundUpTo' in params\n          ? params.fundUpTo\n          : 'amount' in params\n          ? params.amount\n          : 0;\n\n      const userInit = (\n        await this.createWrappedUserInstructions(payer, amount, user)\n      )[1];\n\n      return [associatedToken, userInit];\n    } else {\n      if ('fundUpTo' in params) {\n        if (params.fundUpTo < 0) {\n          throw new Error(`fundUpTo must be a positive number`);\n        }\n        if (params.fundUpTo === 0) {\n          return [associatedToken, undefined];\n        }\n        const tokenBalance = (await this.getAssociatedBalance(owner)) ?? 0;\n        if (tokenBalance > (params.fundUpTo ?? 0)) {\n          return [associatedToken, new TransactionObject(payer, [], [])];\n        }\n        const userWrap = await this.wrapInstructions(\n          payer,\n          { fundUpTo: params.fundUpTo ?? 0 },\n          user\n        );\n        return [associatedToken, userWrap];\n      }\n\n      if ('amount' in params) {\n        if (params.amount < 0) {\n          throw new Error(`amount must be a positive number`);\n        }\n        if (params.amount === 0) {\n          return [associatedToken, undefined];\n        }\n        const userWrap = await this.wrapInstructions(\n          payer,\n          { amount: params.amount ?? 0 },\n          user\n        );\n        return [associatedToken, userWrap];\n      }\n    }\n\n    throw new Error(`Failed to getOrCreate the users wrapped SOL account`);\n  }\n\n  public async createWrappedUserInstructions(\n    payer: PublicKey,\n    amount: number,\n    user?: Keypair\n  ): Promise<[PublicKey, TransactionObject]> {\n    const owner = user ? user.publicKey : payer;\n    const associatedAddress = this.getAssociatedAddress(owner);\n    const associatedAccountInfo =\n      this.connection.getAccountInfo(associatedAddress);\n    if (!associatedAccountInfo) {\n      throw new Error(\n        `Associated token address already exists for this user ${owner}`\n      );\n    }\n\n    const ephemeralAccount = Keypair.generate();\n    const ephemeralWallet = this.getAssociatedAddress(\n      ephemeralAccount.publicKey\n    );\n\n    const wrapAmountLamports = this.toTokenAmount(amount);\n\n    return [\n      associatedAddress,\n      new TransactionObject(\n        payer,\n        [\n          spl.createAssociatedTokenAccountInstruction(\n            payer,\n            associatedAddress,\n            owner,\n            Mint.native\n          ),\n          // only wrap funds if needed\n          ...(amount > 0\n            ? [\n                spl.createAssociatedTokenAccountInstruction(\n                  payer,\n                  ephemeralWallet,\n                  ephemeralAccount.publicKey,\n                  spl.NATIVE_MINT\n                ),\n                SystemProgram.transfer({\n                  fromPubkey: owner,\n                  toPubkey: ephemeralWallet,\n                  lamports: wrapAmountLamports,\n                }),\n                spl.createSyncNativeInstruction(ephemeralWallet),\n                spl.createTransferInstruction(\n                  ephemeralWallet,\n                  associatedAddress,\n                  ephemeralAccount.publicKey,\n                  wrapAmountLamports\n                ),\n                spl.createCloseAccountInstruction(\n                  ephemeralWallet,\n                  owner,\n                  ephemeralAccount.publicKey\n                ),\n              ]\n            : []),\n        ],\n        user ? [user, ephemeralAccount] : [ephemeralAccount]\n      ),\n    ];\n  }\n\n  public async createWrappedUser(\n    payer: PublicKey,\n    amount: number,\n    user?: Keypair\n  ): Promise<[PublicKey, TransactionSignature]> {\n    const [tokenAccount, createWrappedUserTxn] =\n      await this.createWrappedUserInstructions(payer, amount, user);\n    const txSignature = await this.signAndSend(createWrappedUserTxn);\n\n    return [tokenAccount, txSignature];\n  }\n\n  public async wrapInstructions(\n    payer: PublicKey,\n    params:\n      | {\n          amount: number;\n        }\n      | { fundUpTo: number },\n    user?: Keypair\n  ): Promise<TransactionObject> {\n    const ixns: TransactionInstruction[] = [];\n\n    const owner = user ? user.publicKey : payer;\n\n    const userBalance = new Big(await this.connection.getBalance(owner));\n\n    const userTokenAddress = this.getAssociatedAddress(owner);\n    const userAccount = await this.getAccount(userTokenAddress);\n    const userTokenBalance =\n      userAccount === null\n        ? new Big(0)\n        : new Big(this.fromTokenAmount(userAccount.amount));\n\n    let wrapAmount: Big;\n    if ('fundUpTo' in params) {\n      if (userTokenBalance.gte(params.fundUpTo)) {\n        return new TransactionObject(payer, [], []);\n      }\n      wrapAmount = new Big(params.fundUpTo).sub(userTokenBalance);\n    } else if ('amount' in params) {\n      wrapAmount = new Big(params.amount);\n    } else {\n      throw new Error(\n        `Must specify fundUpTo or amount to perform this actions`\n      );\n    }\n\n    if (userBalance.lte(wrapAmount)) {\n      throw new InsufficientFundsError(\n        wrapAmount.toNumber(),\n        userBalance.toNumber()\n      );\n    }\n\n    const ephemeralAccount = Keypair.generate();\n    const ephemeralWallet = this.getAssociatedAddress(\n      ephemeralAccount.publicKey\n    );\n\n    const wrapAmountLamports = this.toTokenAmount(wrapAmount.toNumber());\n\n    ixns.push(\n      spl.createAssociatedTokenAccountInstruction(\n        payer,\n        ephemeralWallet,\n        ephemeralAccount.publicKey,\n        spl.NATIVE_MINT\n      ),\n      SystemProgram.transfer({\n        fromPubkey: owner,\n        toPubkey: ephemeralWallet,\n        lamports: wrapAmountLamports,\n      }),\n      spl.createSyncNativeInstruction(ephemeralWallet),\n      spl.createTransferInstruction(\n        ephemeralWallet,\n        userTokenAddress,\n        ephemeralAccount.publicKey,\n        wrapAmountLamports\n      ),\n      spl.createCloseAccountInstruction(\n        ephemeralWallet,\n        owner,\n        ephemeralAccount.publicKey\n      )\n    );\n\n    return new TransactionObject(\n      payer,\n      ixns,\n      user ? [user, ephemeralAccount] : [ephemeralAccount]\n    );\n  }\n\n  public async wrap(\n    payer: PublicKey,\n    params:\n      | {\n          amount: number;\n        }\n      | { fundUpTo: number },\n    user?: Keypair\n  ) {\n    const wrapIxns = await this.wrapInstructions(payer, params, user);\n    const txSignature = await this.signAndSend(wrapIxns);\n\n    return txSignature;\n  }\n\n  public async unwrapInstructions(\n    payer: PublicKey,\n    amount?: number,\n    user?: Keypair\n  ): Promise<TransactionObject> {\n    const owner = user ? user.publicKey : payer;\n\n    const ixns: TransactionInstruction[] = [];\n    const signers: Keypair[] = user ? [user] : [];\n\n    const userAddress = this.getAssociatedAddress(owner);\n\n    if (amount !== undefined && amount > 0) {\n      const ephemeralAccount = Keypair.generate();\n      const ephemeralWallet = this.getAssociatedAddress(\n        ephemeralAccount.publicKey\n      );\n\n      const unwrapAmountLamports = this.toTokenAmount(amount);\n\n      signers.push(ephemeralAccount);\n\n      ixns.push(\n        spl.createAssociatedTokenAccountInstruction(\n          payer,\n          ephemeralWallet,\n          ephemeralAccount.publicKey,\n          Mint.native\n        ),\n        spl.createTransferInstruction(\n          userAddress,\n          ephemeralWallet,\n          owner,\n          unwrapAmountLamports\n        ),\n        spl.createCloseAccountInstruction(\n          ephemeralWallet,\n          owner,\n          ephemeralAccount.publicKey\n        )\n      );\n    } else {\n      ixns.push(spl.createCloseAccountInstruction(userAddress, owner, owner));\n    }\n\n    return new TransactionObject(payer, ixns, signers);\n  }\n\n  public async unwrap(\n    payer: PublicKey,\n    amount?: number,\n    user?: Keypair\n  ): Promise<TransactionSignature> {\n    if (!this.address.equals(Mint.native)) {\n      throw new NativeMintOnlyError();\n    }\n\n    const unwrapTxn = await this.unwrapInstructions(payer, amount, user);\n    const txSignature = await this.signAndSend(unwrapTxn);\n    return txSignature;\n  }\n}\n"]}
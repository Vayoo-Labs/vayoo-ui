{"version":3,"file":"DockerOracle.js","sourceRoot":"","sources":["../../src/DockerOracle.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport os from \"os\";\nimport crypto from \"crypto\";\nimport { sleep } from \"./utils\";\n\nexport interface IDockerConfig {\n  arch?: \"linux/arm64\" | \"linux/amd64\";\n  // extra flags to pass to docker run\n  dockerRunFlags?: Array<string>;\n  // extra env vars\n  envVariables?: Record<string, string>;\n}\n\nexport type IOracleConfig = IDockerConfig & {\n  chain: \"aptos\" | \"near\" | \"solana\";\n  network: \"localnet\" | \"devnet\" | \"testnet\" | \"mainnet\" | \"mainnet-beta\";\n  rpcUrl: string;\n  oracleKey: string;\n  secretPath: string;\n  // task runner config\n  taskRunnerSolanaRpc?: string;\n};\n\nexport class DockerOracle {\n  readonly image: string;\n  readonly arch: \"linux/arm64\" | \"linux/amd64\";\n  readonly dockerRunFlags: Array<string>;\n\n  readonly chain: \"aptos\" | \"near\" | \"solana\";\n  readonly network:\n    | \"localnet\"\n    | \"devnet\"\n    | \"testnet\"\n    | \"mainnet\"\n    | \"mainnet-beta\";\n  readonly envVariables: Record<string, string>;\n  readonly secretPath: string;\n\n  logs: string[] = [];\n  readonly logFile: string;\n\n  dockerOracleProcess?: any;\n  isActive = true;\n  readonly timestamp: number = Date.now();\n\n  onDataCallback: (data: any) => void;\n  onErrorCallback: (error: Error) => void;\n  onCloseCallback: (code: number, signal: NodeJS.Signals) => void;\n\n  private addLog(log: string): void {\n    this.logs.push(log);\n    // flush logs\n    if (this.logs.length > 10) {\n      this.saveLogs();\n    }\n  }\n\n  constructor(\n    readonly nodeImage: string,\n    readonly config: IOracleConfig,\n    readonly switchboardDirectory = path.join(process.cwd(), \".switchboard\"),\n    readonly silent = false\n  ) {\n    DockerOracle.isDockerRunning();\n    // set config\n    this.chain = config.chain;\n    this.network = config.network;\n    this.arch = config.arch ?? \"linux/amd64\";\n\n    this.dockerRunFlags = config.dockerRunFlags ?? [];\n\n    // payer secret (required)\n    this.secretPath = normalizeFsPath(config.secretPath);\n    if (!this.secretPath) {\n      throw new Error(`Payer secret path is required`);\n    }\n    if (!fs.existsSync(this.secretPath)) {\n      throw new Error(`Payer secret path does not exist`);\n    }\n\n    // Set environment variables for docker image\n    this.envVariables = DockerOracle.parseEnvVariables(config);\n\n    // log config\n    if (!fs.existsSync(this.switchboardDirectory)) {\n      fs.mkdirSync(this.switchboardDirectory, { recursive: true });\n    }\n    this.logFile = path.join(\n      this.switchboardDirectory,\n      `docker.${this.nodeImage}.${Math.floor(this.timestamp / 1000)}.log`\n    );\n\n    // build image name from a hash of provided args\n    const shaHash = crypto.createHash(\"sha256\");\n    shaHash.update(\n      Buffer.from(\n        [\n          this.chain,\n          this.network,\n          this.secretPath,\n          this.arch,\n          this.nodeImage,\n        ].join(\" \") + JSON.stringify(this.envVariables)\n      )\n    );\n    const hash = shaHash.digest().toString(\"hex\");\n\n    this.image = `sbv2-${this.chain}-${this.network}-${this.nodeImage.replace(\n      \"dev-v2-\",\n      \"\"\n    )}-${hash.slice(0, 16)}`;\n\n    // callback config\n    this.onDataCallback = (data) => {\n      this.addLog(data.toString());\n      if (!this.silent) {\n        console.log(`\\u001B[34m${data.toString()}\\u001B[0m`);\n      }\n    };\n    this.onErrorCallback = (error) => {\n      this.addLog(error.toString());\n      if (!this.silent) {\n        console.error(`\\u001B[31m${error.toString()}\\u001B[0m`);\n      }\n    };\n    this.onCloseCallback = (code, signal) => {\n      this.addLog(`Exit code ${code} received`);\n      this.saveLogs();\n      if (!this.isActive) {\n        return;\n      }\n\n      // if reboot from no RPC or if image already exists\n      if (code === 0 || code === 125) {\n        this.startOracle();\n      } else if (!this.silent) {\n        console.error(\n          `\\u001B[31mDocker image exited with code ${code}\\u001B[0m`\n        );\n        console.log(`\\u001B[34m${\"Restarting oracle ...\"}\\u001B[0m`);\n        this.startOracle();\n      } else if (code !== 0 && code !== 1) {\n        console.error(\n          `\\u001B[31mDocker image exited with code ${code}\\u001B[0m`\n        );\n      }\n    };\n  }\n\n  public static isDockerRunning() {\n    // Check docker is running\n    try {\n      require(\"child_process\").execSync(`docker ps`, {\n        stdio: [\"pipe\", \"pipe\", \"pipe\"],\n      });\n    } catch (error) {\n      throw new Error(`Is Docker running?`);\n    }\n  }\n\n  /**\n   * Start a Docker process with the oracle running. If an existing oracle is detected, it will re-attach to the container.\n   */\n  start() {\n    // Kill all existing switchboard oracles\n    try {\n      if (os.type() === \"Windows_NT\") {\n        require(\"child_process\").execSync(\n          `FOR /F \"tokens=*\" %i IN ('docker ps -q -f \"ancestor=switchboardlabs/node\"') DO (docker container stop %i)`,\n          { stdio: [\"pipe\", \"pipe\", \"pipe\"], shell: \"powershell.exe\" }\n        );\n      } else {\n        require(\"child_process\").execSync(\n          `docker container stop $(docker ps | grep \"switchboardlabs/node\" | awk '{ print $1 }')`,\n          { stdio: [\"pipe\", \"pipe\", \"pipe\"] }\n        );\n      }\n    } catch (error) {\n      const errorString = `Failed to stop existing docker containers, ${error}`;\n      if (\n        !errorString.includes(\n          `\"docker container stop\" requires at least 1 argument`\n        )\n      ) {\n        console.error(errorString);\n      }\n    }\n\n    // we always try to create the oracle first\n    // if already exist, attach to it\n    this.createOracle();\n  }\n\n  /** Stop the docker oracle process */\n  stop() {\n    this.isActive = false;\n    this.saveLogs();\n    try {\n      require(\"child_process\").execSync(`docker container stop ${this.image}`, {\n        stdio: [\"pipe\", \"pipe\", \"pipe\"],\n      });\n      return true;\n    } catch (error) {\n      console.error(`Failed to stop docker oracle, ${error}`);\n      return false;\n    }\n  }\n\n  /** Force kill the child_process */\n  kill(exitCode = 1) {\n    this.isActive = false;\n    this.saveLogs();\n    if (this.dockerOracleProcess) {\n      const killed = this.dockerOracleProcess.kill(exitCode);\n      if (!killed) {\n        throw new Error(`Failed to kill the docker oracle process`);\n      }\n    }\n  }\n\n  amIAContainer(): boolean {\n    let amIAContainer = false;\n\n    // Yes, there are some edge cases to checking the presence of the /proc/self/cgroup file to determine if your code is running inside a container:\n    // The /proc/self/cgroup file is only present on Linux systems that have the cgroups feature enabled, so this method will not work on other operating systems.\n    // If your container is using the host's network namespace, then the /proc/self/cgroup will be the same as the host, and the check would return false, even if the code is running inside a container.\n    // Some container runtime (e.g. lxc) does not use /proc/self/cgroup to isolate the container, so the check would return false.\n    // If the container is running with --privileged flag it will have full access to the host, including the /proc filesystem, so the check would return false\n    // Checking the presence of this file only verifies that the process is running in a cgroup, not that it is running in a container.\n    try {\n      if (fs.existsSync(\"/proc/self/cgroup\")) {\n        return true;\n      }\n    } catch (error) {}\n\n    try {\n      const stdout = require(\"child_process\").execSync(\"ps -o pid,args\", {\n        encoding: \"utf-8\",\n      });\n      if (stdout.includes(\"dockerd\") || stdout.includes(\"containerd\")) {\n        return true;\n      }\n    } catch (error) {}\n\n    try {\n      const stdout = require(\"child_process\").execSync(\"lsof -p $$\", {\n        encoding: \"utf-8\",\n      });\n      if (stdout.includes(\"/var/run/docker.sock\")) {\n        return true;\n      }\n    } catch (error) {}\n\n    // not a reliable way to check as it's not only depend on the container, it's depend on the environment variable set by the host or other config\n    if (process.env.container && process.env.container === \"docekr\") {\n      return true;\n    }\n\n    return amIAContainer;\n  }\n\n  /**\n   * Start a Docker process with the oracle running and await for the oracle to signal readiness. If an existing oracle is detected, it will re-attach to the container.\n   *\n   * @param timeout - the number of seconds to await for the oracle to start successfully heartbeating\n   *\n   * @throws if timeout is exceeded and oracle heartbeat was never detected\n   */\n  public async startAndAwait(timeout: number = 60) {\n    this.start();\n    await this.awaitReady(timeout);\n  }\n\n  private getArgs(): string[] {\n    const dockerRunFlags: Set<string> = new Set([\n      `--network=host`, // TODO: re-evaluate this\n      `--name ${this.image}`,\n      `--platform=${this.arch}`,\n      `--health-interval 10s`,\n      `--health-start-period 10s`,\n      ...this.dockerRunFlags,\n    ]);\n\n    for (const [key, value] of Object.entries(this.envVariables)) {\n      dockerRunFlags.add(`-e ${key.toUpperCase()}=${value}`);\n    }\n\n    if (os.type() === \"Linux\") {\n      dockerRunFlags.add(`--add-host=host.docker.internal:host-gateway`);\n    }\n\n    if (this.amIAContainer()) {\n      // More Info: https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/\n      dockerRunFlags.add(`-v /var/run/docker.sock:/var/run/docker.sock`);\n    }\n\n    if (this.chain === \"aptos\") {\n      return [\n        \"run\",\n        ...Array.from(dockerRunFlags),\n        `-e APTOS_FS_PAYER_SECRET_PATH=/home/node/sbv2-oracle/payer_secrets.json`,\n        `--mount type=bind,source=${this.secretPath},target=/home/node/sbv2-oracle/payer_secrets.json`,\n        `switchboardlabs/node:${this.nodeImage}`,\n      ].filter(Boolean);\n    }\n\n    if (this.chain === \"near\") {\n      return [\n        \"run\",\n        ...Array.from(dockerRunFlags),\n        `-e NEAR_FS_PAYER_SECRET_PATH=/home/node/sbv2-oracle/payer_secrets.json`,\n        `--mount type=bind,source=${this.secretPath},target=/home/node/sbv2-oracle/payer_secrets.json`,\n        `switchboardlabs/node:${this.nodeImage}`,\n      ].filter(Boolean);\n    }\n\n    if (this.chain === \"solana\") {\n      return [\n        \"run\",\n        ...Array.from(dockerRunFlags),\n        `-e SOLANA_FS_PAYER_SECRET_PATH=/home/node/sbv2-oracle/payer_secrets.json`,\n        `--mount type=bind,source=${this.secretPath},target=/home/node/sbv2-oracle/payer_secrets.json`,\n        `switchboardlabs/node:${this.nodeImage}`,\n      ].filter(Boolean);\n    }\n\n    throw new Error(`DockerOracle chain must be 'aptos', 'near', or 'solana'`);\n  }\n\n  private createOracle() {\n    // this.ready = false;\n    this.dockerOracleProcess = require(\"child_process\").spawn(\n      \"docker\",\n      this.getArgs(),\n      {\n        shell: true,\n        env: process.env,\n        stdio: this.silent ? undefined : [\"inherit\", \"pipe\", \"pipe\"],\n      }\n    );\n\n    this.dockerOracleProcess!.stdout!.on(\"data\", this.onDataCallback);\n    this.dockerOracleProcess!.stderr!.on(\"error\", (error: any) => {\n      if (\n        !error\n          .toString()\n          .includes(\n            `The container name \"/sbv2-${this.nodeImage}\" is already in use by container`\n          )\n      ) {\n        console.error(`\\u001B[31m${error.toString()}\\u001B[0m`);\n        this.addLog(error.toString());\n      }\n    });\n    this.dockerOracleProcess!.on(\"close\", this.onCloseCallback);\n    this.dockerOracleProcess!.on(\"exit\", this.onCloseCallback);\n    this.dockerOracleProcess!.on(\"exit\", () => {\n      if (this.dockerOracleProcess !== undefined) {\n        this.dockerOracleProcess.removeAllListeners();\n        this.dockerOracleProcess = undefined;\n      }\n    });\n  }\n\n  private startOracle() {\n    if (this.dockerOracleProcess !== undefined) {\n      this.dockerOracleProcess.removeAllListeners();\n    }\n    this.dockerOracleProcess = require(\"child_process\").spawn(\n      \"docker\",\n      [\"start\", \"--attach\", this.image],\n      {\n        shell: true,\n        env: process.env,\n        stdio: this.silent ? undefined : [\"inherit\", \"pipe\", \"pipe\"],\n      }\n    );\n\n    this.dockerOracleProcess!.stdout!.on(\"data\", this.onDataCallback);\n    this.dockerOracleProcess!.stderr!.on(\"error\", this.onErrorCallback);\n    this.dockerOracleProcess!.on(\"close\", this.onCloseCallback);\n    this.dockerOracleProcess!.on(\"exit\", this.onCloseCallback);\n  }\n\n  /** Save an array of oracle logs */\n  saveLogs(): void {\n    const filteredLogs = this.logs\n      .filter((l) => Boolean)\n      .map((l) => l.replace(/\\r?\\n\\s*\\r?\\n/g, \"\\r\\n\"));\n    if (filteredLogs.length > 0) {\n      if (fs.existsSync(this.logFile)) {\n        fs.appendFileSync(this.logFile, \"\\r\\n\" + filteredLogs.join(\"\\r\\n\"));\n        this.logs = [];\n      } else {\n        fs.writeFileSync(this.logFile, filteredLogs.join(\"\\r\\n\"));\n        this.logs = [];\n      }\n    }\n  }\n\n  public static checkDockerHealthStatus(containerName: string): boolean {\n    try {\n      const inspectResponseBuffer = require(\"child_process\").execSync(\n        `docker inspect --format='{{json .State.Health.Status}}' ${containerName}`,\n        { stdio: [\"pipe\", \"pipe\", \"pipe\"] }\n      );\n      const response = Buffer.from(inspectResponseBuffer)\n        .toString(\"utf-8\")\n        .replace(/\\\"/g, \"\") // remove double quotes\n        .trim(); // trim new line\n      return response === \"healthy\" ? true : false;\n    } catch (error) {}\n\n    return false;\n  }\n\n  checkDockerHealthStatus(): boolean {\n    return DockerOracle.checkDockerHealthStatus(this.image);\n  }\n\n  /**\n   * @param timeout - the number of seconds to await for the oracle to start successfully heartbeating\n   *\n   * @throws if timeout is exceeded and oracle heartbeat was never detected\n   */\n  async awaitReady(timeout: number = 60): Promise<void> {\n    let numRetries = timeout * 2;\n    while (numRetries) {\n      try {\n        const status = this.checkDockerHealthStatus();\n        if (status === true) {\n          return;\n        }\n      } catch {}\n\n      --numRetries;\n      await sleep(500);\n    }\n\n    throw new Error(`Failed to start Switchboard oracle in ${timeout} seconds`);\n  }\n\n  private static parseEnvVariables(\n    config: IOracleConfig\n  ): Record<string, string> {\n    // Set environment variables for docker image\n    const envVariables = config.envVariables ?? {};\n\n    // defaults\n    envVariables[\"DISABLE_NONCE_QUEUE\"] = \"1\";\n    envVariables[\"DEBUG\"] = \"1\";\n    envVariables[\"VERBOSE\"] = \"1\";\n\n    // set chain\n    envVariables[\"CHAIN\"] = config.chain ?? \"solana\";\n\n    // rpc url (required)\n    envVariables[\"RPC_URL\"] = envVariables[\"RPC_URL\"] ?? config.rpcUrl;\n    if (envVariables[\"RPC_URL\"].includes(\"localhost\")) {\n      envVariables[\"RPC_URL\"] = envVariables[\"RPC_URL\"].replace(\n        \"localhost\",\n        \"host.docker.internal\"\n      );\n    }\n    if (envVariables[\"RPC_URL\"].includes(\"0.0.0.0\")) {\n      envVariables[\"RPC_URL\"] = envVariables[\"RPC_URL\"].replace(\n        \"0.0.0.0\",\n        \"host.docker.internal\"\n      );\n    }\n    if (!envVariables[\"RPC_URL\"]) {\n      throw new Error(`$RPC_URL is required`);\n    }\n\n    // oracle key (required)\n    envVariables[\"ORACLE_KEY\"] = envVariables[\"ORACLE_KEY\"] ?? config.oracleKey;\n    if (!envVariables[\"ORACLE_KEY\"]) {\n      throw new Error(`$ORACLE_KEY is required`);\n    }\n\n    // task runner config\n    envVariables[\"TASK_RUNNER_SOLANA_RPC\"] =\n      envVariables[\"TASK_RUNNER_SOLANA_RPC\"] ??\n      config.taskRunnerSolanaRpc ??\n      \"https://api.mainnet-beta.solana.com\";\n\n    // solana config\n    if (envVariables[\"CHAIN\"] === \"solana\") {\n      envVariables[\"CLUSTER\"] = config.network;\n    }\n\n    // aptos config\n    if (envVariables[\"CHAIN\"] === \"aptos\") {\n      envVariables[\"NETWORK\"] = config.network;\n\n      if (!envVariables[\"APTOS_PID\"]) {\n        throw new Error(\n          `Need to provide '$APTOS_PID' if chain is set to 'aptos'`\n        );\n      }\n    }\n\n    // near config\n    if (envVariables[\"CHAIN\"] === \"near\") {\n      envVariables[\"NEAR_NETWORK_ID\"] = config.network;\n\n      if (!envVariables[\"NEAR_NAMED_ACCOUNT\"]) {\n        throw new Error(\n          `Need to provide '$NEAR_NAMED_ACCOUNT' if chain is set to 'near'`\n        );\n      }\n    }\n\n    return envVariables;\n  }\n}\n\nfunction normalizeFsPath(fsPath: string) {\n  return fsPath.startsWith(\"/\") ||\n    fsPath.startsWith(\"C:\") ||\n    fsPath.startsWith(\"D:\")\n    ? fsPath\n    : fsPath.startsWith(\"~\")\n    ? path.join(os.homedir(), fsPath.slice(1))\n    : path.join(process.cwd(), fsPath);\n}\n"]}
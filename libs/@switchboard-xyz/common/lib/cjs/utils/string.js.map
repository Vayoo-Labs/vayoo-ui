{"version":3,"file":"string.js","sourceRoot":"","sources":["../../../src/utils/string.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACI,MAAM,UAAU,GAAG,CACxB,GAA4C,EACpC,EAAE,CACV,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;KACb,QAAQ,CAAC,MAAM,CAAC;KAChB,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;KACtB,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AANX,QAAA,UAAU,cAMC;AAEX,QAAA,MAAM,GAAG,kBAAU,CAAC;AAEjC,uEAAuE;AAChE,MAAM,QAAQ,GAAG,CAAC,KAAa,EAAW,EAAE,CACjD,yBAAyB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAD3B,QAAA,QAAQ,YACmB;AAExC,uEAAuE;AAChE,MAAM,eAAe,GAAG,CAAC,KAAa,EAAW,EAAE,CACxD,0CAA0C,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAD5C,QAAA,eAAe,mBAC6B","sourcesContent":["/**\n * Converts to utf-8 encoding and removes null characters.\n */\nexport const buf2String = (\n  buf: Uint8Array | number[] | string | Buffer\n): string =>\n  Buffer.from(buf)\n    .toString(\"utf8\")\n    .replace(/\\u0000/g, \"\")\n    .replace(/\\0/g, \"\");\n\nexport const toUtf8 = buf2String;\n\n/** Determine whether a given string contains only base58 characters */\nexport const isBase58 = (value: string): boolean =>\n  /^[A-HJ-NP-Za-km-z1-9]*$/.test(value);\n\n/** Determine whether a given string contains a secretKey Uint8Array */\nexport const isKeypairString = (value: string): boolean =>\n  /^\\[(\\s)?[0-9]+((\\s)?,(\\s)?[0-9]+){31,}\\]/.test(value);\n"]}
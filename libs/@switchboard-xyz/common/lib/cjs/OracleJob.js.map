{"version":3,"file":"OracleJob.js","sourceRoot":"","sources":["../../src/OracleJob.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAkC;AAElC,oDAAyB;AAGzB;;;;;GAKG;AACH,SAAgB,kBAAkB,CAChC,GAAoD;IAEpD,IAAI,CAAC,GAAG,EAAE;QACR,MAAM,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;KACrB;IAED,IAAI,MAAwB,CAAC;IAC7B,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAC3B,MAAM,gBAAgB,GAAG,GAAG;YAC1B,4DAA4D;aAC3D,OAAO,CAAC,qCAAqC,EAAE,EAAE,CAAC,CAAC;QACtD,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;KACnE;SAAM;QACL,IAAI,CAAC,CAAC,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAClD,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;SAC9D;QACD,IAAI,GAAG,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;SACnD;QACD,MAAM,GAAG,GAAG,CAAC;KACd;IAED,IAAI;QACF,MAAM,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC3C,IAAI,GAAG,KAAK,IAAI,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;SACtB;QACD,OAAO,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KACvC;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,mCAAmC,KAAK,EAAE,CAAC,CAAC;KAC7D;AACH,CAAC;AAhCD,gDAgCC;AAED;;;;GAIG;AACH,SAAgB,oBAAoB,CAClC,OAA4B;IAE5B,OAAO,KAAK,CAAC,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AAClD,CAAC;AAJD,oDAIC;AAmBM,KAAK,UAAU,kBAAkB,CACtC,IAA4B,EAC5B,UAAgC,QAAQ;IAExC,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,uCAAuC,EAAE;QACpE,MAAM,EAAE,MAAM;QACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;QAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;YACnB,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;YACjC,OAAO,EAAE,OAAO;SACjB,CAAC;KACH,CAAC,CAAC;IAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;QAChB,MAAM,IAAI,KAAK,CACb,6CAA6C,QAAQ,CAAC,MAAM,EAAE,CAC/D,CAAC;KACH;IACD,MAAM,OAAO,GAIT,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IAE1B,OAAO;QACL,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,gBAAG,CAAC,CAAC,CAAC,CAAC;QAC/C,MAAM,EAAE,IAAI,gBAAG,CAAC,OAAO,CAAC,MAAM,CAAC;QAC/B,iBAAiB,EAAE,OAAO,CAAC,mBAAmB;KAC/C,CAAC;AACJ,CAAC;AA7BD,gDA6BC","sourcesContent":["import * as proto from \"./protos\";\n\nimport Big from \"big.js\";\n\n\n/**\n * Serialize a stringified OracleJob and replace any json comments\n * @param [job] Stringified OracleJob or object with an array of Switchboard tasks defined\n * @throws {String}\n * @returns {proto.OracleJob }\n */\nexport function serializeOracleJob(\n  job: string | proto.IOracleJob | Record<string, any>\n): proto.OracleJob {\n  if (!job) {\n    throw new Error(\"\");\n  }\n\n  let jobObj: proto.IOracleJob;\n  if (typeof job === \"string\") {\n    const parsedFileString = job\n      // replace all json comments https://regex101.com/r/B8WkuX/1\n      .replace(/\\/\\*[\\s\\S]*?\\*\\/|([^\\\\:]|^)\\/\\/.*$/g, \"\");\n    jobObj = proto.OracleJob.fromObject(JSON.parse(parsedFileString));\n  } else {\n    if (!(\"tasks\" in job) || !Array.isArray(job.tasks)) {\n      throw new Error(`OracleJob is missing the 'tasks' property`);\n    }\n    if (job.tasks.length === 0) {\n      throw new Error(`OracleJob has no tasks defined`);\n    }\n    jobObj = job;\n  }\n\n  try {\n    const err = proto.OracleJob.verify(jobObj);\n    if (err !== null) {\n      throw new Error(err);\n    }\n    return proto.OracleJob.create(jobObj);\n  } catch (error) {\n    throw new Error(`failed to serialize oracle job: ${error}`);\n  }\n}\n\n/**\n * Deserialize an OracleJob from on-chain data\n * @param [jobData] Serialized OracleJob data\n * @returns {OracleJob}\n */\nexport function deserializeOracleJob(\n  jobData: Buffer | Uint8Array\n): proto.OracleJob {\n  return proto.OracleJob.decodeDelimited(jobData);\n}\n\nexport type TaskSimulatorNetwork = \"devnet\" | \"mainnet-beta\";\n\nexport type TaskRunnerResponse1 = TaskRunnerError | TaskRunnerResponse;\n\nexport type TaskRunnerMeta = {\n  taskRunnerVersion: string;\n};\n\nexport type TaskRunnerError = TaskRunnerMeta & {\n  error: string;\n};\n\nexport type TaskRunnerResponse = TaskRunnerMeta & {\n  results: Array<Big>;\n  result: Big;\n};\n\nexport async function simulateOracleJobs(\n  jobs: Array<proto.OracleJob>,\n  network: TaskSimulatorNetwork = \"devnet\"\n): Promise<TaskRunnerResponse> {\n  const response = await fetch(\"https://task.switchboard.xyz/simulate\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      jobs: jobs.map((j) => j.toJSON()),\n      cluster: network,\n    }),\n  });\n\n  if (!response.ok) {\n    throw new Error(\n      `Failed to simulate job definition, Status=${response.status}`\n    );\n  }\n  const payload: {\n    results: Array<string>;\n    result: string;\n    task_runner_version: string;\n  } = await response.json();\n\n  return {\n    results: payload.results.map((r) => new Big(r)),\n    result: new Big(payload.result),\n    taskRunnerVersion: payload.task_runner_version,\n  };\n}\n"]}